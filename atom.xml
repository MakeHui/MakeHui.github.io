<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MakeHui&#39;s 超平和バスターズはずっとなかよし</title>
  <subtitle>あの日見た花の名前を僕達はまだ知らない。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huyaohui.com/"/>
  <updated>2018-03-25T13:42:22.000Z</updated>
  <id>http://huyaohui.com/</id>
  
  <author>
    <name>MakeHui</name>
    <email>hulifu521003@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A dumb UI is a good UI: Using MVP in iOS with swift</title>
    <link href="http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/"/>
    <id>http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/</id>
    <published>2018-03-25T11:39:06.000Z</published>
    <updated>2018-03-25T13:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.<br>主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.<br>那么话说回来为什么要写这篇博文呢?<br>自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白</p>
<a id="more"></a>
<h2 id="MVC-模式介绍"><a href="#MVC-模式介绍" class="headerlink" title="MVC 模式介绍"></a>MVC 模式介绍</h2><p>当涉及到ios应用程序的开发时, 模型视图控制器是一种常见的设计模式.<br>通常视图层由 UIKit 中的元素组成, 这些元素通过程序或 xib 文件定义, 模型层包含应用程序的业务逻辑, 控制器层（由 UIViewController 类表示）是模型和视图之间的粘合剂. </p>
<p><img src="https://user-images.githubusercontent.com/8622405/37874567-ecd45016-3063-11e8-85ee-4d1ae6df6a48.png" alt="bildschirmfoto-2016-02-01-um-22 23 46"></p>
<p>这种模式的一个很好的部分是将业务逻辑和业务规则封装在模型层中. 但是, UIViewController 仍然包含与 UI 有关的逻辑, 这意味着如下：</p>
<ul>
<li>调用业务逻辑并将结果绑定到视图</li>
<li>管理视图元素</li>
<li>将来自模型层的数据转换为友好的格式</li>
<li>导航逻辑</li>
<li>管理 UI 状态</li>
<li>更多…</li>
</ul>
<p>承担所有这些工作, UIViewController 将会变得巨大而难以维护和测试. </p>
<p>所以, 现在是时候考虑改进 MVC 来处理这些问题了.<br>我们称之为改进 模型(Model)-视图(View)-主持人(Presenter) MVP. </p>
<h2 id="MVP-模式介绍"><a href="#MVP-模式介绍" class="headerlink" title="MVP 模式介绍"></a>MVP 模式介绍</h2><p>MVP 模式在1996年由 <a href="http://www.wildcrest.com/Potel/Portfolio/mvp.pdf" target="_blank" rel="external">Mike Potel</a> 首次引入, 并且多年来进行了多次讨论.<br>在他的文章中, <a href="http://martinfowler.com/eaaDev/uiArchs.html" target="_blank" rel="external">GUI架构</a> Martin Fowler 讨论了这种模式, 并将其与其他管理 UI 代码的模式进行了比较. </p>
<p>有很多 MVP 的变体, 它们之间有很小的差异.<br>在这篇文章中, 我选择了目前应用程序开发中常用的常用一种.<br>这个变体的特征是：</p>
<ul>
<li>MVP的视图部分包括uiview和UIViewController. </li>
<li>视图(View)将用户交互委托给主持人(Presenter). </li>
<li>主持人包含处理用户交互的逻辑. </li>
<li>主持人(Presenter)与模型(Model)层进行通信, 将数据转换为UI友好格式, 并更新视图(View). </li>
<li>主持人对 UIKit 没有依赖关系. </li>
<li>视图是被动的 (dump)</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/8622405/37874568-ed6f0386-3063-11e8-830e-6a0ded0f0143.png" alt="bildschirmfoto-2016-02-01-um-22 23 57"></p>
<h2 id="MVP-操作示例"><a href="#MVP-操作示例" class="headerlink" title="MVP 操作示例"></a>MVP 操作示例</h2><p>以下示例将向您展示如何在操作中使用 MVP</p>
<p>我们的示例是一个非常简单的应用程序, 它只显示一个简单的用户列表. 您可以从这里获得完整的源代码: <a href="https://github.com/iyadagha/iOS-mvp-sample" target="_blank" rel="external">https://github.com/iyadagha/iOS-mvp-sample</a> .</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>让我们从用户的简单数据模型开始：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> lastName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> email: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h3><p>那么我们实现一个简单的用户服务, 即异步返回用户列表：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//the service delivers mocked data with a delay</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack:<span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>)&#123;</div><div class="line">        <span class="keyword">let</span> users = [<span class="type">User</span>(firstName: <span class="string">"Iyad"</span>, lastName: <span class="string">"Agha"</span>, email: <span class="string">"iyad@test.com"</span>, age: <span class="number">36</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mila"</span>, lastName: <span class="string">"Haward"</span>, email: <span class="string">"mila@test.com"</span>, age: <span class="number">24</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mark"</span>, lastName: <span class="string">"Astun"</span>, email: <span class="string">"mark@test.com"</span>, age: <span class="number">39</span>)</div><div class="line">                    ]</div><div class="line"> </div><div class="line">        <span class="keyword">let</span> delayTime = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(<span class="number">2</span> * <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>)))</div><div class="line">        dispatch_after(delayTime, dispatch_get_main_queue()) &#123;</div><div class="line">            callBack(users)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserPresenter"><a href="#UserPresenter" class="headerlink" title="UserPresenter"></a>UserPresenter</h3><p>下一步是编写userpresenter.<br>首先我们需要用户的数据模型, 可以直接在视图中使用.<br>它包含根据需要从视图中正确格式化的数据：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserViewData</span></span>&#123;   </div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserView"><a href="#UserView" class="headerlink" title="UserView"></a>UserView</h3><p>之后, 我们需要对视图进行抽象, 这可以在 Presenter 不知道 UIViewController 的情况下使用.<br>我们通过定义一个协议 UserView 来做到这一点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UserView</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该协议将在 Presenter 中使用, 稍后将在 UIViewController 中实现. 基本上, 协议包含了在 Presenter 中控制 View 的函数调用. </p>
<p>Presenter 看起来是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userService:<span class="type">UserService</span></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">private</span> <span class="keyword">var</span> userView : <span class="type">UserView</span>?</div><div class="line">     </div><div class="line">    <span class="keyword">init</span>(userService:<span class="type">UserService</span>)&#123;</div><div class="line">        <span class="keyword">self</span>.userService = userService</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attachView</span><span class="params">(view:UserView)</span></span>&#123;</div><div class="line">        userView = view</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detachView</span><span class="params">()</span></span> &#123;</div><div class="line">        userView = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">self</span>.userView?.startLoading()</div><div class="line">        userService.getUsers&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] users <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.userView?.finishLoading()</div><div class="line">            <span class="keyword">if</span>(users.<span class="built_in">count</span> == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">self</span>?.userView?.setEmptyUsers()</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">let</span> mappedUsers = users.<span class="built_in">map</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="type">UserViewData</span>(name: <span class="string">"<span class="subst">\($<span class="number">0</span>.firstName)</span> <span class="subst">\($<span class="number">0</span>.lastName)</span>"</span>, age: <span class="string">"<span class="subst">\($<span class="number">0</span>.age)</span> years"</span>)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">self</span>?.userView?.setUsers(mappedUsers)</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将在后面看到 Presenter 可以通过函数<code>attachView(view:UserView)</code>和<code>attachView(view:UserView)</code>来更好地控制 UIViewContoller 的生命周期方法<br>请注意, 将<code>User</code>转换为<code>UserViewData</code>是 Presenter 的责任.<br>还要注意, <code>userView</code>必须<code>weak</code>以避免保留周期. </p>
<h3 id="UserViewController"><a href="#UserViewController" class="headerlink" title="UserViewController"></a>UserViewController</h3><p>实现的最后一部分是UserViewController:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emptyView: <span class="type">UIView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> activityIndicator: <span class="type">UIActivityIndicatorView</span>?</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userPresenter = <span class="type">UserPresenter</span>(userService: <span class="type">UserService</span>())</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> usersToDisplay = [<span class="type">UserViewData</span>]()</div><div class="line"> </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView?.dataSource = <span class="keyword">self</span></div><div class="line">        activityIndicator?.hidesWhenStopped = <span class="literal">true</span></div><div class="line"> </div><div class="line">        userPresenter.attachView(<span class="keyword">self</span>)</div><div class="line">        userPresenter.getUsers()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的 ViewController 有一个 tableView 来显示用户列表、一个 emptyView (如果没有用户时显示)和一个当应用程序正在加载用户时显示的 activityIndicator. 此外, 它还有一个 userPresenter 和一个用户列表. </p>
<p>在<code>viewDidLoad方</code>法中, UserViewController将自己连接到 Presenter.<br>这是可行的, 因为我们很快就会看到 UserViewController 实现了 UserView 协议. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UserView</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.startAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.stopAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        usersToDisplay = users</div><div class="line">        tableView?.hidden = <span class="literal">false</span></div><div class="line">        emptyView?.hidden = <span class="literal">true</span>;</div><div class="line">        tableView?.reloadData()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        tableView?.hidden = <span class="literal">true</span></div><div class="line">        emptyView?.hidden = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如我们所看到的, 这些函数不包含复杂的逻辑, 他们只是在进行纯视图管理. </p>
<h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><p>最后, UITableViewDataSource 实现非常基本, 看起来如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> usersToDisplay.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Subtitle</span>, reuseIdentifier: <span class="string">"UserCell"</span>)</div><div class="line">        <span class="keyword">let</span> userViewData = usersToDisplay[indexPath.row]</div><div class="line">        cell.textLabel?.text = userViewData.name</div><div class="line">        cell.detailTextLabel?.text = userViewData.age</div><div class="line">        cell.textLabel</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-images.githubusercontent.com/8622405/37874569-edd27b1e-3063-11e8-9c88-b3c914ddfed7.png" alt="mvp-ios-e1454670703144"></p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>做MVP的好处之一是能够在不测试UIViewController本身的情况下测试大部分UI逻辑.<br>如果我们对我们的 Presenter 有一个很好的单元测试覆盖范围, 我们就不需要为UIViewController编写单元测试了. </p>
<p>现在让我们看看如何测试我们的UserPresenter. 首先, 我们定义两个mock对象. 其中一个mock是UserService, 以使它提供所需的用户列表. 另一个mock是UserView, 以验证这些方法是否被正确调用. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceMock</span>: <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> users: [<span class="type">User</span>]</div><div class="line">    <span class="keyword">init</span>(users: [<span class="type">User</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.users = users</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack: <span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        callBack(users)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewMock</span> : <span class="title">NSObject</span>, <span class="title">UserView</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> setUsersCalled = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> setEmptyUsersCalled = <span class="literal">false</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        setUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        setEmptyUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在, 我们可以测试当服务提供一个非空用户列表时, Presenter 的行为是否正确. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenterTest</span>: <span class="title">XCTestCase</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> emptyUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>]())</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> towUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>(firstName: <span class="string">"firstname1"</span>, lastName: <span class="string">"lastname1"</span>, email: <span class="string">"first@test.com"</span>, age: <span class="number">30</span>),</div><div class="line">                                                     <span class="type">User</span>(firstName: <span class="string">"firstname2"</span>, lastName: <span class="string">"lastname2"</span>, email: <span class="string">"second@test.com"</span>, age: <span class="number">24</span>)])</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testShouldSetUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">        <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: towUsersServiceMock)</div><div class="line">        userPresenterUnderTest.attachView(userViewMock)</div><div class="line"> </div><div class="line">        <span class="comment">//when</span></div><div class="line">        userPresenterUnderTest.getUsers()</div><div class="line"> </div><div class="line">        <span class="comment">//verify</span></div><div class="line">        <span class="type">XCTAssertTrue</span>(userViewMock.setUsersCalled)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的, 如果服务返回一个空的用户列表, 我们也可以测试 Presenter 是否正确工作. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">testShouldSetEmptyIfNoUserAvailable</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">    <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: emptyUsersServiceMock)</div><div class="line">    userPresenterUnderTest.attachView(userViewMock)</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    userPresenterUnderTest.getUsers()</div><div class="line"></div><div class="line">    <span class="comment">//verify</span></div><div class="line">    <span class="type">XCTAssertTrue</span>(userViewMock.setEmptyUsersCalled)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Where-to-go-from-there"><a href="#Where-to-go-from-there" class="headerlink" title="Where to go from there"></a>Where to go from there</h2><p>我们已经看到了MVP是MVC的演进. 我们只需要将UI逻辑放在一个名为 Presenter 的额外组件中, 并 被动的 (dump) 使我们的UIViewController. </p>
<p>MVP的特点之一是 Presenter 和 View 互相认识.<br>在这种情况下, 视图 UIViewController 具有对演示者的引用, 反之亦然.<br>尽管可以使用反应式编程来删除演示者中使用的视图的参考.<br>使用 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a> 或 <a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a> 等响应式框架, 可以构建一个体系结构, 其中只有 View 知道 Presenter, 反之亦然.<br>在这种情况下, 架构将被称为 MVVM. </p>
<p>如果你想在iOS中了解更多关于MVVM的信息, 请查看以下帖子:<br><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1" target="_blank" rel="external">MVVM Tutorial with ReactiveCocoa</a><br><a href="https://medium.com/cobe-mobile/implementing-mvvm-in-ios-with-rxswift-458a2d47c33d#.3zb8ebzqf" target="_blank" rel="external">Implementing MVVM in iOS with RxSwift</a></p>
<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="http://iyadagha.com/using-mvp-ios-swift/" target="_blank" rel="external">http://iyadagha.com/using-mvp-ios-swift/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.&lt;br&gt;主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.&lt;br&gt;那么话说回来为什么要写这篇博文呢?&lt;br&gt;自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://huyaohui.com/tags/Swift/"/>
    
      <category term="MVP" scheme="http://huyaohui.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>一只SB的迷途的披着狼皮的羊 第一章 第一篇</title>
    <link href="http://huyaohui.com/2018/02/24/yi-zhi-SB-de-mi-tu-de-pi-zhuo-lang-pi-de-yang-di-yi-zhang-di-yi-pian/"/>
    <id>http://huyaohui.com/2018/02/24/yi-zhi-SB-de-mi-tu-de-pi-zhuo-lang-pi-de-yang-di-yi-zhang-di-yi-pian/</id>
    <published>2018-02-24T07:22:42.000Z</published>
    <updated>2018-02-25T11:33:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天更新了一下博客 <a href="http://huyaohui.com/about/">About Me</a> 的简历, 写着写着就越写越恼火, 脑海中不断的浮现出之前公司的种种, 及感慨又觉得自己当时太 SB (字面意思上的SB, 傻[shǎ]逼[bī]) 了, 明明是自己太天真了, 还要怪别人不守规矩…</p>
<a id="more"></a>
<p>既然决定写点什么那么索性就从盘古开天, 女娲造人开始说起吧(Ps: 夸张了夸张了, 也就是从刚开始接触互联网开始). 我会按照时间线一步一步的往下写, 也就是记流水账的方式, 不过我会尽量写的有趣些, 恩, 只是尽量而已, 毕竟写这边博客的原因仅仅就是为了发泄不满和吐槽罢了…</p>
<h2 id="第一天上班"><a href="#第一天上班" class="headerlink" title="第一天上班"></a>第一天上班</h2><p>一个非常提别的日子, 没错你一定猜到了(Ps: 猜到了才有鬼呢, 不过确实是个比较特殊的日子), <code>6-1</code>号, 儿童节, 以至于我现在不用翻以前的工作记录, 就能准确的知道是哪天入的职. </p>
<p>第一天上班, 很平静的一天, 熟悉了一下工作环境, 组长(Ps: 也就是当时的上司, 不是日本黑社会的那个组长的意思)给我安排了一下工作: 工作内容: 外推(Ps: 就是网上发小广告, 广告的那个, 号称<code>互联网界的牛皮癣广告</code>), 工资: 1000/月, 没错不是美元也不是欧元澳元, 当然也不是津巴布韦币, 没错是人民币(Ps: 强行解释一波, 也算不上强行解释, 这是一个伏笔, 之后再说), 每天的工作量就是到不同的资讯平台下发出去300条垃圾广告, 就是那种标题是: 治XX病哪家医院好, 然后内容就是: 到xxx医院, 类似于到问答网站中的自问自答, 非常机械的工作(Ps: 这也是我后来成为程序员的契机).</p>
<h2 id="突如其来的危机"><a href="#突如其来的危机" class="headerlink" title="突如其来的危机"></a>突如其来的危机</h2><p>记忆中应该是工作后没几天的事<br>正在上着班划着水(Ps: 上面也说了, 工作非常机械, 只要掌握好方法, 一天的事基本半天就解决了), 等着下班呢<br>突然一个坐我后面(Ps: 开放式办公室)的看上去是领导模样的人(Ps: 实际上是部门主任, 当时并不知道), 指责电脑屏幕大声这个是谁弄的<br>我和邻座的妹子(Ps: 没错我邻座是个妹子, 而且就比我早几天入职而已, &lt;(￣︶￣)&gt;)一齐回头看向电脑屏幕, 当时我就点方了, 貌似是我发的广告, 当时我就在想也没干错什么事呢, 怎么就惹着领导不高兴了呢<br>于是故作镇定, 来回游走, 死不承认, 但是当问到这个账号是谁的时候, 一看实在是躲不掉了(Ps: 账号是当时组长给我的, 意味着有人知道这个账号是谁的了), 心一横承认了(Ps: 尽力了), 反正也打算干完这个月就不干了的<br>(Ps: 当时确实是这么想的, 因为这个工作实在是没什么技术含量, 离我想象中的编程相关的工作完全不同, 这里顺带一提, 其实我是想找一份编程相关的工作的, 但是想到自己没学历又没从事过编程的工作, 只是曾经自学了几个月的Java, 所以才想找份和编程相关的工作看看情况, 但是实际上非常失望)<br>此时这位领导话锋一转, 把我一顿猛夸(Ps: 具体的记不得了, 总之就是说干的不错), 还号召大家向我学习, 我都彻底懵逼了<br>我一个新来的没几天的员工怎么就干的不错呢? 但是呢, 领导讲”大家已经研究决定了”, 所以后来我就念了两首诗, 叫”苟<br>全性命于乱世, 不求闻达于诸侯”.<br>当时我莫名其妙的看着我邻座的怪同学, 不对是女同事, 貌似她也是一脸懵逼(Ps: 后来我才知道是我发的广告上百度关键词搜索首页了, 因为我们的工作目标就是<code>上</code>百度关键词搜索首页)</p>
<h2 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h2><p>开始这个小故事前先说一些当时我工作上的细节方面的东西<br>当时我工资是1000, 试用期最长三个月(Ps: 看表现转正), 而且试用期周末没得休息, 转正工资1500<br>转正条件是每天发广告的篇数最少能达到300(Ps: 这个时候上面提到的那位领导已经和我说这个月就给我转正, 这个时候我每天轻松发450篇, 正式工也就发500而已, 之所以不发的和他们一样多, 主要是因为不想锋芒太露了, 毕竟才来公司半个月不到而已)<br>好了, 故事开始<br>还记得上面说的我邻座的怪同学吗? 不对是女同事(Ps: 最后玩这个梗了, 我保证, 真的)<br>其实和他关系还是挺好的, 毕竟和她进公司的时间相差也不多而且还是邻座的怪..<br>记得是端午节, 当时是说端午节当天放一天假, 但是未转正的员工除外(Ps: 虽然领导说了给我转正, 但这时候文件还没发下来), 当时心里有点不爽了, 非正式员工周末没得休息也就算了, 端午节还没得放假, 而且也就只是放一天而已<br>当时心中按下决心, 当天一定翘班(Ps: 其实当时心里已经是有点飘了的, 上面也说了实在是没什么挑战的工作, 都已经打算拿了第一个月的工资就走人的)<br>理所当然的, 端午节当天我没有去上班, 正当我睡的香的时候, 突然一个陌生的电话打到我手机上, 我心想, 回到南昌换的新手机号, 都没几个人知道我手机号, 谁会打电话给我呢? 莫非是诈骗电话(Ps: 确实当时的诈骗电话还是没猖獗的), 此时我已经准备好了和骗子玩玩套路(Ps: 当时可能没有套路这个词, 总之就是这么个意思)了<br>没想到是我那怪同事, 总之就是问我为什么没去上班, 叫我去上班, 我随即就答道今天不是放假吗?(Ps: 当然我是明知故问), 下面就是她解释云云了, 不再赘述了<br>后来越想越奇怪:<br>1: 她为什么要关心我去不去上班呢, 在我眼里, 关系也就只是比普通同事好一些而已, 毕竟邻座的怪..(哼哼…)<br>2: 我们并没有交换手机号, 我的手机号她哪来的<br>3: 即便她获取到了我的手机号, 那给我打电话的也是领导的事和她没半毛钱关系吧<br>4: 等等… 她获取到我手机号, 刻意为之吗? 什么手段, 目的… 可达鸭眉头一皱发现事情没那么简单<br>不过当时虽然我有这么多疑问, 但是并没有向她询问清楚, 只是写了一张请假条, 这件事就这么过去了…</p>
<p>过去了吗?<br>过去了个毛, 还有后续..<br>经过这件事, 我觉得她是一个挺不错的人呢? 于是乎就想帮她一个忙<br>原因在于, 该节开头写的那些东西, 就是转正的条件, 至少每天需要发到300篇广告, 而她每天只能发到 100多, 200不到<br>所以我鼓起勇气和她说我帮你发吧(Ps: 毕竟这并不关我什么鸟事)<br>结果她非常高兴的拒绝了我, 恩, 没错拒绝了<br>至此之后她老是看到我就傻笑, 也不知道是为什么, 估计认为我是认为我<code>SB</code>吧(Ps: 终于点题)<br>至此我邻座的怪同事, 正式下线了(Ps: 虽然仍然是每天都能相见, 但是已经没有什么交集了, 所有就没她什么戏份了, 虽然她还是会时常傻笑就是了)</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没想到写着写着已经写了近3000字了, 还远没到开喷的时间点, 但是这还只是一个开始而已<br>到目前为止都是一些比较愉快的事情, 本来真的就只是打算喷喷更健康的<br>最后我想了一下干脆分成若干章节去写吧, 写作对我来说太痛苦了(Ps: 文化有限, 文笔太烂)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天更新了一下博客 &lt;a href=&quot;http://huyaohui.com/about/&quot;&gt;About Me&lt;/a&gt; 的简历, 写着写着就越写越恼火, 脑海中不断的浮现出之前公司的种种, 及感慨又觉得自己当时太 SB (字面意思上的SB, 傻[shǎ]逼[bī]) 了, 明明是自己太天真了, 还要怪别人不守规矩…&lt;/p&gt;
    
    </summary>
    
      <category term="SB" scheme="http://huyaohui.com/categories/SB/"/>
    
    
      <category term="Think" scheme="http://huyaohui.com/tags/Think/"/>
    
      <category term="SB" scheme="http://huyaohui.com/tags/SB/"/>
    
  </entry>
  
  <entry>
    <title>打包 Qt 应用时关于动态链接库的一些注意事项</title>
    <link href="http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/"/>
    <id>http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/</id>
    <published>2018-01-04T10:11:33.000Z</published>
    <updated>2018-01-04T10:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. </p>
<a id="more"></a>
<p>首先你需要安装一个干净的操作系统, 使用虚拟机就好了, 保持你的虚拟机和你开发的电脑在同一个网段内(Ps: 方便传输数据)</p>
<p>如何安装虚拟机这里就不细说了, 网上搜索一大堆资料.</p>
<ol>
<li>打包好后, 吧包传到虚拟机内</li>
<li>打开可执行程序, 如果能正常打开, 那么表示你的库连接没有问题</li>
<li>如果弹出提示框, 说你缺少什么, 那么你需要到你的开发环境里去找到这个库, 然后拷贝到可执行程序同目录下的的<code>Frameworks</code>目录里, 直到程序可运行</li>
</ol>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>不同平台之间的一些细微差别</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 平台如果出现问题, 会弹出一个崩溃框, 点击<code>报告</code>按钮, 可以看到崩溃日志, 里面会告诉你除了什么问题, 按照提示操作即可</p>
<p>当你的<code>Frameworks</code>目录下确实存在这个运行库的时候, 还是爆类似如下的错误时, 可检查是否是链接库的链接位置有问题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Termination Reason:    DYLD, [0x1] Library missing</div><div class="line"></div><div class="line">Application Specific Information:</div><div class="line">dyld: launch, loading dependent libraries</div><div class="line"></div><div class="line">Dyld Error Message:</div><div class="line">  Library not loaded: /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2k/lib/libcrypto.1.0.0.dylib</div><div class="line">  Referenced from: /Applications/MyApp/MyApp.app/Contents/Frameworks/libssl.1.0.0.dylib</div><div class="line">  Reason: image not found</div></pre></td></tr></table></figure>
<h4 id="查看链接位置"><a href="#查看链接位置" class="headerlink" title="查看链接位置"></a>查看链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> MyApp.app/Contents/Frameworks</div><div class="line">$ otool -L libssl.1.0.0.dylib</div><div class="line"></div><div class="line">libssl.1.0.0.dylib:</div><div class="line">    @executable_path/../Frameworks/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)</div></pre></td></tr></table></figure>
<p>通过上面可知, 确实是链接位置有问题, 应该是一个相对路径才对</p>
<h4 id="修改链接位置"><a href="#修改链接位置" class="headerlink" title="修改链接位置"></a>修改链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ install_name_tool -change /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib @executable_path/../Frameworks/libcrypto.1.0.0.dylib libssl.1.0.0.dylib</div></pre></td></tr></table></figure>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux 平台需要使用终端运行可执行程序, 因为自己双击打开可执行程序, 无法查看错误日志.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 平台和 macOS 平台太类似, 只不过 Windows 平台太会直接告诉你出了什么问题</p>
<p>需要注意的是: 如果出现了<code>api-ms-win-crt-runtime-l1-1-0.dll</code>丢失, 那么意味着客户机没有安装运行库, 安装<code>msvc2016_x64</code>或者<code>msvc2016_x32</code>即可, google 一下就可以查看到详情了, 这里不细说了</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib" target="_blank" rel="external">https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib</a></p>
<p><a href="https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x" target="_blank" rel="external">https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. &lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://huyaohui.com/categories/Build/"/>
    
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="macOS" scheme="http://huyaohui.com/tags/macOS/"/>
    
      <category term="Linux" scheme="http://huyaohui.com/tags/Linux/"/>
    
      <category term="Windows" scheme="http://huyaohui.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Fix Qt launching debugger not work</title>
    <link href="http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/"/>
    <id>http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/</id>
    <published>2018-01-04T08:33:35.000Z</published>
    <updated>2018-01-04T08:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次手贱导致 Qt debugger 无法工作的经历<br>事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.<br>我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.</p>
<a id="more"></a>
<h2 id="错误log"><a href="#错误log" class="headerlink" title="错误log"></a>错误log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">eERROR: Lldb stderr: Traceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eERROR: Lldb stderr:   File &quot;/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python/lldb/__init__.py&quot;, line 98, in &lt;module&gt;</div><div class="line">e    import six</div><div class="line">eImportError: No module named six</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eerror: python failed attempting to evaluate &apos;print(&apos;@\nlldbstartupok@\n&apos;)&apos;</div></pre></td></tr></table></figure>
<p>google 到的解决方案是需要安装<code>pip install six</code>这个包</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="卸载-brew-安装的-python"><a href="#卸载-brew-安装的-python" class="headerlink" title="卸载 brew 安装的 python"></a>卸载 brew 安装的 python</h3><p>如果不卸载, 无法使用系统 python, <code>LLDB</code>调用的是系统的 python 而不是自己安装的<br>需要注意的是, 卸载完后需要重启一下控制台</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall --ignore-dependencies python</div></pre></td></tr></table></figure>
<h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">sudo python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="安装-six-包"><a href="#安装-six-包" class="headerlink" title="安装 six 包"></a>安装 six 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install six</div></pre></td></tr></table></figure>
<p>ok, 打完收工, 完美如初</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要手贱, 不要手贱, 不要手贱…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次手贱导致 Qt debugger 无法工作的经历&lt;br&gt;事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.&lt;br&gt;我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Debug" scheme="http://huyaohui.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>解决Qt使用动画更改窗口大小时窗口内部件闪烁的问题</title>
    <link href="http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/"/>
    <id>http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/</id>
    <published>2017-11-24T07:25:06.000Z</published>
    <updated>2017-12-30T13:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命不息, 趟坑不止. 还好都能解决, 可喜可贺.<br>先来说下这次踩的又是什么坑吧, 当你使用<code>QPropertyAnimation</code>修改<code>window</code>的<code>size</code>的时候, <code>window</code>内的<code>widget</code>会出现闪烁的现象, 当时的猜测应该是因为<code>widget</code>没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o</p>
<a id="more"></a>
<h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><p>Native Widgets vs Alien Widgets</p>
<p>Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing system. They do not have a native window handle associated with them. This feature significantly speeds up widget painting, resizing, and removes flicker.</p>
<p>Should you require the old behavior with native windows, you can choose one of the following options:</p>
<ul>
<li>Use the <code>QT_USE_NATIVE_WINDOWS</code>=1 in your environment.</li>
<li>Set the <code>Qt::AA_NativeWindows</code> attribute on your application. All widgets will be native widgets.</li>
<li>Set the <code>Qt::WA_NativeWindow</code> attribute on widgets: The widget itself and all of its ancestors will become native (unless <code>Qt::WA_DontCreateNativeAncestors</code> is set).</li>
<li>Call <code>QWidget::winId</code> to enforce a native window (this implies 3).</li>
<li>Set the <code>Qt::WA_PaintOnScreen</code> attribute to enforce a native window (this implies 3).</li>
</ul>
<p>原文地址: <a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a></p>
<p>英语渣这里就不翻译了, 大概意思就是<code>Qt 4.4</code>里面引用了一种机制可以消除闪烁的现象, 但是不知道为什么在<code>5.0</code>之后又移除了这个功能, 只做一个选项供大家使用(Ps: 这一点上文并没有提到, 但是联想到这是<code>Qt5</code>的文档应该也能想到, 但是我还是找到了有人在社区的提问, 单是没人回, 这就很微妙了<a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">-&gt;_-&gt;传送门</a>)</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>上文已经说了不过我这里还是写一下, 都是我测试过的哦..<br>上文中提到的方法, 我只试了两个, 其他的并未尝试, 故不做说明, 见谅</p>
<h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>作用于整个应用</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qApp-&gt;setAttribute(Qt::AA_NativeWindows, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="单个设置"><a href="#单个设置" class="headerlink" title="单个设置"></a>单个设置</h3><p>作用于单个<code>QWidget</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">widget-&gt;setAttribute(Qt::WA_NativeWindow, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当全局设置该属性后, 会导致<code>QTextEdit</code>和<code>QPlainTextEdit</code>无法输入中文</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a><br><a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命不息, 趟坑不止. 还好都能解决, 可喜可贺.&lt;br&gt;先来说下这次踩的又是什么坑吧, 当你使用&lt;code&gt;QPropertyAnimation&lt;/code&gt;修改&lt;code&gt;window&lt;/code&gt;的&lt;code&gt;size&lt;/code&gt;的时候, &lt;code&gt;window&lt;/code&gt;内的&lt;code&gt;widget&lt;/code&gt;会出现闪烁的现象, 当时的猜测应该是因为&lt;code&gt;widget&lt;/code&gt;没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt图标显示模糊原因及解决方法</title>
    <link href="http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/"/>
    <id>http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/</id>
    <published>2017-10-19T10:25:29.000Z</published>
    <updated>2017-10-20T09:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>自使用<code>Qt</code>以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过<code>Qss</code>来设置图标就不会出现失真的情况, 还有一种方案就是使用<code>svg</code>格式的图片, 也能解决部分问题<br>但是这两种方法在设置<code>QLineEdit</code>的<code>icon</code>的时候无效了.<br>没办法继续找答案, 灵光一闪间, 想起了<code>iOS</code>开发中有<code>@2x</code>和<code>@3x</code>的图片, 用来适配不同屏幕分辨率, 于是搜索<code>qt mac  图片 两倍大小</code>, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o</p>
<a id="more"></a>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>The key to the OS X high-dpi mode is that most geometry that was previously specified in device pixels are now in device-independent points. This includes desktop geometry (which on the 15 inch retina MacBook Pro is 1440×900 and not the full 2880×1800), window geometry and event coordinates. The CoreGraphics paint engine is aware of the full resolution and will produce output at that resolution. For example, a 100×100 window occupies the same area on screen on a normal and high-dpi screen (everything else being equal). On the high-dpi screen the window’s backing store contains 200×200 pixels.</p>
<p>The main benefits of this mode is backwards compatibility and free high-dpi vector graphics. Unaware applications simply continue to work with the same geometry as before and can keep hardcoded pixel values. At the same time they get crisp vector graphics such as text for free. Raster graphics does not get an automatic improvement but is manageable. The downside is the inevitable coordinate system confusion when working with code that mixes points and pixels.</p>
<p>The scale factor between points and pixels is always 2x. This is also true when changing the screen resolution – points and pixels are scaled by the same amount. When scaling for “More Space” applications will render to a large backing store which is then scaled down to the physical screen resolution.</p>
<p>不知道怎么翻译o(╯□╰)o, 大概意思就是<code>OS X</code>采用的是<code>retina</code>屏幕, 这种屏幕在相同尺寸的情况下的一个像素点是之前屏幕的两倍, 也就是<a href="https://zh.wikipedia.org/wiki/%E6%AF%8F%E8%8B%B1%E5%AF%B8%E7%82%B9%E6%95%B0" target="_blank" rel="external">DPI</a>更高<br>而<code>Qt</code>默认并不支持这种处理方式, 所以导致实际有一个像素点对应屏幕上两个像素点, 这也就是失真的原因了</p>
<p>原文地址: <a href="http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/" target="_blank" rel="external">http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用<code>QPainter</code>手动设置绘制大小, 如下代码的图片绘制已经被修改成了可以在高DPI系统中返回一个更大的像素映射, 但是这种行为会破坏现有的代码结构, 代码来控制最好的情况应该是<code>Qt</code>框架来直接控制</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">QRect destinationRect = ...</div><div class="line">QIcon icon = ...</div><div class="line">painter.drawPixmap(destinationRect, icon.pixmap(destinationRect.size()));</div><div class="line">QIcon::pixmap()</div></pre></td></tr></table></figure>
<p>所以<code>Qt</code>使用<code>AA_UseHighDpiPixmaps</code>这个应用程序属性来控制渲染：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在Qt 5.1和之后的版本中这个属性默认值是关闭的, 需要手动开启</div><div class="line">qApp-&gt;setAttribute(Qt::AA_UseHighDpiPixmaps);</div></pre></td></tr></table></figure>
<h2 id="一些奇怪的地方"><a href="#一些奇怪的地方" class="headerlink" title="一些奇怪的地方"></a>一些奇怪的地方</h2><p>当没有开启搞质量<code>DPI</code>时:<br>经过尝试, 使用svg矢量图来显示icon一切正常, 单是设置<code>QPushButton</code>的<code>icon</code>时无效, 设置<code>QTreeViewItem</code>的<code>icon</code>是正常的<br>还有就是貌似使用QSS设置icon也不会出现这个bug, 但是不是绝对的, 设置<code>QLineEdit</code>的<code>icon</code>的时候还是会模糊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自使用&lt;code&gt;Qt&lt;/code&gt;以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过&lt;code&gt;Qss&lt;/code&gt;来设置图标就不会出现失真的情况, 还有一种方案就是使用&lt;code&gt;svg&lt;/code&gt;格式的图片, 也能解决部分问题&lt;br&gt;但是这两种方法在设置&lt;code&gt;QLineEdit&lt;/code&gt;的&lt;code&gt;icon&lt;/code&gt;的时候无效了.&lt;br&gt;没办法继续找答案, 灵光一闪间, 想起了&lt;code&gt;iOS&lt;/code&gt;开发中有&lt;code&gt;@2x&lt;/code&gt;和&lt;code&gt;@3x&lt;/code&gt;的图片, 用来适配不同屏幕分辨率, 于是搜索&lt;code&gt;qt mac  图片 两倍大小&lt;/code&gt;, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QDialog 模态对话框和非模态对话框</title>
    <link href="http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/"/>
    <id>http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/</id>
    <published>2017-09-26T08:13:16.000Z</published>
    <updated>2017-10-17T07:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.<br>虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)</p>
<a id="more"></a>
<p>对话框是 GUI 程序中不可或缺的组成部分。很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。尽管 Ribbon 界面的出现在一定程度上减少了对话框的使用几率，但是，我们依然可以在最新版本的 Office 中发现不少对话框。因此，在可预见的未来，对话框会一直存在于我们的程序之中。</p>
<p>Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。</p>
<h2 id="QDialog的模态与非模态区别"><a href="#QDialog的模态与非模态区别" class="headerlink" title="QDialog的模态与非模态区别"></a>QDialog的模态与非模态区别</h2><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><p>简介: 在关闭模式对话框之前，程序不能进行其他工作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// exec()方法: 它总是以模态来显示对话框</span></div><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;exec();</div><div class="line"></div><div class="line"><span class="comment">// show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性</span></div><div class="line">Dialog *dialog2 = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog2-&gt;setModal(<span class="literal">true</span>);</div><div class="line">dialog2-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中当<code>Dialog</code>没关闭前, 无法操作<code>MainWindow</code></p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850572-81f2c330-a26b-11e7-9a8a-50cb8c56ec43.jpg" alt="qq20170926-163259 2x"></p>
<h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p>简介: 运行在应用程序中，对于任何其他窗口都是独立窗口</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// dialog2-&gt;setModal(false); // 默认是false</span></div><div class="line">dialog-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中<code>Dialog</code>和<code>MainWindow</code>互不影响</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850573-8237aac2-a26b-11e7-8829-e24ecc00a3d4.jpg" alt="qq20170926-162738 2x"></p>
<h3 id="特殊的模态对话框"><a href="#特殊的模态对话框" class="headerlink" title="特殊的模态对话框"></a>特殊的模态对话框</h3><p>简介: 在关闭模式对话框之前, 程序可以修改父窗口的大小, 并且对话框会固定停留在父窗口的标题下面</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;open();</div></pre></td></tr></table></figure>
<p>效果如下图</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850571-81f040ba-a26b-11e7-90af-04ac3973b725.jpg" alt="qq20170926-163208 2x"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.&lt;br&gt;虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Dialog" scheme="http://huyaohui.com/tags/Dialog/"/>
    
  </entry>
  
  <entry>
    <title>CMake C/CPP 混合编译</title>
    <link href="http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/"/>
    <id>http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/</id>
    <published>2017-09-25T06:53:25.000Z</published>
    <updated>2017-09-25T07:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实主要是要记录一下使用<code>CMake</code> <code>C/CPP</code>混编的一些细节, 要不然会被坑的很惨, 顺便把<code>C/CPP</code>混编原理和实现也说一下. </p>
<a id="more"></a>
<h2 id="C-C-混合编程是什么"><a href="#C-C-混合编程是什么" class="headerlink" title="C/C++混合编程是什么"></a>C/C++混合编程是什么</h2><p>就像问题本身所说, C/C++混合编程也就是一个工程中, 在C函数中调用C++函数的方法, 在C++的函数中能够调用C函数的方法.</p>
<h2 id="C-C-混合编程有什么用"><a href="#C-C-混合编程有什么用" class="headerlink" title="C/C++混合编程有什么用"></a>C/C++混合编程有什么用</h2><p>在我们日常开发中, 也许会遇到这么一些情况, 同事A, C非常牛逼, 但是对C++一窍不通; 同事B, C++信手拈来, 但是对C却满头雾水. 但是在工作中有这么一种需求, 同事A需要用到C++的方法, 同事B需要用到C的方法,  这怎么办? </p>
<p>没错, 最简单的就是, 同事A把C的代码写好, 然后同事B只管调用即可, 同理, 同事A只管调用同事B写好的C++代码, 各司其职, 提高工作效率.</p>
<h2 id="C-C-混合编程应该怎么实现"><a href="#C-C-混合编程应该怎么实现" class="headerlink" title="C/C++混合编程应该怎么实现"></a>C/C++混合编程应该怎么实现</h2><p>那么, 这混合编程究竟要怎么实现呢?</p>
<p>在介绍之前, 我们先简单了解下以下几个概念</p>
<h3 id="函数重载-Overloading"><a href="#函数重载-Overloading" class="headerlink" title="函数重载(Overloading)"></a>函数重载(Overloading)</h3><p>C++和Java中的函数重载的定义一致, </p>
<p>即在相同的作用域内, C++允许多个函数名称相同, 而形参列表不同: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 没有参数</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;	<span class="comment">// 有一个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;	<span class="comment">// 有一个double类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;	<span class="comment">// 有两个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 报错, 函数重载体现在函数名相同形参列表不同和返回类型无关</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而大家有没有想过为什么C++支持函数重载, 而C却不支持函数重载呢? </p>
<p>这个就要涉及到C++的名字改编机制了. 请往下看~</p>
<h3 id="C-的名字改编机制"><a href="#C-的名字改编机制" class="headerlink" title="C++的名字改编机制"></a>C++的名字改编机制</h3><h4 id="在C中"><a href="#在C中" class="headerlink" title="在C中"></a>在C中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成`_test` </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps: 不提供test()函数的实现是让<code>CMake</code>链接的时候报错, 这样我们才能看清楚test()函数的真面目!</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后依然是 _test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<h4 id="在C-中"><a href="#在C-中" class="headerlink" title="在C++中"></a>在C++中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成 test()</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"test()"</span>, referenced from:</div><div class="line">      run() in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后是 test(int)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps : 有的系统的编译器会编译成_test_int 这种格式, 名字改编机制只是一种思路, 并没有一种唯一的命名规范, 不同的编译器命名规范不同, 但是思路一致! 如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 编译后生成: test() 或 _test</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;   <span class="comment">// 编译后生成: test(int) 或 _test_int</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span></span>;    <span class="comment">// 编译后生成: test(double) 或 _test_double</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;    <span class="comment">// 编译后生成: test(int, int) 或 _test_int_int</span></div></pre></td></tr></table></figure>
<h4 id="extern-及-extern-“C”"><a href="#extern-及-extern-“C”" class="headerlink" title="extern 及 extern “C”"></a>extern 及 extern “C”</h4><p>extern相信大家比较熟悉, 它一般用来声明一个函数, 全局变量的作用域. extern告诉编译器, 其声明的函数和变量可以供本文件或者其他文件使用. 这里不再赘述. </p>
<p>extern “C” 中的C是什么意思呢?</p>
<p>这里的C不是指C语言这一门语言, 而是表示一种编译和链接的规约. C表示符合C语言的编译和连接规约的任何语言，如Fortran(公式翻译)、assembler(汇编语言)等。</p>
<p>ps: extern “C” 只是指定编译和链接的规约, 并不会影响语义, 所以在C++文件中该怎么写还得怎么写, 必须遵循C++的语法规范. </p>
<blockquote>
<p>在C++源文件的语句前加上 extern “C” 的作用就是告诉编译器, 这一段代码按照类C的编译和链接规约来编译和链接(对, 也就是按照类C的函数命名规范编译)</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>通过上面几个例子, 相信大家很容易就能知道为什么C++支持重载而C不支持重载了.<br>因为C++有名字改编机制而C没有!<br>所以在C中, 只要函数名相同, 不管你的形参列表如何南辕北辙, 编译器均会将其编译为同一函数名, 这样在程序执行过程中就会造成函数调用的二义性(也就是对于相同函数名的函数, 程序并不知道应该调用哪一个函数), 这是不允许的, 所以会报错.<br>然而对于C++而言, 尽管他们的函数名相同, 但是因为他们的形参列表不同, 编译器编译后实际上会为他们改名为不同名字的函数, 所以程序执行调用函数的时候并不会产生二义性, 因此C++允许函数重载.<br>这里扯一句题外话, C++的重载被认为不是多态, 因为多态是动态运行时对方法的绑定, 而C++的函数重载最多算是编译时的”多态”. (这句话不一定正确, 请大家纠正)</p>
</blockquote>
<h2 id="CPP调用C代码"><a href="#CPP调用C代码" class="headerlink" title="CPP调用C代码"></a>CPP调用C代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种方法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cpp.h"</span></span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二种方法</span></div><div class="line"><span class="comment">// c.h 文件定义规则</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// Do something...</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里有一点需要注意当<code>CMake</code>的<code>project(projectname LANGUAGES CXX)</code>方法指定了语言时, <code>CMake</code>只会编译指定的语言的代码, 而导致<code>C</code>语言代码不被编译, 这里需要特别注意</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>当需要使用到C/CPP混编时需要用到<code>extern &quot;C&quot;</code></li>
<li>当<code>CMake</code>指定了语言时, 只有指定的语言才会参与编译</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code" target="_blank" rel="external">https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code</a><br><a href="http://guangming008.blog.163.com/blog/static/1203968201011634426908/" target="_blank" rel="external">http://guangming008.blog.163.com/blog/static/1203968201011634426908/</a><br><a href="http://www.jianshu.com/p/8d3eb96e142a" target="_blank" rel="external">http://www.jianshu.com/p/8d3eb96e142a</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实主要是要记录一下使用&lt;code&gt;CMake&lt;/code&gt; &lt;code&gt;C/CPP&lt;/code&gt;混编的一些细节, 要不然会被坑的很惨, 顺便把&lt;code&gt;C/CPP&lt;/code&gt;混编原理和实现也说一下. &lt;/p&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>Qt StyleSheet 作用范围</title>
    <link href="http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/"/>
    <id>http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/</id>
    <published>2017-08-10T12:14:26.000Z</published>
    <updated>2017-08-10T13:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到<code>Qss</code>和<code>css</code>是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~</p>
<a id="more"></a>
<h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><p>在开发界面的过程中, 莫名其面的<code>QTableWidget</code>的滚动条变成方块了, 然后我单独开启一个项目测试又是正常的, 感觉非常奇怪<br>后来我惊讶的发现只要把<code>QTableWidget</code>的父节点<code>QWidget</code>改成删除就好了, 我想当然的以为是<code>QWidget</code>的bug, 我就把父节点<code>QWidget</code>换成<code>QFrame</code>, 居然可以了, 这让我更加确信是<code>QWidget</code>的bug了, 也让我走进了万劫不复的深渊<br>然后我继续忙, 突然间<code>QTableWidget</code>的滚动条又变成方块了, 遂陷入沉思, 最后决定放弃, 先把滚动条关闭再说, 不想再折腾这个东西了(已经折腾两天了/(ㄒoㄒ)/~~)<br>在写<code>Qss</code>的时候不小心写错了个单词, 然后发现控制台出现了, 好几个相同的报错, 遂想到是不是当前节点的子节点也修改了这个属性呢? 当时还没想到是这个原因导致的滚动条bug(前面说了我已经放弃了)<br>再后来我不甘心继续找滚动条bug的原因, 我还怀疑是<code>Qt</code>版本的问题, 于是就用一个旧版本去重新实现该功能, 发现一切正常, 我又相当然的以为真是<code>Qt</code>的bug, 然后我大喜欢把项目迁移的旧版<code>Qt</code>上, 又发现直接用旧版本<code>Qt</code>打开<code>.ui</code>文件滚动条bug还在, 于是乎我就用旧版本<code>Qt</code>重新吧界面画了一遍, 一开始的时候还没问题, 但是当我改完细节后, 立马就不行了, 滚动条bug又出现了<br>于是乎我慢慢的撤销代码, 一步一步测试, 最后发现是设置了<code>Qss</code>才导致的滚动条bug, 突然灵光一闪记起来了之前的写出单词导致控制台出现相同的报错, 一切的线索都链接起来了<br>终于知道为什么连google都找不答案, 原来是直接太傻逼了, 最后搜索 <code>qt stylesheet</code>搜索框下面直接出现了<code>qt stylesheet 仅限当前</code>, 我想我肯定找到答案了</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th style="text-align:left">选择器</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">通用选择器</td>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配所有的widget</td>
</tr>
<tr>
<td style="text-align:left">类型选择器</td>
<td style="text-align:left">QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例和继承于它的子类</td>
</tr>
<tr>
<td style="text-align:left">属性选择器</td>
<td style="text-align:left">QPushButton[flat=”false”]</td>
<td style="text-align:left">匹配所有非flat的QPushButton(通常情况下，使用Q_PROPERTY宏来声明你的属性，比如此例中的flat),并且要注意，你的属性类型要受 QVariant::toString()支持(查看toString()方法的帮助文档以获取更详细的解释). <br>这个选择器类型也可以用来判断动态属性，要了解更多使用自定义动态属性的细节，请参考使用自定义动态属性 。<br>除了使用=，你还可以使用~=来判断一个QStringList中是否包含给定的QString。<br>警告：如果在设置了样式表后，相应的属性值发生了改变(如：flat变成了”true”)，则有必要重新加载样式表，一个有效的方法是，取消样式表，再重新设置一次,下面的代码是其中一种方式：<br>style()-&gt;unpolish(this);<br>style()-&gt;polish(this);// force a stylesheet recomputation</td>
</tr>
<tr>
<td style="text-align:left">类选择器</td>
<td style="text-align:left">.QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例，但不包括它的子类，与*[class~=”QPushButton”]是等价的。</td>
</tr>
<tr>
<td style="text-align:left">ID选择器</td>
<td style="text-align:left">QPushButton#okButton</td>
<td style="text-align:left">匹配所有object name为”okButton”的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">后裔选择器</td>
<td style="text-align:left">QDialog QPushButton</td>
<td style="text-align:left">匹配所有继承于QDialog(包括其所有子孙)的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">子选择器</td>
<td style="text-align:left">QDialog &gt; QPushButton</td>
<td style="text-align:left">匹配所有直接继承与QDialog的QPushButton实例。</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/qq_24571549/article/details/64131396" target="_blank" rel="external">http://blog.csdn.net/qq_24571549/article/details/64131396</a><br><a href="http://blog.csdn.net/vonger/article/details/7899101" target="_blank" rel="external">http://blog.csdn.net/vonger/article/details/7899101</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到&lt;code&gt;Qss&lt;/code&gt;和&lt;code&gt;css&lt;/code&gt;是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Qss" scheme="http://huyaohui.com/tags/Qss/"/>
    
  </entry>
  
  <entry>
    <title>Qt Creator 编译第三方扩展库</title>
    <link href="http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/"/>
    <id>http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/</id>
    <published>2017-07-30T04:25:45.000Z</published>
    <updated>2017-07-30T08:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇关于Qt编译的文章以来<a href="http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/">CMake 编译 Qt 安装第三方 libqgit2 扩展</a>, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.<br>其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). </p>
<a id="more"></a>
<h2 id="之前失败的原因"><a href="#之前失败的原因" class="headerlink" title="之前失败的原因"></a>之前失败的原因</h2><p>主要原因是选择错了编译环境, 应该直接使用<code>Qt Creator</code>进行编译, 而我使用的是<code>Cmake GUI</code>进行的编译, 导致最后编译出来的库在<code>Qt</code>中部分功能无法正常使用.</p>
<h2 id="此次编译过程"><a href="#此次编译过程" class="headerlink" title="此次编译过程"></a>此次编译过程</h2><h3 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750561-b7233e3a-7521-11e7-8330-190bd28733a4.jpg" alt="qq20170730-121113 2x"></p>
<p>这一步非常重要, 之前我也试过直接使用<code>Qt Creator</code>导入第三方库, 会导入失败, 原因就在这没有选择<code>C编译器</code>(<code>libgit2</code>是<code>C语言库</code>)</p>
<h3 id="导入libgit2库"><a href="#导入libgit2库" class="headerlink" title="导入libgit2库"></a>导入libgit2库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750562-b75f4038-7521-11e7-8d7d-804f6273885b.jpg" alt="qq20170730-121325 2x"></p>
<p>直接选择<code>CMakeLists.txt</code>打开</p>
<h3 id="选择构建工具包"><a href="#选择构建工具包" class="headerlink" title="选择构建工具包"></a>选择构建工具包</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750564-b78d10c6-7521-11e7-8552-45fb7b1ac3d4.jpg" alt="qq20170730-121622 2x"></p>
<p>选择上面配置好<code>C编译器</code>的构建工具包</p>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750566-b797b1e8-7521-11e7-8089-88036c9f119b.jpg" alt="qq20170730-121658 2x"></p>
<p>最后构建出来的项目如上图所示, 如果没有配置<code>C编译器</code>的话就只能看到一个<code>CMakeLists.txt</code>文件, 然后点击运行</p>
<h3 id="最后生成的链接库"><a href="#最后生成的链接库" class="headerlink" title="最后生成的链接库"></a>最后生成的链接库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750565-b7975900-7521-11e7-9310-6684f3dce175.jpg" alt="qq20170730-121835 2x"></p>
<p>运行完成后, 不出意外的话会在项目同级目录下生成一个<code>build</code>目录, 里面有我们要的编译后生成的二进制文件, 至此编译完成.(在windows平台如法炮制就好, linux平台暂未测试)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇关于Qt编译的文章以来&lt;a href=&quot;http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/&quot;&gt;CMake 编译 Qt 安装第三方 libqgit2 扩展&lt;/a&gt;, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.&lt;br&gt;其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). &lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="libgit2" scheme="http://huyaohui.com/tags/libgit2/"/>
    
  </entry>
  
  <entry>
    <title>cocos2dx Texture、SpriteFrame、Sprite的区别</title>
    <link href="http://huyaohui.com/2017/07/28/cocos2dx-Texture%E3%80%81SpriteFrame%E3%80%81Sprite-de-qu-bie/"/>
    <id>http://huyaohui.com/2017/07/28/cocos2dx-Texture、SpriteFrame、Sprite-de-qu-bie/</id>
    <published>2017-07-28T13:24:10.000Z</published>
    <updated>2017-07-28T13:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.<br>前段时间查了下<code>Texture、SpriteFrame、Sprite的区别</code>(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.</p>
<a id="more"></a>
<h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>Texture是保存在GPU缓冲中的一张纹理。是由一张图片创建获得的</p>
<h2 id="SpriteFrame"><a href="#SpriteFrame" class="headerlink" title="SpriteFrame"></a>SpriteFrame</h2><p><code>SpriteFrame</code> = <code>Texture</code> + <code>Rect</code><br>也就是说<code>SpriteFrame</code>是根据一张纹理材质来剪切而获得的</p>
<h2 id="Sprite"><a href="#Sprite" class="headerlink" title="Sprite"></a>Sprite</h2><p>简单的说<code>Sprite</code>就是一个<code>SpriteFrame</code>的控制器, 可以控制<code>SpriteFrame</code>以何种形式进行渲染</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html" target="_blank" rel="external">http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html</a><br><a href="http://blog.csdn.net/huaweitman/article/details/11477493" target="_blank" rel="external">http://blog.csdn.net/huaweitman/article/details/11477493</a><br><a href="http://dwz.cn/6kkzf2" target="_blank" rel="external">精灵 (计算机图形学)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.&lt;br&gt;前段时间查了下&lt;code&gt;Texture、SpriteFrame、Sprite的区别&lt;/code&gt;(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/categories/Cocos2dx/"/>
    
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/tags/Cocos2dx/"/>
    
      <category term="Texture" scheme="http://huyaohui.com/tags/Texture/"/>
    
      <category term="SpriteFrame" scheme="http://huyaohui.com/tags/SpriteFrame/"/>
    
      <category term="Sprite" scheme="http://huyaohui.com/tags/Sprite/"/>
    
  </entry>
  
  <entry>
    <title>Python的Flask框架中使用Flask-Migrate扩展迁移数据库</title>
    <link href="http://huyaohui.com/2017/06/05/Python-de-Flask-kuang-jia-zhong-shi-yong-Flask-Migrate-kuo-zhan-qian-yi-shu-ju-ku/"/>
    <id>http://huyaohui.com/2017/06/05/Python-de-Flask-kuang-jia-zhong-shi-yong-Flask-Migrate-kuo-zhan-qian-yi-shu-ju-ku/</id>
    <published>2017-06-05T09:51:25.000Z</published>
    <updated>2017-06-09T09:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flask-Migrate可以帮助Flask应用程序通过预设的Python脚本完成数据库迁移操作,这里我们就来看一下Python的Flask框架中使用Flask-Migrate扩展迁移数据库的教程,需要的朋友可以参考下</p>
<p>我们在升级系统的时候，经常碰到需要更新服务器端数据结构等操作，之前的方式是通过手工编写alter sql脚本处理，经常会发现遗漏，导致程序发布到服务器上后无法正常使用。</p>
<p>现在我们可以使用Flask-Migrate插件来解决之，Flask-Migrate插件是基于Alembic，Alembic是由大名鼎鼎的SQLAlchemy作者开发数据迁移工具。</p>
<a id="more"></a>
<h2 id="安装Flask-Migrate插件"><a href="#安装Flask-Migrate插件" class="headerlink" title="安装Flask-Migrate插件"></a>安装Flask-Migrate插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install Flask-Migrate</div></pre></td></tr></table></figure>
<h2 id="修改Flask-App部分的代码，以增加Migrate相关的Command"><a href="#修改Flask-App部分的代码，以增加Migrate相关的Command" class="headerlink" title="修改Flask App部分的代码，以增加Migrate相关的Command"></a>修改Flask App部分的代码，以增加Migrate相关的Command</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db = SQLAlchemy(app)</div><div class="line">migrate = Migrate(app, db)</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python app.py db init</div></pre></td></tr></table></figure>
<p>使用Flask-Migrate迁移数据库<br>随着开发进度不断向前，你会发现你的数据库模型需要更改，而当这种情况发生时需要更新数据库。<br>Flask-SQLAlchemy只有当数据库表不存在了才从模型创建它们，所以更新表的唯一途径就是销毁旧的表，当然这将导致所有数据库中的数据丢失。</p>
<p>有个更好的解决方案就是使用数据库迁移框架。和源码版本控制工具跟踪更改源码文件一样，数据库迁移框架跟踪更改数据库模型，然后将增量变化应用到数据库中。</p>
<p>SQLAlchemy的主要开发人员写了一个Alembic迁移框架，但我们不直接使用Alembic，Flask应用可以使用Flask-Migrate扩展，一个集成了Flask-Script来提供所有操作命令的轻量级Alembic包。</p>
<h2 id="创建迁移仓库"><a href="#创建迁移仓库" class="headerlink" title="创建迁移仓库"></a>创建迁移仓库</h2><p>下面展示扩展如何初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask.ext.migrate import Migrate, MigrateCommand </div><div class="line"></div><div class="line"># 其他配置略过...</div><div class="line"></div><div class="line">migrate = Migrate(app, db)</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div></pre></td></tr></table></figure>
<p>为了可以使用数据库迁移命令，Flask-Migrate提供MigrateCommand类来连接Flask-Script的manager对象。在这个示例中使用db来连接到命令。</p>
<p>在数据库迁移可以维护之前，必须通过init子命令来创建一个迁移库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db init</div><div class="line"> Creating directory /home/flask/flasky/migrations...done</div><div class="line"> Creating directory /home/flask/flasky/migrations/versions...done</div><div class="line"> Generating /home/flask/flasky/migrations/alembic.ini...done</div><div class="line"> Generating /home/flask/flasky/migrations/env.py...done</div><div class="line"> Generating /home/flask/flasky/migrations/env.pyc...done</div><div class="line"> Generating /home/flask/flasky/migrations/README...done</div><div class="line"> Generating /home/flask/flasky/migrations/script.py.mako...done</div><div class="line"> Please edit configuration/connection/logging settings in</div><div class="line"> &apos;/home/flask/flasky/migrations/alembic.ini&apos; before proceeding.</div></pre></td></tr></table></figure>
<p>这个命令创建一个migrations文件夹，里面存放了所有迁移脚本。</p>
<h2 id="创建迁移脚本"><a href="#创建迁移脚本" class="headerlink" title="创建迁移脚本"></a>创建迁移脚本</h2><p>在Alembic，数据库迁移工作由迁移脚本完成。这个脚本有两个函数，分别叫做upgrade()和downgrade()。upgrade()函数实施数据库更改，是迁移的一部分，downgrade()函数则删除它们。通过添加和删除数据库变化的能力，Alembic可以重新配置数据库从历史记录中的任何时间点。</p>
<p>Alembic迁移可以分别使用revision和migrate命令手动或自动创建。手动迁移通过由开发人员使用Alembic的Operations对象指令实现的空upgrade()和downgrade()函数创建迁移框架脚本。另一方面，自动迁移通过寻找模型定义和数据库当前状态间的不同为upgrade()和downgrade()生成代码。</p>
<p>警告：自动迁移并不总是准确的，可以忽略一些细节。所以应该经常审查一下自动生成的迁移脚本。<br>migrate子命令创建自动迁移脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db migrate -m &quot;initial migration&quot;</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl.</div><div class="line">INFO [alembic.migration] Will assume non-transactional DDL.</div><div class="line">INFO [alembic.autogenerate] Detected added table &apos;roles&apos;</div><div class="line">INFO [alembic.autogenerate] Detected added table &apos;users&apos;</div><div class="line">INFO [alembic.autogenerate.compare] Detected added index</div><div class="line">&apos;ix_users_username&apos; on &apos;[&apos;username&apos;]&apos;</div><div class="line"> Generating /home/flask/flasky/migrations/versions/1bc</div><div class="line"> 594146bb5_initial_migration.py...done</div></pre></td></tr></table></figure>
<h2 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h2><p>一旦迁移脚本被审查且接受，就可以使用db upgrade命令更新到数据库中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db upgrade</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl.</div><div class="line">INFO [alembic.migration] Will assume non-transactional DDL.</div><div class="line">INFO [alembic.migration] Running upgrade None -&gt; 1bc594146bb5, initial migration</div></pre></td></tr></table></figure>
<p>第一次迁移实际上相当于调用db.create_all()，但在后续迁移中，upgrade命令对表实施更新操作但不影响表中的内容。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db init       # 初始化</div><div class="line">                                # 仅在第一次时使用</div><div class="line">$ python hello.py db migrate -m &quot;initial migration&quot;     # 创建迁移脚本</div><div class="line">                                                        # 每次有修改后都需要重新生成迁移脚本</div><div class="line">$ python hello.py db upgrade    # 迁移数据, 也可升级数据库</div><div class="line">$ python hello.py db downgrade  # 降级数据库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask-Migrate可以帮助Flask应用程序通过预设的Python脚本完成数据库迁移操作,这里我们就来看一下Python的Flask框架中使用Flask-Migrate扩展迁移数据库的教程,需要的朋友可以参考下&lt;/p&gt;
&lt;p&gt;我们在升级系统的时候，经常碰到需要更新服务器端数据结构等操作，之前的方式是通过手工编写alter sql脚本处理，经常会发现遗漏，导致程序发布到服务器上后无法正常使用。&lt;/p&gt;
&lt;p&gt;现在我们可以使用Flask-Migrate插件来解决之，Flask-Migrate插件是基于Alembic，Alembic是由大名鼎鼎的SQLAlchemy作者开发数据迁移工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://huyaohui.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://huyaohui.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://huyaohui.com/tags/Flask/"/>
    
      <category term="Flask-Migrate" scheme="http://huyaohui.com/tags/Flask-Migrate/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 浅析</title>
    <link href="http://huyaohui.com/2017/03/06/WebSocket-qian-xi/"/>
    <id>http://huyaohui.com/2017/03/06/WebSocket-qian-xi/</id>
    <published>2017-03-06T09:33:56.000Z</published>
    <updated>2017-03-06T10:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近应用中正好使用到<code>WebSocket</code>, <code>腾讯Bugly</code>就发表了这篇文章, 虽然也不是非常全面但是把<code>WebSocket</code>的基本概念和使用都说到了, 还是相当受用, 故转载过来.<br>随后我会把把一些我遇到的转载文章中没有提及的问题补充到本文末尾. <a href="http://t.cn/RiCKZ0R" target="_blank" rel="external">原文地址-&gt;</a></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在WebSocket API尚未被众多浏览器实现和发布的时期，开发者在开发需要接收来自服务器的实时通知应用程序时，不得不求助于一些“hacks”来模拟实时连接以实现实时通信，最流行的一种方式是长轮询 。 长轮询主要是发出一个HTTP请求到服务器，然后保持连接打开以允许服务器在稍后的时间响应（由服务器确定）。为了这个连接有效地工作，许多技术需要被用于确保消息不错过，如需要在服务器端缓存和记录多个的连接信息（每个客户）。虽然长轮询是可以解决这一问题的，但它会耗费更多的资源，如CPU、内存和带宽等，要想很好的解决实时通信问题就需要设计和发布一种新的协议。</p>
<p>在WebSocket API尚未被众多浏览器实现和发布的时期，开发者在开发需要接收来自服务器的实时通知应用程序时，不得不求助于一些“hacks”来模拟实时连接以实现实时通信，最流行的一种方式是长轮询 。 长轮询主要是发出一个HTTP请求到服务器，然后保持连接打开以允许服务器在稍后的时间响应（由服务器确定）。为了这个连接有效地工作，许多技术需要被用于确保消息不错过，如需要在服务器端缓存和记录多个的连接信息（每个客户）。虽然长轮询是可以解决这一问题的，但它会耗费更多的资源，如CPU、内存和带宽等，要想很好的解决实时通信问题就需要设计和发布一种新的协议。</p>
<p>WebSocket 是伴随HTML5发布的一种新协议。它实现了浏览器与服务器全双工通信(full-duplex)，可以传输基于消息的文本和二进制数据。WebSocket 是浏览器中最靠近套接字的API，除最初建立连接时需要借助于现有的HTTP协议，其他时候直接基于TCP完成通信。它是浏览器中最通用、最灵活的一个传输机制，其极简的API 可以让我们在客户端和服务器之间以数据流的形式实现各种应用数据交换（包括JSON 及自定义的二进制消息格式），而且两端都可以随时向另一端发送数据。在这个简单的API 之后隐藏了很多的复杂性，而且还提供了更多服务，如：</p>
<p>连接协商和同源策略；<br>与既有 HTTP 基础设施的互操作；<br>基于消息的通信和高效消息分帧；<br>子协议协商及可扩展能力。<br>所幸，浏览器替我们完成了上述工作，我们只需要简单的调用即可。任何事物都不是完美的，设计限制和性能权衡始终会有，利用WebSocket 也不例外，在提供自定义数据交换协议同时，也不再享有在一些本由浏览器提供的服务和优化，如状态管理、压缩、缓存等。</p>
<p>随着HTML5的发布，越来越多的浏览器开始支持WebSocket，如果你的应用还在使用长轮询，那就可以考虑切换了。下面的图表显示了在一种常见的使用案例下，WebSocket和长轮询之间的带宽消耗差异：</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1134915854/TB2G6hAgMRkpuFjy1zeXXc.6FXa_!!1134915854.gif" alt=""></p>
<h3 id="WebSocket-API"><a href="#WebSocket-API" class="headerlink" title="WebSocket API"></a>WebSocket API</h3><p>WebSocket 对象提供了一组 API，用于创建和管理 WebSocket 连接，以及通过连接发送和接收数据。浏览器提供的WebSocket API很简洁，调用示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>); </div><div class="line"><span class="comment">// 创建安全WebSocket 连接（wss）</span></div><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; ... &#125; </div><div class="line"><span class="comment">// 错误处理</span></div><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125; </div><div class="line"><span class="comment">// 关闭时调用</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="comment">// 连接建立时调用</span></div><div class="line">    ws.send(<span class="string">"Connection established. Hello server!"</span>); </div><div class="line">    <span class="comment">// 向服务端发送消息</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123; </div><div class="line">    <span class="comment">// 接收服务端发送的消息</span></div><div class="line">    <span class="keyword">if</span>(msg.data <span class="keyword">instanceof</span> Blob) &#123; </div><div class="line">        <span class="comment">// 处理二进制信息</span></div><div class="line">        processBlob(msg.data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        processText(msg.data); </div><div class="line">        <span class="comment">// 处理文本信息</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接收和发送数据"><a href="#接收和发送数据" class="headerlink" title="接收和发送数据"></a>接收和发送数据</h4><p>WebSocket提供了极简的API，开发者可以轻松的调用，浏览器会为我们完成缓冲、解析、重建接收到的数据等工作。应用只需监听onmessage事件，用回调处理返回数据即可。 WebSocket支持文本和二进制数据传输，浏览器如果接收到文本数据，会将其转换为DOMString 对象，如果是二进制数据或Blob 对象，可直接将其转交给应用或将其转化为ArrayBuffer，由应用对其进行进一步处理。从内部看，协议只关注消息的两个信息：净荷长度和类型（前者是一个可变长度字段），据以区别UTF-8 数据和二进制数据。示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>);</div><div class="line">ws.binaryType = <span class="string">"arraybuffer"</span>; </div><div class="line"></div><div class="line"><span class="comment">// 接收数据</span></div><div class="line">wss.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(msg.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</div><div class="line">    processArrayBuffer(msg.data);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    processText(msg.data);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// 发送数据</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  socket.send(<span class="string">"Hello server!"</span>); </div><div class="line">  socket.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="string">'msg'</span>: <span class="string">'payload'</span>&#125;));</div><div class="line"></div><div class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">128</span>);</div><div class="line">  socket.send(buffer);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> intview = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</div><div class="line">  socket.send(intview);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer]);</div><div class="line">  socket.send(blob); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Blob 对象是包含有只读原始数据的类文件对象，可存储二进制数据，它会被写入磁盘；ArrayBuffer （缓冲数组）是一种用于呈现通用、固定长度的二进制数据的类型，作为内存区域可以存放多种类型的数据。</p>
<p>对于将要传输的二进制数据，开发者可以决定以何种方式处理，可以更好的处理数据流，Blob 对象一般用来表示一个不可变文件对象或原始数据，如果你不需要修改它或者不需要把它切分成更小的块，那这种格式是理想的；如果你还需要再处理接收到的二进制数据，那么选择ArrayBuffer 应该更合适。</p>
</blockquote>
<p>WebSocket 提供的信道是全双工的，在同一个TCP 连接上，可以双向传输文本信息和二进制数据，通过数据帧中的一位（bit）来区分二进制或者文本。WebSocket 只提供了最基础的文本和二进制数据传输功能，如果需要传输其他类型的数据，就需要通过额外的机制进行协商。WebSocket 中的send( ) 方法是异步的：提供的数据会在客户端排队，而函数则立即返回。在传输大文件时，不要因为回调已经执行，就错误地以为数据已经发送出去了，数据很可能还在排队。要监控在浏览器中排队的数据量，可以查询套接字的bufferedAmount 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>);</div><div class="line"></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    subscribeToApplicationUpdates(<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </div><div class="line">        <span class="keyword">if</span> (ws.bufferedAmount == <span class="number">0</span>) </div><div class="line">            ws.send(evt.data); </div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>前面的例子是向服务器发送应用数据，所有WebSocket 消息都会按照它们在客户端排队的次序逐个发送。因此，大量排队的消息，甚至一个大消息，都可能导致排在它后面的消息延迟——队首阻塞！为解决这个问题，应用可以将大消息切分成小块，通过监控bufferedAmount 的值来避免队首阻塞。甚至还可以实现自己的优先队列，而不是盲目都把它们送到套接字上排队。要实现最优化传输，应用必须关心任意时刻在套接字上排队的是什么消息！</p>
<h4 id="子协议协商"><a href="#子协议协商" class="headerlink" title="子协议协商"></a>子协议协商</h4><p>在以往使用HTTP 或XHR 协议来传输数据时，它们可以通过每次请求和响应的HTTP 首部来沟通元数据，以进一步确定传输的数据格式，而WebSocket 并没有提供等价的机制。上文已经提到WebSocket只提供最基础的文本和二进制数据传输，对消息的具体内容格式是未知的。因此，如果WebSocket需要沟通关于消息的元数据，客户端和服务器必须达成沟通这一数据的子协议，进而间接地实现其他格式数据的传输。下面是一些可能策略的介绍：</p>
<ul>
<li>客户端和服务器可以提前确定一种固定的消息格式，比如所有通信都通过 JSON编码的消息或者某种自定义的二进制格式进行，而必要的元数据作为这种数据结构的一个部分；</li>
<li>如果客户端和服务器要发送不同的数据类型，那它们可以确定一个双方都知道的消息首部，利用它来沟通说明信息或有关净荷的其他解码信息；</li>
<li>混合使用文本和二进制消息可以沟通净荷和元数据，比如用文本消息实现 HTTP首部的功能，后跟包含应用净荷的二进制消息。</li>
</ul>
<p>上面介绍了一些可能的策略来实现其他格式数据的传输，确定了消息的串行格式化，但怎么确保客户端和服务端是按照约定发送和处理数据，这个约定客户端和服务端是如何协商的呢？这就需要WebSocket 提供一个机制来协商，这时WebSocket构造器方法的第二个可选参数就派上用场了，通过这个参数客户端和服务端就可以根据约定好的方式处理发送及接收到的数据。</p>
<p>WebSocket构造器方法如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WebSocket WebSocket(</div><div class="line"><span class="keyword">in</span> DOMString url, </div><div class="line"><span class="comment">// 表示要连接的URL。这个URL应该为响应WebSocket的地址。</span></div><div class="line"><span class="keyword">in</span> optional DOMString protocols </div><div class="line">    <span class="comment">// 可以是一个单个的协议名字字符串或者包含多个协议名字字符串的数组。默认设为一个空字符串。</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>通过上述WebSocket构造器方法的第二个参数，客户端可以在初次连接握手时，可以告知服务器自己支持哪种协议。如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>,[<span class="string">'appProtocol'</span>, <span class="string">'appProtocol-v2'</span>]);</div><div class="line"></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="keyword">if</span> (ws.protocol == <span class="string">'appProtocol-v2'</span>) &#123; </div><div class="line">    ...</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，WebSocket 构造函数接受了一个可选的子协议名字的数组，通过这个数组，客户端可以向服务器通告自己能够理解或希望服务器接受的协议。当服务器接收到该请求后，会根据自身的支持情况，返回相应信息。</p>
<ul>
<li>有支持的协议，则子协议协商成功，触发客户端的onopen回调，应用可以查询WebSocket 对象上的protocol 属性，从而得知服务器选定的协议；</li>
<li>没有支持的协议，则协商失败，触发onerror 回调，连接断开。</li>
</ul>
<h4 id="WS与WSS"><a href="#WS与WSS" class="headerlink" title="WS与WSS"></a>WS与WSS</h4><p>WebSocket 资源URI采用了自定义模式：ws 表示纯文本通信（ 如ws://example.com/socket），wss 表示使用加密信道通信（TCP+TLS）。为什么不使用http而要自定义呢？</p>
<p>WebSocket 的主要目的，是在浏览器中的应用与服务器之间提供优化的、双向通信机制。可是，WebSocket 的连接协议也可以用于浏览器之外的场景，可以通过非HTTP协商机制交换数据。考虑到这一点，HyBi Working Group 就选择采用了自定义的URI模式：</p>
<ul>
<li>ws协议：普通请求，占用与http相同的80端口；</li>
<li>wss协议：基于SSL的安全传输，占用与tls相同的443端口。</li>
</ul>
<p>各自的URI如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ws-URI = <span class="string">"ws:"</span> <span class="string">"//"</span> host [ <span class="string">":"</span> port ] path [ <span class="string">"?"</span> query ]</div><div class="line">wss-URI = <span class="string">"wss:"</span> <span class="string">"//"</span> host [ <span class="string">":"</span> port ] path [ <span class="string">"?"</span> query ]</div></pre></td></tr></table></figure>
<p>很多现有的HTTP 中间设备可能不理解新的WebSocket 协议，而这可能导致各种问题：盲目的连接升级、意外缓冲WebSocket 帧、不明就里地修改内容、把WebSocket 流量误当作不完整的HTTP 通信，等等。这时WSS就提供了一种不错的解决方案，它建立一条端到端的安全通道，这个端到端的加密隧道对中间设备模糊了数据，因此中间设备就不能再感知到数据内容，也就无法再对请求做特殊处理。</p>
<h3 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h3><p>HyBi Working Group 制定的WebSocket 通信协议（RFC 6455）包含两个高层组件：开放性HTTP 握手用于协商连接参数，二进制消息分帧机制用于支持低开销的基于消息的文本和二进制数据传输。WebSocket 协议尝试在既有HTTP 基础设施中实现双向HTTP 通信，因此也使用HTTP 的80 和443 端口。不过，这个设计不限于通过HTTP 实现WebSocket 通信，未来的实现可以在某个专用端口上使用更简单的握手，而不必重新定义一个协议。WebSocket 协议是一个独立完善的协议，可以在浏览器之外实现。不过，它的主要应用目标还是实现浏览器应用的双向通信。</p>
<h4 id="数据成帧"><a href="#数据成帧" class="headerlink" title="数据成帧"></a>数据成帧</h4><p>WebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。具体的帧格式如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> 0                   1                   2                   3</div><div class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</div><div class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</div><div class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</div><div class="line">|N|V|V|V|       |S|             |   (if payload len==126/127)   |</div><div class="line">| |1|2|3|       |K|             |                               |</div><div class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</div><div class="line">|     Extended payload length continued, if payload len == 127  |</div><div class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</div><div class="line">|                               |Masking-key, if MASK set to 1  |</div><div class="line">+-------------------------------+-------------------------------+</div><div class="line">| Masking-key (continued)       |          Payload Data         |</div><div class="line">+-------------------------------- - - - - - - - - - - - - - - - +</div><div class="line">:                     Payload Data continued ...                :</div><div class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</div><div class="line">|                     Payload Data continued ...                |</div><div class="line">+---------------------------------------------------------------+</div></pre></td></tr></table></figure>
<ul>
<li>FIN： 1 bit 。表示此帧是否是消息的最后帧，第一帧也可能是最后帧。</li>
<li>RSV1，RSV2，RSV3： 各1 bit 。必须是0，除非协商了扩展定义了非0的意义。</li>
<li>opcode：4 bit。表示被传输帧的类型：x0 表示一个后续帧；x1 表示一个文本帧；x2 表示一个二进制帧；x3-7 为以后的非控制帧保留；x8 表示一个连接关闭；x9 表示一个ping；xA 表示一个pong；xB-F 为以后的控制帧保留。</li>
<li>Mask： 1 bit。表示净荷是否有掩码（只适用于客户端发送给服务器的消息）。</li>
<li>Payload length： 7 bit, 7 + 16 bit, 7 + 64 bit。 净荷长度由可变长度字段表示： 如果是 0~125，就是净荷长度；如果是 126，则接下来 2 字节表示的 16 位无符号整数才是这一帧的长度； 如果是 127，则接下来 8 字节表示的 64 位无符号整数才是这一帧的长度。</li>
<li>Masking-key：0或4 Byte。 用于给净荷加掩护，客户端到服务器标记。</li>
<li>Extension data： x Byte。默认为0 Byte，除非协商了扩展。</li>
<li>Application data： y Byte。 在”Extension data”之后，占据了帧的剩余部分。</li>
<li>Payload data： (x + y) Byte。”extension data” 后接 “application data”。</li>
</ul>
<blockquote>
<p>帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。<br>消息：一系列帧，与应用消息对等。</p>
</blockquote>
<p>是否把消息分帧由客户端和服务器实现决定，应用并不需要关注WebSocket帧和如何分帧，因为客户端（如浏览器）和服务端为完成该工作。那么客户端和服务端是按照什么规则进行分帧的呢？RFC 6455规定的分帧规则如下：</p>
<ol>
<li>一个未分帧的消息包含单个帧，FIN设置为1，opcode非0。</li>
<li>一个分帧了的消息包含：开始于：单个帧，FIN设为0，opcode非0；后接 ：0个或多个帧，FIN设为0，opcode设为0；终结于：单个帧，FIN设为1，opcode设为0。一个分帧了消息在概念上等价于一个未分帧的大消息，它的有效载荷长度等于所有帧的有效载荷长度的累加；然而，有扩展时，这可能不成立，因为扩展定义了出现的Extension data的解释。例如，Extension data可能只出现在第一帧，并用于后续的所有帧，或者Extension data出现于所有帧，且只应用于特定的那个帧。在缺少Extension data时，下面的示例示范了分帧如何工作。举例：如一个文本消息作为三个帧发送，第一帧的opcode是0x1，FIN是0，第二帧的opcode是0x0，FIN是0，第三帧的opcode是0x0，FIN是1。 　</li>
<li>控制帧可能被插入到分帧了消息中，控制帧必须不能被分帧。如果控制帧不能插入，例如，如果是在一个大消息后面，ping的延迟将会很长。因此要求处理消息帧中间的控制帧。</li>
<li>消息的帧必须以发送者发送的顺序传递给接受者。</li>
<li>一个消息的帧必须不能交叉在其他帧的消息中，除非有扩展能够解释交叉。</li>
<li>一个终端必须能够处理消息帧中间的控制帧。</li>
<li>一个发送者可能对任意大小的非控制消息分帧。</li>
<li>客户端和服务器必须支持接收分帧和未分帧的消息。</li>
<li>由于控制帧不能分帧，中间设施必须不尝试改变控制帧。</li>
<li>中间设施必须不修改消息的帧，如果保留位的值已经被使用，且中间设施不明白这些值的含义。</li>
</ol>
<p>在遵循了上述分帧规则之后，一个消息的所有帧属于同样的类型，由第一个帧的opcdoe指定。由于控制帧不能分帧，消息的所有帧的类型要么是文本、二进制数据或保留的操作码中的一个。</p>
<p>虽然客户端和服务端都遵循同样的分帧规则，但也是有些差异的。在客户端往服务端发送数据时，为防止客户端中运行的恶意脚本对不支持WebSocket 的中间设备进行缓存投毒攻击（cache poisoning attack），发送帧的净荷都要使用帧首部中指定的值加掩码。被标记的帧必须设置MASK域为1，Masking-key必须完整包含在帧里，它用于标记Payload data。Masking-key是由客户端随机选择的32位值，标记键应该是不可预测的，给定帧的Masking-key必须不能简单到服务器或代理可以预测Masking-key是用于一序列帧的，不可预测的Masking-key是阻止恶意应用的作者从wire上获取数据的关键。由于客户端发送到服务端的信息需要进行掩码处理，所以客户端发送数据的分帧开销要大于服务端发送数据的开销，服务端的分帧开销是2~10 Byte，客户端是则是6~14 Byte。</p>
<h5 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h5><p>控制帧由操作码标识，操作码的最高位是1。当前为控制帧定义的操作码有0x8（关闭）、0x9（Ping）和0xA（Pong），操作码0xB-0xF是保留的，未定义。控制帧用来交流WebSocket的状态，能够插入到消息的多个帧的中间。所有的控制帧必须有一个小于等于125字节的有效载荷长度，必须不能被分帧。</p>
<ul>
<li>关闭：操作码为0x8。关闭帧可能包含一个主体（帧的应用数据部分）指明关闭的原因，如终端关闭，终端接收到的帧太大，或终端接收到的帧不符合终端的预期格式。从客户端发送到服务器的关闭帧必须标记，在发送关闭帧后，应用程序必须不再发送任何数据。如果终端接收到一个关闭帧，且先前没有发送关闭帧，终端必须发送一个关闭帧作为响应。终端可能延迟发送关闭帧，直到它的当前消息发送完成。在发送和接收到关闭消息后，终端认为WebSocket连接已关闭，必须关闭底层的TCP连接。服务器必须立即关闭底层的TCP连接；客户端应该等待服务器关闭连接，但并非必须等到接收关闭消息后才关闭，如果它在合理的时间间隔内没有收到反馈，也可以将TCP关闭。如果客户端和服务器同时发送关闭消息，两端都已发送和接收到关闭消息，应该认为WebSocket连接已关闭，并关闭底层TCP连接。</li>
<li>Ping：操作码为0x9。一个Ping帧可能包含应用程序数据。当接收到Ping帧，终端必须发送一个Pong帧响应，除非它已经接收到一个关闭帧。它应该尽快返回Pong帧作为响应。终端可能在连接建立后、关闭前的任意时间内发送Ping帧。注意：Ping帧可作为keepalive或作为验证远程终端是否可响应的手段。</li>
<li>Pong：操作码为0xA。Pong 帧必须包含与被响应Ping帧的应用程序数据完全相同的数据。如果终端接收到一个Ping 帧，且还没有对之前的Ping帧发送Pong 响应，终端可能选择发送一个Pong 帧给最近处理的Ping帧。一个Pong 帧可能被主动发送，这作为单向心跳。对主动发送的Pong 帧的响应是不希望的。</li>
</ul>
<h5 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h5><p>数据帧携带需要发送的目标数据，由操作码标识，操作码的最高位是0。当前为数据帧定义的（文本），0x2（二进制），操作码0x3-0x7为以后的非控制帧保留，未定义。</p>
<p>操作码决定了数据的解释：</p>
<ul>
<li>文本：操作码为0x1。有效载荷数据是UTF-8编码的文本数据。特定的文本帧可能包含部分的UTF-8 序列，然而，整个消息必须包含有效的UTF-8，当终端以UTF-8解释字节流时发现字节流不是一个合法的UTF-8流，那么终端将关闭连接。</li>
<li>二进制：操作码为0x2。有效载荷数据是任意的二进制数据，它的解释由应用程序层唯一决定。</li>
</ul>
<h4 id="协议扩展"><a href="#协议扩展" class="headerlink" title="协议扩展"></a>协议扩展</h4><p>从上述的数据分帧格式可以知道，有很多扩展位预留，WebSocket 规范允许对协议进行扩展，可以使用这些预留位在基本的WebSocket 分帧层之上实现更多的功能。</p>
<p>下面是负责制定WebSocket 规范的HyBi Working Group进行的两项扩展：</p>
<ul>
<li><p>多路复用扩展（A Multiplexing Extension for WebSockets）：这个扩展可以将WebSocket 的逻辑连接独立出来，实现共享底层的TCP 连接。每个WebSocket 连接都需要一个专门的TCP 连接，这样效率很低。多路复用扩展解决了这个问题。它使用“信道ID”扩展每个WebSocket 帧，从而实现多个虚拟的WebSocket 信道共享一个TCP 连接。</p>
</li>
<li><p>压缩扩展（Compression Extensions for WebSocket）：给WebSocket 协议增加了压缩功能。基本的WebSocket 规范没有压缩数据的机制或建议，每个帧中的净荷就是应用提供的净荷。虽然这对优化的二进制数据结构不是问题，但除非应用实现自己的压缩和解压缩逻辑，否则很多情况下都会造成传输载荷过大的问题。实际上，压缩扩展就相当于HTTP 的传输编码协商。</p>
</li>
</ul>
<p>要使用扩展，客户端必须在第一次的Upgrade 握手中通知服务器，服务器必须选择并确认要在商定连接中使用的扩展。下面就是对升级协商的介绍。</p>
<h4 id="升级协商"><a href="#升级协商" class="headerlink" title="升级协商"></a>升级协商</h4><p>从上面的介绍可知，WebSocket具有很大的灵活性，提供了很多强大的特性：基于消息的通信、自定义的二进制分帧层、子协议协商、可选的协议扩展等等。上面也讲到，客户端和服务端需先通过HTTP方式协商适当的参数后才可建立连接，完成协商之后，所有信息的发送和接收不再和HTTP相关，全由WebSocket自身的机制处理。当然，完成最初的连接参数协商并非必须使用HTTP协议，它只是一种实现方案，可以有其他选择。但使用HTTP协议完成最初的协商，有以下好处：让WebSockets 与现有HTTP 基础设施兼容：WebSocket 服务器可以运行在80 和443 端口上，这通常是对客户端唯一开放的端口；可以重用并扩展HTTP 的Upgrade 流，为其添加自定义的WebSocket 首部，以完成协商。</p>
<p>在协商过程中，用到的一些头域如下：</p>
<ul>
<li>Sec-WebSocket-Version：客户端发送，表示它想使用的WebSocket 协议版本（13表示RFC 6455）。如果服务器不支持这个版本，必须回应自己支持的版本。</li>
<li>Sec-WebSocket-Key：客户端发送，自动生成的一个键，作为一个对服务器的“挑战”，以验证服务器支持请求的协议版本；</li>
<li>Sec-WebSocket-Accept：服务器响应，包含Sec-WebSocket-Key 的签名值，证明它支持请求的协议版本；</li>
<li>Sec-WebSocket-Protocol：用于协商应用子协议：客户端发送支持的协议列表，服务器必须只回应一个协议名；</li>
<li>Sec-WebSocket-Extensions：用于协商本次连接要使用的WebSocket 扩展：客户端发送支持的扩展，服务器通过返回相同的首部确认自己支持一或多个扩展。</li>
</ul>
<p>在进行HTTP Upgrade之前，客户端会根据给定的URI、子协议、扩展和在浏览器情况下的origin，先打开一个TCP连接，随后再发起升级协商。升级协商具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">GET /socket HTTP/<span class="number">1.1</span> </div><div class="line"><span class="comment">// 请求的方法必须是GET，HTTP版本必须至少是1.1</span></div><div class="line"></div><div class="line">Host: thirdparty.comOrigin: http:<span class="comment">//example.com</span></div><div class="line"></div><div class="line">Connection: Upgrade </div><div class="line">Upgrade: websocket </div><div class="line"><span class="comment">// 请求升级到WebSocket 协议</span></div><div class="line"></div><div class="line">Sec-WebSocket-Version: <span class="number">13</span> </div><div class="line"><span class="comment">// 客户端使用的WebSocket 协议版本</span></div><div class="line"></div><div class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== </div><div class="line"><span class="comment">// 自动生成的键，以验证服务器对协议的支持，其值必须是nonce组成的随机选择的16字节的被base64编码后的值</span></div><div class="line"></div><div class="line">Sec-WebSocket-Protocol: appProtocol, appProtocol-v2 </div><div class="line"><span class="comment">// 可选的应用指定的子协议列表</span></div><div class="line"></div><div class="line">Sec-WebSocket-Extensions: x-webkit-deflate-message, x-custom-extension </div><div class="line"><span class="comment">// 可选的客户端支持的协议扩展列表，指示了客户端希望使用的协议级别的扩展</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在安全工程中，Nonce是一个在加密通信只能使用一次的数字。在认证协议中，它往往是一个随机或伪随机数，以避免重放攻击。Nonce也用于流密码以确保安全。如果需要使用相同的密钥加密一个以上的消息，就需要Nonce来确保不同的消息与该密钥加密的密钥流不同。</p>
</blockquote>
<p>与浏览器中客户端发起的任何连接一样，WebSocket 请求也必须遵守同源策略：浏览器会自动在升级握手请求中追加Origin 首部，远程服务器可能使用CORS 判断接受或拒绝跨源请求。要完成握手，服务器必须返回一个成功的“Switching Protocols”（切换协议）响应，具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols </div><div class="line"><span class="comment">// 101 响应码确认升级到WebSocket 协议</span></div><div class="line"></div><div class="line">Upgrade: websocket</div><div class="line">Connection: UpgradeAccess-Control-Allow-Origin: http:<span class="comment">//example.com </span></div><div class="line"><span class="comment">// CORS 首部表示选择同意跨源连接</span></div><div class="line"></div><div class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= </div><div class="line"><span class="comment">// 签名的键值验证协议支持</span></div><div class="line"></div><div class="line">Sec-WebSocket-Protocol: appProtocol-v2 </div><div class="line"><span class="comment">// 服务器选择的应用子协议</span></div><div class="line"></div><div class="line">Sec-WebSocket-Extensions: x-custom-extension </div><div class="line"><span class="comment">// 服务器选择的WebSocket 扩展</span></div></pre></td></tr></table></figure>
<blockquote>
<p>所有兼容RFC 6455 的WebSocket 服务器都使用相同的算法计算客户端挑战的答案：将Sec-WebSocket-Key 的内容与标准定义的唯一GUID 字符串拼接起来，计算出SHA1 散列值，结果是一个base-64 编码的字符串，把这个字符串发给客户端即可。Sec-WebSocket-Accept 这个头域的 ABNF [RFC2616]定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sec-WebSocket-Accept = base64-value-non-empty</div><div class="line">base64-value-non-empty = (1*base64-data [ base64-padding ]) |</div><div class="line">base64-padding</div><div class="line">base64-data = 4base64-character</div><div class="line">base64-padding = (2base64-character &quot;==&quot;) | </div><div class="line">(3base64-character &quot;=&quot;)</div><div class="line">base64-character = ALPHA | DIGIT | &quot;+&quot; | &quot;/&quot;</div></pre></td></tr></table></figure></p>
<p>如果客户端发送的key值为：”dGhlIHNhbXBsZSBub25jZQ==”，服务端将把”258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 这个唯一的GUID与它拼接起来，就是”dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CAC5AB0DC85B11”，然后对其进行SHA-1哈希，结果为”0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea”，再进行base64-encoded即可得”s3pPLMBiTxaQ9kYGzzhZRbK+xOo=”。</p>
</blockquote>
<p>成功的WebSocket 握手必须是客户端发送协议版本和自动生成的挑战值，服务器返回101 HTTP 响应码（Switching Protocols）和散列形式的挑战答案，确认选择的协议版本。</p>
<p>一旦客户端打开握手发送出去，在发送任何数据之前，客户端必须等待服务器的响应。客户端必须按如下步骤验证响应：</p>
<ol>
<li>如果从服务器接收到的状态码不是101，按HTTP【RFC2616】程序处理响应。在特殊情况下，如果客户端接收到401状态码，可能执行认证；服务器可能用3xx状态码重定向客户端（但不要求客户端遵循他们）。否则按下面处理。</li>
<li>如果响应缺失Upgrade头域或Upgrade头域的值没有包含大小写不敏感的ASCII 值”websocket”，客户端必须使WebSocket连接失败。</li>
<li>如果响应缺失Connection头域或其值不包含大小写不敏感的ASCII值”Upgrade”，客户端必须使WebSocket连接失败。</li>
<li>如果响应缺失Sec-WebSocket-Accept头域或其值不包含 [Sec-WebSocket-Key] （作为字符串，非base64解码的）+ “258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 的base64编码 SHA-1值，客户端必须使WebSocket连接失败。</li>
<li>如果响应包含Sec-WebSocket-Extensions头域，且其值指示使用的扩展不出现在客户端发送的握手（服务器指示的扩展不是客户端要求的），客户端必须使WebSocket连接失败。</li>
<li>如果响应包含Sec-WebSocket-Protocol头域，且这个头域指示使用的子协议不包含在客户端的握手（服务器指示的子协议不是客户端要求的），客户端必须使WebSocket连接失败。</li>
</ol>
<p>如果客户端完成了对服务端响应的升级协商验证，该连接就可以用作双向通信信道交换WebSocket 消息。从此以后，客户端与服务器之间不会再发生HTTP 通信，一切由WebSocket 协议接管。</p>
<h3 id="使用场景及性能"><a href="#使用场景及性能" class="headerlink" title="使用场景及性能"></a>使用场景及性能</h3><p>Websocket协议具有极简的API，开发者可以很简便的调用，而且提供了二进制分帧、可扩展性以及子协议协商等强大特性，使得WebSocket 成为在浏览器中采用自定义应用协议的最佳选择。但，在计算机世界里，任何技术和理论一般都是为解决特定问题而生的，并不是普世化的解决方案，WebSocket亦是如此。WebSocket 不能取代XHR 或SSE，何时以及如何使用，毋庸置疑会对性能产生巨大影响，要获得最佳性能，我们必须善于利用它的长处！下面将对现有的一些协议与WebSocket 对比进行一个大致介绍。</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1134915854/TB21QdsgKJ8puFjy1XbXXagqVXa_!!1134915854.png" alt=""></p>
<h4 id="请求和响应流"><a href="#请求和响应流" class="headerlink" title="请求和响应流"></a>请求和响应流</h4><p>XHR 是专门为“事务型”请求/ 响应通信而优化的：客户端向服务器发送完整的、格式良好的HTTP 请求，服务器返回完整的响应。这里不支持请求流，在Streams API 可用之前，没有可靠的跨浏览器响应流API。 SSE 可以实现服务器到客户端的高效、低延迟的文本数据流：客户端发起 SSE 连接，服务器使用事件源协议将更新流式发送给客户端。客户端在初次握手后，不能向服务器发送任何数据。 WebSocket 是唯一一个能通过同一个TCP 连接实现双向通信的机制，客户端和服务器随时可以交换数据。因此，WebSocket 在两个方向上都能保证文本和二进制应用数据的低延迟交付。</p>
<p>客户端到服务端传递消息的总时延由以下四个部分构成：</p>
<ul>
<li>传播延迟：消息从发送端到接收端需要的时间，是信号传播距离和速度的函数，传播时间取决于距离和信号通过的媒介，播速度通常不超过光速；</li>
<li>传输延迟：把消息中的所有比特转移到链路中需要的时间，是消息长度和链路速率的函数，由传输链路的速率决</li>
<li>定，与客户端到服务器的距离无关；</li>
<li>处理延迟：处理分组首部、检查位错误及确定分组目标所需的时间，常由硬件完成，因此相应的延迟一般非常短；</li>
<li>排队延迟：如果分组到达的速度超过了路由器的处理能力，那么分组就要在入站缓冲区排队，到来的分组排队等待处理的时间就是排队延迟。</li>
</ul>
<p>无论是什么样的传输机制，都不会减少客户端与服务器间的往返次数，数据包的传播延迟都一样。但，采用不同的传输机制可以有不同的排队延迟。对XHR 轮询而言，排队延迟就是客户端轮询间隔：服务器上的消息可用之后，必须等到下一次客户端XHR 请求才能发送。相对来说，SSE 和WebSocket 使用持久连接，这样服务器（和客户端——如果是WebSocket）就可以在消息可用时立即发送它，消除了消息的排队延迟，也就使得总的传输延迟更小。</p>
<h4 id="消息开销"><a href="#消息开销" class="headerlink" title="消息开销"></a>消息开销</h4><p>在完成最初的升级协商之后，客户端和服务器即可通过WebSocket 协议双向交换数据，消息分帧之后每帧会添加2~14 字节的开销；SSE 会给每个 消息添加 5 字节，但仅限于 UTF-8 内容(SSE 不是为传输二进制载荷而设计的！如果有必要，可以把二进制对象编码为base64 形式，然后再使用SSE)； HTTP 1.x 请求(XHR 及其他常规请求)会携带 500~800 字节的 HTTP 元数据，加上cookie； HTTP 2.0 压缩 HTTP 元数据，可以显著减少开销，如果请求都不修改首部，那么开销可以低至8 字节。WebSocket专门为双向通信而设计，开销很小，在实时通知应用开发中是不错的选择。</p>
<blockquote>
<p>上述开销不包括IP、TCP 和TLS 分帧的开销，后者一共会给每个消息增加60~100 字节，无论使用的是什么应用协议。</p>
</blockquote>
<h4 id="效率及压缩"><a href="#效率及压缩" class="headerlink" title="效率及压缩"></a>效率及压缩</h4><p>在使用HTTP协议传输数据时，每个请求都可以协商最优的传输编码格式（如对文本数据采用gzip 压缩）；SSE 只能传输UTF-8 格式数据，事件流数据可以在整个会话期间使用gzip 压缩；WebSocket 可以传输文本和二进制数据，压缩整个会话行不通，二进制的净荷也可能已经压缩过了！</p>
<p>鉴于WebSocket的特殊性，它需要实现自己的压缩机制，并针对每个消息选择应用。HyBi 工作组正在为WebSocket 协议制定以消息为单位的压缩扩展，但这个扩展尚未得到任何浏览器支持。目前来说，除非应用通过细致优化自己的二进制净荷实现自己的压缩逻辑，同时也针对文本消息实现自己的压缩逻辑，否则传输数据过程中一定会产生很大的字节开销！</p>
<h4 id="自定义应用协议"><a href="#自定义应用协议" class="headerlink" title="自定义应用协议"></a>自定义应用协议</h4><p>HTTP已经诞生了数十年，具有广泛的应用，各种优化专门的优化机制也已经被浏览器及服务器等设备实施，XHR 请求自然而然就继承了所有这些功能。然而，对于只使用HTTP协议完成升级协商的WebSocket来说，流式数据处理可以让我们在客户端和服务器间自定义协议，但也会错过浏览器提供的很多服务，应用可能必须实现自已的逻辑来填充某些功能空白，比如缓存、状态管理、元数据交付等等。</p>
<h4 id="部署WebSocket"><a href="#部署WebSocket" class="headerlink" title="部署WebSocket"></a>部署WebSocket</h4><p>HTTP 是专为短时突发性传输设计的，很多服务器、代理和其他中间设备的HTTP 连接空闲超时设置都很激进。这就与WebSocket的长时连接、实时双向通信相悖，部署时需要关注下面的三个方面：</p>
<ul>
<li>位于各自网络中的路由器、负载均衡器和代理；</li>
<li>外部网络中透明、确定的代理服务器（如 ISP 和运营商的代理）；</li>
<li>客户网络中的路由器、防火墙和代理。</li>
</ul>
<p>鉴于用户所处的网络环境是各不相同的，不受开发者所控制。某些网络甚至会完全屏蔽WebSocket通信，有些设备也不支持WebSocket协议，这时就需要采用备用机制，使用其他技术来实现类似与WebSocket的通信(如socket.io等)。虽然，我们无法处理网络中的中间设备，但对于处在我们自己掌控下的基础设施还是可以做一些工作的，可以对通信路径上的每一台负载均衡器、路由器和Web 服务器针对长时连接进行调优。然而，长时连接和空闲会话会占用所有中间设备及服务器的内存和套接字资源，开销很大，部署WebSocket、SSE及HTTP 2.0等赖于长时会话的协议都会对运维提出新的挑战。在使用WebSocket的过程中，也需要做到优化二进制净荷和压缩 UTF-8 内容以最小化传输数据、监控客户端缓冲数据的量、切分应用消息避免队首阻塞、合用的情况下利用其他传输机制等。</p>
<p>###总结</p>
<p>WebSocket 协议为实时双向通信而设计，提供高效、灵活的文本和二进制数据传输，同时也错过了浏览器为HTTP提供的一些服务，在使用时需要应用自己实现。在进行应用数据传输时，需要根据不同的场景选择恰当的协议，WebSocket 并不能取代HTTP、XHR 或SSE，关键还是要利用这些机制的长处以求得最佳性能。</p>
<p>Socket.IO</p>
<p>鉴于现在不同的平台及浏览器版本对WebSocket支持的不同，有开发者做了一个叫做socket.io 的为实时应用提供跨平台实时通信的库，我们可以使用它完成向WebSocket的切换。socket.io 旨在使实时应用在每个浏览器和移动设备上成为可能，模糊不同的传输机制之间的差异。socket.io 的名字源于它使用了浏览器支持并采用的 HTML5 WebSocket 标准，因为并不是所有的浏览器都支持 WebSocket ，所以该库支持一系列降级功能：</p>
<ul>
<li>Websocket</li>
<li>Adobe:registered: Flash:registered: Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
<p>在大部分情境下，你都能通过这些功能选择与浏览器保持类似长连接的功能。具体细节请看<a href="http://socket.io/docs/。" target="_blank" rel="external">http://socket.io/docs/。</a></p>
<p>参考资料</p>
<p><a href="http://chimera.labs.oreilly.com/books/1230000000545/ch17.html" target="_blank" rel="external">WEB性能权威指南-WebSocket</a><br><a href="https://tools.ietf.org/html/rfc6455#page-14" target="_blank" rel="external">RFC6455</a><br><a href="http://www.fzb.me/2015-3-24-websocket-protocol-abstract.html" target="_blank" rel="external">Websocket摘要</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="external">MDN-Websocket API</a><br><a href="http://www.ietf.org/rfc/rfc5234.txt" target="_blank" rel="external">ABNF语法规范</a><br><a href="https://www.qcloud.com/community/article/111" target="_blank" rel="external">HTTP1.1 学习笔记</a><br><a href="https://www.qcloud.com/community/article/82" target="_blank" rel="external">HTTP 2.0 简明笔记</a></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="WebSocket-数据类型"><a href="#WebSocket-数据类型" class="headerlink" title="WebSocket 数据类型"></a>WebSocket 数据类型</h3><ul>
<li>Blob</li>
<li>ArrayBuffer</li>
</ul>
<p>如果传输的是文件数据建议使用<code>Blob</code>类型<br>如果传输的数据需要进行字节操作建议使用<code>ArrayBuffer</code>类型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近应用中正好使用到&lt;code&gt;WebSocket&lt;/code&gt;, &lt;code&gt;腾讯Bugly&lt;/code&gt;就发表了这篇文章, 虽然也不是非常全面但是把&lt;code&gt;WebSocket&lt;/code&gt;的基本概念和使用都说到了, 还是相当受用, 故转载过来.&lt;br&gt;随后我会把把一些我遇到的转载文章中没有提及的问题补充到本文末尾. &lt;a href=&quot;http://t.cn/RiCKZ0R&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址-&amp;gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://huyaohui.com/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://huyaohui.com/tags/HTML5/"/>
    
      <category term="WebSocket" scheme="http://huyaohui.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator hot update</title>
    <link href="http://huyaohui.com/2017/02/25/Cocos-Creator-hot-update/"/>
    <id>http://huyaohui.com/2017/02/25/Cocos-Creator-hot-update/</id>
    <published>2017-02-25T08:05:35.000Z</published>
    <updated>2017-02-25T09:07:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为官方文档中有一些说的不是很明白的地方, 所以特写这篇文章对官方的热更新方案作一个补充.<br>同时也避免自己以后再次掉到坑里去.</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本篇文档基于 Cocos Creator v0.8 完成</strong></p>
<p>之所以这篇文档的标题为教程，是因为目前 Cocos Creator 资源热更新的工作流还没有彻底集成到编辑器中，不过引擎本身对于热更新的支持是完备的，所以借助一些外围脚本和一些额外的工作就可以达成。</p>
<p>本篇文档的范例工程可以从 <a href="https://github.com/cocos-creator/tutorial-hot-update" target="_blank" rel="external">Github 仓库</a>获取。</p>
<h2 id="使用场景和设计思路"><a href="#使用场景和设计思路" class="headerlink" title="使用场景和设计思路"></a>使用场景和设计思路</h2><p>资源热更新的使用场景相信游戏开发者都非常熟悉，对于已发布的游戏，在游戏内通过从服务器动态下载新的游戏内容，来时刻保持玩家对游戏的新鲜感，是保持一款游戏长盛不衰非常重要的手段。当然热更新还有一些其他的用途，不过在此不再深入讨论，我们下面将主要讨论 Cocos Creator 对热更新支持的原理和手段。</p>
<p>Cocos Creator 中的热更新主要源于 Cocos 引擎中的 AssetsManager 模块对热更新的支持。它有个非常重要的特点：</p>
<p><strong>服务端和本地均保存完整版本的游戏资源</strong>，热更新过程中通过比较服务端和本地版本的差异来决定更新哪些内容。这样即可天然支持跨版本更新，比如本地版本为 A，远程版本是 C，则直接更新 A 和 C 之间的差异，并不需要生成 A 到 B 和 B 到 C 的更新包，依次更新。所以，在这种设计思路下，新版本的文件以离散的方式保存在服务端，更新时以文件为单位下载。</p>
<p>除此之外，由于 WEB 版本可以通过服务器直接进行版本更新，所以资源热更新只适用于原生发布版本。AssetsManager 类也只在 jsb 命名空间下，在使用的时候需要注意判断运行环境。</p>
<h2 id="Manifest-文件"><a href="#Manifest-文件" class="headerlink" title="Manifest 文件"></a>Manifest 文件</h2><p>对于不同版本的文件级差异，AssetsManager 中使用 Manifest 文件来进行版本比对。本地和远端的 Manifest 文件分别标示了本地和远端的当前版本包含的文件列表和文件版本，这样就可以通过比对每个文件的版本来确定需要更新的文件列表。</p>
<p>Manifest 文件中包含以下几个重要信息：</p>
<ol>
<li>远程资源包的根路径</li>
<li>远程 Manifest 文件地址</li>
<li>远程 Version 文件地址（非必需）</li>
<li>主版本号</li>
<li>文件列表：以文件路径来索引，包含文件版本信息，一般推荐用文件的 md5 校验码来作为版本号</li>
<li>搜索路径列表</li>
</ol>
<p>其中 Version 文件内容是 Manifest 文件内容的一部分，不包含文件列表。由于 Manifest 文件可能比较大，每次检查更新的时候都完整下载的话可能影响体验，所以开发者可以额外提供一个非常小的 Version 文件。AssetsManager 会首先检查 Version 文件提供的主版本号来判断是否需要继续下载 Manifest 文件并更新。</p>
<h2 id="在-Cocos-Creator-项目中支持热更新"><a href="#在-Cocos-Creator-项目中支持热更新" class="headerlink" title="在 Cocos Creator 项目中支持热更新"></a>在 Cocos Creator 项目中支持热更新</h2><p>在这篇教程中，将提出一种针对 Cocos Creator 项目可行的热更新方案，不过我们将在 Cocos2d-x 的未来版本中开放 Downloader 的 JavaScript 接口，届时用户可以自由开发自己的热更新方案。</p>
<p>在开始详细讲解之前，开发者可以看一下 Cocos Creator 发布原生版本后的目录结构，这个目录结构和 Cocos2d-x JS 项目的目录是完全一致的。以前没有接触过 Cocos2d-x 的用户可以参考<a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/cocos2d-js/4-essential-concepts/4-1-cocos2d-js-project/zh.md" target="_blank" rel="external">项目结构文档</a>。对于 Cocos Creator 来说，所有 JS 脚本将会打包到 src 目录中，其他 Assets 资源将会被导出到 res 目录。</p>
<blockquote>
<p>Ps: 这里的 src 和 res 目录指的是在默认构建的情况下 build/jsb-default 目录下的 src 和 res 目录</p>
</blockquote>
<p>基于这样的项目结构，本篇教程中的热更新思路很简单：</p>
<ol>
<li>基于原生打包目录中的 res 和 src 目录生成本地 Manifest 文件。</li>
<li>创建一个热更新组件来负责热更新逻辑。</li>
<li>游戏发布后，若需要更新版本，则生成一套远程版本资源，包含 res 目录、src 目录和 Manifest 文件，将远程版本部署到服务端。</li>
<li>当热更新组件检测到服务端 Manifest 版本不一致时，就会开始热更新</li>
</ol>
<p>教程所使用的范例工程是基于 21 点范例修改而来的，为了展示热更新的过程，将工程中的 table 场景（牌桌场景）删除，设为 1.0.0 版本。并在 <code>remote-assets</code> 目录中保存带有 table 场景的完整版本，设为 1.1.0 版本。游戏开始时会检查远程是否有版本更新，如果发现远程版本则提示用户更新，更新完成后，用户重新进入游戏即可进入牌桌场景。</p>
<p><strong>注意</strong>，项目中包含的 <code>remove-assets</code> 为 debug 模式，开发者在测试的时候必须使用 debug 模式构建项目才有效，否则 release 模式的 jsc 文件优先级会高于 <code>remove-assets</code> 中的资源而导致脚本失效。</p>
<h3 id="使用-Version-Generator-来生成-Manifest-文件"><a href="#使用-Version-Generator-来生成-Manifest-文件" class="headerlink" title="使用 Version Generator 来生成 Manifest 文件"></a>使用 Version Generator 来生成 Manifest 文件</h3><p>在范例工程中，我们提供了一个 <a href="https://github.com/cocos-creator/tutorial-hot-update/blob/master/version_generator.js" target="_blank" rel="external">version_generator.js 文件</a>，这是一个用于生成 Manfiest 文件的 NodeJS 脚本。使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; node version_generator.js -v 1.0.0 -u http://your-server-address/tutorial-hot-update/remote-assets/ -s native/package/ -d assets/</div></pre></td></tr></table></figure>
<p>下面是参数说明：</p>
<ul>
<li><code>-v</code> 指定 Manifest 文件的主版本号。</li>
<li><code>-u</code> 指定服务器远程包的地址，这个地址需要和最初发布版本中 Manifest 文件的远程包地址一致，否则无法检测到更新。</li>
<li><code>-s</code> 本地原生打包版本的目录相对路径。</li>
<li><code>-d</code> 保存 Manifest 文件的地址。</li>
</ul>
<blockquote>
<p>Ps:<br>-s 默认情况下是: build/jsb-default/ 目录</p>
<p>构建过程:</p>
<ol>
<li>先构建点击构建项目</li>
<li>替换命令参数并执行命令</li>
</ol>
<p>需要注意的是, 以上操作最好在你项目准备上线是, 重新执行一次, 原因是需要更新manifest文件, 如果不更新, 虽然不会出现什么问题, 但是当你下次热更新时, 会把不需要热更新的文件也更新下来, 导致不必要的开销</p>
</blockquote>
<h3 id="热更新组件"><a href="#热更新组件" class="headerlink" title="热更新组件"></a>热更新组件</h3><p>在范例工程中，热更新组件的实现位于 <a href="https://github.com/cocos-creator/tutorial-hot-update/blob/master/assets/scripts/module/HotUpdate.js" target="_blank" rel="external"><code>assets/scripts/module/HotUpdate.js</code></a> 中，开发者可以参考这种实现，也可以自由得按自己的需求修改。</p>
<p>除此之外，范例工程中还搭配了一个 <code>Canvas/update</code> 节点用于提示更新和显示更新进度供参考。</p>
<h3 id="部署远程服务器"><a href="#部署远程服务器" class="headerlink" title="部署远程服务器"></a>部署远程服务器</h3><p>为了让游戏可以检测到远程版本，可以在本机上模拟一个远程服务器，搭建服务器的方案多种多样（比如 Python <a href="https://docs.python.org/2/library/simplehttpserver.html" target="_blank" rel="external">SimpleHTTPServer</a>），这里不做讨论，开发者可以使用自己习惯的方式。搭建成功后，访问远程包和 Manifest 文件的地址与范例工程中不同，所以需要修改以下几个地方来让游戏可以成功找到远程包：</p>
<ol>
<li><code>assets/project.manifest</code>：游戏的本地 Manifest 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
<li><code>remote-assets/project.manifest</code>：远程包的 Manifest 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
<li><code>remote-assets/version.manifest</code>：远程包的 Version 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
</ol>
<blockquote>
<p>Ps: 服务器随便用什么都行, 只要能对外访问就好</p>
</blockquote>
<h3 id="打包原生版本"><a href="#打包原生版本" class="headerlink" title="打包原生版本"></a>打包原生版本</h3><p>下载完成范例工程后，可以用 Cocos Creator 直接打开这个工程。打开<code>构建发布</code>面板，构建原生版本，建议使用 Windows / Mac 来测试。</p>
<p>构建成功原生版本之后，打开原生发布包的地址，给 <code>main.js</code> 附加上搜索路径设置的逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 main.js 的开头添加如下代码</span></div><div class="line"><span class="keyword">if</span> (cc.sys.isNative) &#123;</div><div class="line">    <span class="keyword">var</span> hotUpdateSearchPaths = cc.sys.localStorage.getItem(<span class="string">'HotUpdateSearchPaths'</span>);</div><div class="line">    <span class="keyword">if</span> (hotUpdateSearchPaths) &#123;</div><div class="line">        jsb.fileUtils.setSearchPaths(<span class="built_in">JSON</span>.parse(hotUpdateSearchPaths));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者直接使用项目仓库根目录下的 <code>main.js</code> 覆盖原生打包文件夹内的 <code>main.js</code>。注意，每次使用 Cocos Creator 构建后，都需要重新修改 <code>main.js</code>。</p>
<p>这一步是必须要做的原因是，热更新的本质是用远程下载的文件取代原始游戏包中的文件。Cocos2d-x 的搜索路径恰好满足这个需求，它可以用来指定远程包的下载地址作为默认的搜索路径，这样游戏运行过程中就会使用下载好的远程版本。另外，这里搜索路径是在上一次更新的过程中使用 <code>cc.sys.localStorage</code>（它符合 WEB 标准的 <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" target="_blank" rel="external">Local Storage API</a>）固化保存在用户机器上，<code>HotUpdateSearchPaths</code> 这个键值是在 <code>HotUpdate.js</code> 中指定的，保存和读取过程使用的名字必须匹配。</p>
<p>此外，打开工程过程中如果遇到这个警告可以忽略：<code>loader for [.manifest] not exists!</code>。</p>
<blockquote>
<p>Ps: 这里已经有热更新插件可以解决了, 不需要手动修改, 可无视这段</p>
</blockquote>
<h3 id="运行范例工程"><a href="#运行范例工程" class="headerlink" title="运行范例工程"></a>运行范例工程</h3><p>如果一切正常，此时运行原生版本的范例工程，就会发现检测到新版本，提示更新，更新之后会自动重启游戏，此时可进入 table 场景。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上介绍的是目前一种可能的热更新方案，Cocos Creator 在未来版本中提供更成熟的热更新方案，直接集成到编辑器中。当然，也会提供底层 Downloader API 来允许用户自由实现自己的热更新方案，并通过插件机制在编辑器中搭建完整可视化的工作流。这篇教程和范例工程提供给大家参考，并不是官方方案，也鼓励开发者针对自己的工作流进行定制。如果有问题和交流也欢迎反馈到<a href="http://www.cocoachina.com/bbs/thread.php?fid-71.html" target="_blank" rel="external">论坛</a>中。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/html5/v3/assets-manager/zh.md" target="_blank" rel="external">资源管理器 Assets Manager 文档</a></li>
</ol>
<blockquote>
<p>Ps: 我非要吐槽一下这个文档链接不看, Cocos官方文档中很多像这样的链接都是打不开的, 要么就是打开后没东西, 囧..</p>
</blockquote>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><blockquote>
<ol>
<li>除首次发布项目需要吧<code>project.manifest</code> <code>-d</code> 参数设置为 <code>assets/</code>, 之后的热更新, 都不需要再设置这个参数了, 默认会生成到<code>remote-assets</code>目录下, 原因是当你修改了重新构建后他仍然会被热更新到客户端, 但是这个文件实际上不会再被用到</li>
<li>执行完<code>node</code>命令后需要把<code>build/jsb-default</code>目录下的<code>src</code>和<code>res</code>目录拷贝出来, 连同生成的<code>project.manifest</code>和<code>version.manifest</code>文件一起放到web服务器下</li>
</ol>
</blockquote>
<h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><blockquote>
<ol>
<li>当重复点击检查更新是, 会出现无法检查的问题, 但是第一次是没有问题的</li>
<li>在<code>XCode</code>上调试时,  如果你重新编译, 会变成没有热更新的状态, 但是你点击更新有会提示已经是最新版本了<br> 这个问题, 不知道是什么原因, 但是目前已知的信息来看, 提示更新是因为本地数据仍然存在, 但是重新编译导致热更新失败比知道是什么原因<br> 不过这并不是什么问题, 一般用户也不可能冲洗编译的, 如果删除了应用重新安装, 那么本地的数据也会被删除掉, 这样也是没问题的</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为官方文档中有一些说的不是很明白的地方, 所以特写这篇文章对官方的热更新方案作一个补充.&lt;br&gt;同时也避免自己以后再次掉到坑里去.&lt;/p&gt;
    
    </summary>
    
      <category term="CocosCreator" scheme="http://huyaohui.com/categories/CocosCreator/"/>
    
    
      <category term="Game" scheme="http://huyaohui.com/tags/Game/"/>
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/tags/Cocos2dx/"/>
    
      <category term="CocosCreator" scheme="http://huyaohui.com/tags/CocosCreator/"/>
    
  </entry>
  
  <entry>
    <title>Unity和Cocos2d-x越渐流行，国内公司开发自研游戏引擎的意义</title>
    <link href="http://huyaohui.com/2017/02/23/Unity-he-Cocos2d-x-yue-jian-liu-hang-%EF%BC%8C-guo-nei-gong-si-kai-fa-zi-yan-you-xi-yin-qing-de-yi-yi/"/>
    <id>http://huyaohui.com/2017/02/23/Unity-he-Cocos2d-x-yue-jian-liu-hang-，-guo-nei-gong-si-kai-fa-zi-yan-you-xi-yin-qing-de-yi-yi/</id>
    <published>2017-02-23T10:21:12.000Z</published>
    <updated>2017-02-23T10:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>该篇文章来自至<code>cocos</code>贴吧, 里面说到自研引擎相关的问题, 也是我一直想说的, 遂转载过来.<br>原文貌似来自知乎: <a href="https://www.zhihu.com/question/23881759" target="_blank" rel="external">https://www.zhihu.com/question/23881759</a></p>
<a id="more"></a>
<h2 id="A回答"><a href="#A回答" class="headerlink" title="A回答"></a>A回答</h2><blockquote>
<p>我觉得比我早回答的人都已经说了很多了，我就说一点我看到的东西吧。</p>
<p>去年到今年大半年都从事有关引擎和前端适配的工作，给我的感觉就是这两个引擎以目前的势头来说必定会席卷整个业界。</p>
<p>但是如果从我的工作上来看的话，一个开发公司往往要的不是一个单纯的引擎，而是一个解决方案，所以Cocos2d-x相比于u3d还是有很大差距的，在3D方面的工作我不了解，所以对U3D不做评价。而在2D游戏的制作方面，采用Cocos2d-x带来的问题也会不少，最为突出的还是美术和程序之间的矛盾。最为诟病的是官方出的那个编辑器，虽然引擎是开源的，但是编辑器是闭源的，而且还做的很烂（相比于传统老牌Flash来说）。在一个项目要动工的时候，必须去权衡这个编辑器不能提供的功能所带来的损失，截止我不参与这项工作的时候，官方编辑器能支持的东西还是很少，很多项目上要用的也没有，因此而转向我原来参与的编辑器适配的技术，希望能够找到一个功能完善（如Flash）的编辑器，通过一个通用的适配器来适配上各种引擎。这个愿景是美好的。</p>
<p>但是，最终我不得不承认，由于很多数据架构的问题，在编辑器和引擎之间想要搭建通用的适配器解决方案几乎是一件不可能完成的事情，虽然我硬着头皮解决了大多数，但是最终的效果还是非常不理想。相反在之前自研的引擎上，由于采用的方案就是类似Flash的，很顺理成章地适配的比较好。</p>
<p>举这样一个栗子就是想说明，一个引擎再优秀，当项目需求发生变化时，也不可能做出万全的准备，各种各样的需求也就催生出各种各样的解决方案，这些方案里面就不乏自研引擎。感觉这个就好像是即使在windows统一天下的时候，也还存在着各种linux，正式他们不放弃，才得以发展。</p>
<p>存在即合理。从技术研究上讲我是很喜欢公司做这种基础建设的，虽然研究了好久的东西最终还是被砍了TAT</p>
</blockquote>
<h2 id="B回答"><a href="#B回答" class="headerlink" title="B回答"></a>B回答</h2><blockquote>
<p>我们团队08年顺应端游大潮，出来创业，本人负责改引擎。当时手握的一款05年前的商业引擎，连shader系统都没有，于是剃掉渲染层和一些老旧的部件重做。终于到了10年游戏出来了，当时的市面上国产网游整个场景用动态阴影的并不多，更流行的做法是只是人物做成动态，毕竟网游需要照顾低端配置，我们能上得益于深度定制引擎所带来的效能提升，这种提升是完全依赖于当时的游戏类型的，估计自研的优势也在于此。 举些例子，比如固定视角时，地形的像素面积过大，可以通过编写美术工具来限制层数，废弃多遍渲染。又比如，如果玩家视野有限，用多层阴影略显浪费，但单层又有些不够用，于是可以定制一个梯形变形+渐变的解决方案。深度定制还有个好处是可以满足美术的特殊需求，比如某些奇怪的光泽，某些奇怪的朦胧的雾或者水下的感觉，美术们都很感性，但需要你的理性实现他们。</p>
<p>接着后话，游戏代理给了某知名网游公司，一直不温不火。团队快饿死了，于是饿死之前做了款全3D的，在此之前我的理想游戏挣钱了是全新开发一款全3d的引擎，但既然是要饿死了也没这些想法了，直接把这款完全为2.5d定制的引擎硬改成3d，效率勉强撑得住，12年游戏又上了，牛逼哄哄滴注册个名著的名字，然后依然不温不火。公司被收购，我们一帮核心成员带着遗憾离开，多少理想热血已成往事。</p>
<p>再接着，再次组建团队，当然规模小了，但还是端游，周边项目组都是些用unity的年轻人， 我自己因为人手不足也写起了逻辑，写起了ai. 讨论起了游戏策划，更多的困扰是经济以及前途的压力，以及各种烦人的人事。 当年怀揣一本doom启示录以引擎程序员为骄傲杀入行业，如今觉得真的到了离开的时候。<br>也许我在软件园门口买烧饼的时候，能和顾客们讨论讨论PSSM，呵呵。</p>
</blockquote>
<h2 id="C回答"><a href="#C回答" class="headerlink" title="C回答"></a>C回答</h2><p>分几个角度来说：</p>
<blockquote>
<p>一、我认为，Unity3D将无可挽回的，或者说，势在必得的，成为接下来很多年内，世界移动领域游戏引擎市场霸主。</p>
<blockquote>
<p>回顾历史，正如同咱们经历过一次又一次的互联网时代变革一样，x86，windows，Google，facebook，twitter，当一个具备一定规模的产品在一定领域达成霸主地位之后，其它的同类产品从技术积累上、推广成本上、对用户的掌握程度上等等方面的差距均会无可挽回的越拉越大。即使对于引擎这种核心技术较多的产品，这种差距也不是一两个明星级别的程序员可以挽回的。不论是易用性、性能优化、提供更多功能、覆盖更多平台，这些对于引擎开发团队来说，都是赤裸裸的成本。随着时间的推移，这个门槛会越来越高，高到后来者根本没有办法企及的程度。<br>这就正如你打算现在开一家公司，研发一个操作系统去销售，即使你投入数以亿计的资金，可能你也刚刚攻关完微软早在十几年前就在实验室得出结论的问题。这还仅仅是技术，比起微软完备的推广、销售渠道，你在创业初期多半还需要自己上门推广；比起微软完备的亿级用户的体验收集分析系统，你可能不得不邀请数以十计的朋友或家人体验你的产品。这一切的门槛，都是无法挽回的。</p>
</blockquote>
<p>二、我认为，cocos2d将在2D游戏研发领域持续的占据一定的市场，但在3D领域会败的体无完肤。</p>
<blockquote>
<p>cocos2d与Unity3D的关系某种程度上类似linux与windows的关系。前者打着开源的旗号，由社区发展而来，后者从诞生开始就是商业闭源的。根据程序员的劣根性，开源会让他们产生一种虚假的掌控感，让他们以为，如果引擎是开源的，那么在引擎遇到BUG的时候，他们就可以去查看代码并修复。尽管这种感觉在大多数时候是错误的（这里不深入讨论了），即使在小部分时候正确，带来的好处也远不如使用商业引擎降低的成本，但这有助于保证一部分忠实用户，一旦用户花费了大量的学习成本去学习一个引擎，在没有特别的必要性的情况下，他转投其它类似产品的可能性是很小的。另一方面，Unity3D在2D领域多少还有一些水土不服的现状，它并没有完好的提供大部分2D游戏研发者所适应的工作模式，它的体积庞大，不能满足众多小渠道瘦身包的要求。它的架构和设计严丝合缝，因此并不容易满足一部分特殊的需求。所以在需求多变的2D游戏领域，目前cocos2d才是当之无愧的霸主，Unity3D并不容易吃下这部分市场。<br>但是在3D领域，cocos3d落后的太多，不论是资源管理、场景管理、渲染框架，这在OpenGL ES 2.0普及的时代可能还不明显，但是随着OpenGL ES 3.0的发布到普及，技术门槛会大幅的提高，cocos3dx将沦为一个只能画画简单场景的小众引擎，时间的差距和投入的差距会让它跟Unity3D无法抗衡。<br>另一方面，cocos2d的结构较为松散，比起Unity3D富有设计感的API，cocos2d更像一个功能堆砌的产物。对于小规模的项目来说，问题可能并不明显，只要少量的增加程序员（或者让他们加班！？）就能解决问题，但是随着项目规模的扩大，参与人数的增加，混乱和无尽的BUG是我能看到的唯一结局。</p>
</blockquote>
<p>三、我认为，国产自研引擎尤其是商业自研引擎在一段时间内还将继续持续存在。</p>
<blockquote>
<p>且不说楼上有人提到的“自研情节”，单纯从商业角度来分析一下。<br>1、引擎市场是一个对技术支持等服务要求非常高的市场。对于一个非英语母语的国家来说，本地化服务是一个非常重要的服务。在Unity3D真正成长为一个强大的跨国企业之前，还有充足的时间留给国产引擎公司存活，并且很可能成长为类似百度在搜索领域这样独霸一方的角色。某种程度上，我认为搜狐畅游的Genesis-3D打的是这个算盘，结果怎样还需观察。<br>2、正如同有人提到的，像Unity3D这样通用化的引擎，还是很难为一个特定的游戏类型提供足够的支撑服务。对于一个特定的游戏类型，在Unity3D完美覆盖之前，还有充足的时间留给一个特定的引擎成长，建立稳定的社区，拥有稳定的用户。典型的代表有橙光文字游戏制作工具。<br>3、对于一个一定规模的公司来说，拥有自己的引擎，拥有一个属于自己的公司的技术支撑团队，就目前来看依然是有价值的。这不但会大大降低引擎学习研究适应的风险，也有助于这家公司在某些细分领域建立自己的技术门槛，甚至还有利于降低核心员工流失率。<br>4、对于一些具备核心技术人员的小型团队，只要不奢望一个大而全的引擎解决方案，拥有一个自己的引擎（不是一个庞然大物，而是一个小清新的工具&amp;库集合和自我的积累）依然是一个既有助于调动核心技术人员积极性，又能快速响应和满足当下并不复杂的需求的方案。这个思路的典型代表是云风的Ejoy2D。</p>
</blockquote>
<p>四、引擎研发团队还有更多新的机会。</p>
<blockquote>
<p>1、船小好调头，任何一个大的引擎，达到一定的规模，它登陆一个新的平台或环境都会有比较大的时间成本。相比起来，小规模引擎快速登陆一个平台，在新的平台上快速抢占市场，会是比较大的机会。这个方案的典型代表是Unity3D自己。在几年前，提到游戏引擎的时候人们想到的都是Unreal、Crystal，而那时候的Unity3D只是一个活在浏览器插件里的、主要面向甚至不完全是游戏的，极小众的引擎。但是Unity3D抓住了智能手机浪潮的先机，快速抢占了市场，不但成就了新一轮的神话，甚至在PC、主机等平台上产生了反攻之势。这件事是否会重演？谁也不知道。<br>2、服务，服务，还是服务。对于一部分客户来说，他们不关心这个引擎的核心多么有技术含量，所用的算法有多么高大上，他们最关心的，是他们面临的需求和问题能否得到解决。比起十几年的技术积累，丰富的文档资料，他们更想要的是一封快速回复的邮件，一个电话，甚至是一次上门的培训或技术支撑。想要做好服务，你需要是一个有一定技术积累的团队，但你甚至未必需要有一个自己的引擎。想想吧，当windows大潮来临的时候，真正赚钱的是投入几千万几亿研发一个新操作系统试图跟windows正面抗衡的公司，还是那些卖盗版碟，搞windows office培训班的团队？<br>3、适应新的互联网时代社会化大生产模式。作为一个引擎团队，你具备的可能是技术实力、研发能力，有可能你认为自己不适合去做什么经销培训的事情，那么一定还有一件事情你可以做，就是借助社区和平台，进行互联网式的分工协作。一个别人无法完成的需求，一个别人无法实现的技术难题，如果对于你来说是迎刃而解的，那么不必拥有自己的引擎，你也可以在互联网时代获得你自己的立足之地。</p>
</blockquote>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>原贴地址: <a href="http://tieba.baidu.com/p/4055902638" target="_blank" rel="external">http://tieba.baidu.com/p/4055902638</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该篇文章来自至&lt;code&gt;cocos&lt;/code&gt;贴吧, 里面说到自研引擎相关的问题, 也是我一直想说的, 遂转载过来.&lt;br&gt;原文貌似来自知乎: &lt;a href=&quot;https://www.zhihu.com/question/23881759&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/23881759&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Think" scheme="http://huyaohui.com/categories/Think/"/>
    
    
      <category term="Game" scheme="http://huyaohui.com/tags/Game/"/>
    
      <category term="Unity" scheme="http://huyaohui.com/tags/Unity/"/>
    
      <category term="Cocos2d-x" scheme="http://huyaohui.com/tags/Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>做游戏究竟需要哪些技能呢</title>
    <link href="http://huyaohui.com/2017/02/22/zuo-you-xi-jiu-jing-xu-yao-na-xie-ji-neng-ni/"/>
    <id>http://huyaohui.com/2017/02/22/zuo-you-xi-jiu-jing-xu-yao-na-xie-ji-neng-ni/</id>
    <published>2017-02-22T06:03:08.000Z</published>
    <updated>2017-02-22T06:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>师傅领进门，修行靠个人。<br>可是独立游戏领域，大多是独立游戏爱好者凭自己的兴趣做做。你从一个100%的纯新人，从一个普通的游戏玩家，该如何入门呢？本帖就此展开一些讨论，希望能帮助到一些新人朋友。</p>
<a id="more"></a>
<h2 id="哪些现有的知识能帮助我进行更好的游戏开发"><a href="#哪些现有的知识能帮助我进行更好的游戏开发" class="headerlink" title="哪些现有的知识能帮助我进行更好的游戏开发"></a>哪些现有的知识能帮助我进行更好的游戏开发</h2><p>虽说是纯新人，但是作为一个拥有正常智力的人，总归是有很多现成的技能的。而游戏开发是一项非常综合的工作，她的涉及面非常之广，甚至让我很难一下想全。所以这里只能简单罗列几点我想到的。</p>
<h3 id="编程技能（逻辑思维）"><a href="#编程技能（逻辑思维）" class="headerlink" title="编程技能（逻辑思维）"></a>编程技能（逻辑思维）</h3><p>当大家在此吧讨论“游戏”的时候，99.99%是在讨论电子游戏，而电子游戏的诞生100%离不开编程。<br>策划、美术或许决定了一个游戏是否好玩、是否吸引人。但是请别忘了，在那之前，程序决定了一个游戏是否存在于这个世界上。<br>有很多吧友的本质工作是IT相关的在校学生或者从业人员。他们本身已经具备了一定的开发能力，这对独立游戏的开发是很有帮助的。<br>更多的人可能只学过一点点C、C++、Java的皮毛，大致知道个if、else，数组神马的大概有个映像。你和他说什么继承、多态，要么不知道，要么学过忘了。我想很多人应该在这个level，不过鼓舞人心的是，这些简单的“映像”非常有用，它决定了你在百度相关问题的时候，能否准确地找到关键字。<br>还有部分纯新人，可能编程连碰都没有碰过，不过别担心。只要你有良好的逻辑思维能力，学会简单的编程并不是什么难事。现在网络这么发达，自学编程的人成千上万，别人能做到，你一定也可以。如果你是理科生，有最基本的数学基础、简单的物理常识。那说明你的逻辑思维能力并不弱。相信我，只要愿意学，你会成为一个优秀的程序员的。<br>如果你说我是文科生/女生，逻辑什么的也不是我的强项。。。别灰心，多来吧里逛逛，看看能不能抓到一两个聊得来的程序员吧。</p>
<h3 id="多媒体技能"><a href="#多媒体技能" class="headerlink" title="多媒体技能"></a>多媒体技能</h3><p>主要是绘画，或者说美术。<br>最佳的解决方案是，你本身就是游戏美术。那样最好了，即使你一开始这也不会那也不会，相信我，你的老板，你的客户会逼你一样样学会的。<br>比较符合现实而且又理想一点的方案是，你虽然不是美工出身，但是却有良好的绘画才能。相信我，这真的非常有用。至少，你可以以独立游戏美工的身份，去找一个足够靠谱的程序员队友。如果有条件能找到一些学习资料，购买适合的硬件（如手绘板）进行进一步学习的话，你很快就能成长成为一个合格的独立游戏美术。<br>不过更符合现实的是，你并不会画画。这很正常，我对这一块也是一窍不通，大多数（超过一半）的独立游戏开发者和你有类似的处境。你有海量的方法来弥补这一不足，最最简单最最直接的方法就是寻找现成的素材。</p>
<p>当然，除了绘画以外。视频处理、音乐、乐器等等。都是非常有用的多媒体技能，游戏在这一块的要求也非常高。<br>总而言之，如果你有扎实的多媒体功底，自然会为你的游戏加分不少。</p>
<h3 id="策划类技能"><a href="#策划类技能" class="headerlink" title="策划类技能"></a>策划类技能</h3><p>说白了，就是如何设计出一个好玩的、有趣的游戏。<br>独立游戏大多由个人或者2~4人的超小团队所开发。所以通常来说没有专门一人担任策划，策划的工作，通常有主程或者主美兼职。<br>那些技能属于策划类技能呢。如作文、编剧这类文学技能就属于策划类技能，它能帮助你更好的设计出符合游戏主题的剧情。另外还有一点就是，玩游戏。玩其他游戏的过程，也为我们积累了不少游戏设计方面的经验。且不说设计成怎么样一定创新、好玩，但是做成怎么样绝对是坑，总归还是能有个大体上的判断。</p>
<h3 id="0-百度的技能"><a href="#0-百度的技能" class="headerlink" title="(0)百度的技能"></a>(0)百度的技能</h3><p>没错，这里的标题序列变成了0。因为一旦有了它，你可以学到123。至于你能不能真的学到，那取决于你是否有耐心、有恒心。相信有过独立游戏开发经历的人都知道，绝大多数时候，做游戏就是考验一个人耐心的时候。<br>你可以找人教你写程序，你可以找人教你画画，你可以请人帮你做策划。但是，在互联网上，大家也就是个网友、吧友的关系，不可能有人愿意时时刻刻等着你问东问西。<br>但是，请记住，这世界上还有一位非常强大、万能的老师，他7*24小时随叫随到，耐心解决各种白痴问题，请记住她的名字——百度。（她还有个美国同行叫谷歌，至于怎么翻墙上谷歌，问百度）<br>哪怕你什么都不会，只要你有了百度，你可以尽情地搜索《XXX教程》，你会发现一搜一大把。<br>如果你对自己的智商没有信心，你可以搜索《XXX零起点教程》、《XXX小白教程》、《XXX中文教程》，一切随你喜好，尽管放心的搜吧，度娘不会嫌弃你的。<br>甚至在你遇到具体问题的时候，你可以直接搜索你的问题。比如“Java的数组怎么用”、“什么是交叉数组”、“C#的委托是什么”。你大可放心地搜，因为在互联网极度发达的今天，已经有千千万万的小白帮你把你可能遇到的90%以上的问题问过了。对于一些有共性的问题，已经有大牛总结好发成博客放在网上了。而这一切，就TM等你去搜了，你要是搜都懒得搜，一搜一大把的问题还在这问问问，那你最好赶紧给我滚粗。</p>
<h2 id="具体如何做"><a href="#具体如何做" class="headerlink" title="具体如何做"></a>具体如何做</h2><p>OK，说完了加分技能，在来说说作为新人小白，具体该怎么做。<br>首先、先给我想清楚两个问题：</p>
<blockquote>
<p>1) 我要做一款怎样的游戏？<br>2) 我为什么要做这款游戏？</p>
</blockquote>
<p>这两个问题可以说明很多，先请你静下心来，仔细把这两个问题想好，吧答案记在心里。然后我就告诉你接下来怎么做。</p>
<h3 id="选择一款适合自己的游戏引擎"><a href="#选择一款适合自己的游戏引擎" class="headerlink" title="选择一款适合自己的游戏引擎"></a>选择一款适合自己的游戏引擎</h3><p>除非是成熟的、有一定技术功底的程序员。否则，请选用现有的游戏框架。<br>原因，省功夫、省麻烦，出了问题也方便百度。<br>不论你在程序上到达了怎样的高度，Unity始终是一个可选的选项。功能、跨平台性能强的不像话，还NM有免费版，配合海量插件（包括最近更新的官方2D插件）简直就是游戏引擎界的大BOSS。用的人很多，教程也有不少（不过说句实在话，绝大多数教程都是给程序员看的）。如果你想以小白的身份入门，我推荐此贴——<br><a href="http://inpla.net/forum.php?mod=viewthread&amp;tid=6125" target="_blank" rel="external">http://inpla.net/forum.php?mod=viewthread&amp;tid=6125</a><br>星球酋长D哥的作品，有传闻说他可能会更新，具体不知道。</p>
<p>不过对于新人，真心还是希望能先从2D做起。<br>如果你愿意在做游戏的同时学习一些编程知识，方便今后能开发出更NB、更精彩的游戏。我推荐Cocos2D-x（语言C++），功能强大，用的人不少、教程多。Greenfoot比较冷门，不过非常适合喜欢Java的新人。Flash、VB等也是不错的选择，不过总觉得有点落后。希望Flash和VB程序员不要喷我。</p>
<p>如果你对程序并不感冒，只是想做出自己心中的游戏。那你也有海量的解决方案可供选择。在这种情况下，引擎的选择很大程度上取决于你想要做什么类型的游戏。如果你想做RPG，RPGMaker是很不错的选择。如果你想做STG，我记得有个叫STGMaker的，虽说有点旧做得也很不错。ACT（主要指格斗类的游戏）也有一个专门的，名字忘了，大家可以自行百度，关键字选用 《XXX（类型）游戏引擎》。对于这种定制程度较高的游戏引擎，其优点在于使用方便，出东西快。但是缺点也是显而易见的，不易扩展，难以突破引擎自身的条条框框，做出你想要、而它却没有的功能。对于程序员，还是别用了。</p>
<p>另外还有一种引擎介于两者之间，如GameMaker，Stencyl等等等等。它们并不为专门种类的游戏定制，相对非常灵活，而且可以避免大量代码的编写。拥有为数不少的现有插件和学习资料。相比于给程序员用的引擎，它们更方便、更直观；相比于给小白用的引擎，它们更灵活，更强大。</p>
<p>至于游戏引擎的话题就说到这里，欢迎各位补充。<br>对于新人，选择时请先各种百度。</p>
<h3 id="不要换来换去"><a href="#不要换来换去" class="headerlink" title="不要换来换去"></a>不要换来换去</h3><p>很多人纠结于用什么引擎。呵呵，选择多了问题也跟着多了。对此我只想说，条条大路通罗马。很多道理都是想通的，你用这个工具做好了一款游戏，明天换一个不过就是几天的事情去从头学习、百度一下。<br>但你如果总觉得这个引擎有缺陷、那个引擎不适合。<br>在此，我可以非常明确地告诉你，你的感觉并不真实。事实是，你的性格有缺陷，你这个人不适合游戏开发。</p>
<h3 id="不要在意版权的事、不要在意钱"><a href="#不要在意版权的事、不要在意钱" class="headerlink" title="不要在意版权的事、不要在意钱"></a>不要在意版权的事、不要在意钱</h3><p>我之前已经说过了，游戏开发需要很多技能的支持。程序、美术、音乐、策划等等等等。很难有人能精通所有。所以在绝大多数时候，我们需要现有的素材支持。</p>
<p>天朝一个盗版、山寨现象猖獗的国家，绝大多数的独立游戏开发者（包括新人）都有不俗的版权意识。他们意识到不是随便网上找个素材就能放在自己的游戏里用的。而我今天却要告诉所有新人，别太在意版权的事。<br>我这么说，不是鼓励大家用盗版、偷素材，而是希望新人朋友们认清一个事实：完成一个独立游戏很难。作为新人，你所想到的90%以上的游戏创意，已经超过了你的能力范围（即使是在几年的入门学习之后，依然有很多是你做不到的）。</p>
<p>而作为独立游戏的生产者，我们所开发的游戏的最终归宿（如果它最终有被做出来的话），也就是给爱好者们玩玩（绝大多数情况下是自己玩玩）。所以，作为不盈利的游戏开发者，你绝对没有必要为了担心惹上版权上的问题而避免使用现成的素材，放心大胆地去用就好了。</p>
<p>退一步讲，可能也有人会做美梦，想着哪天做的游戏成名了，能赚大钱。呵呵，我其实也想过，但是那很难。何况，你的游戏真要火了，换换素材也不是多难的事儿。<br>不过我再次还想提醒新人一点，一开始别太在意能不能赚钱的事儿。这样的想法不但不会帮助你完成作品，还会影响你的游戏创作，同时也会影响到你的游戏开发体验。作为新人，自知之明是很重要的，第一款游戏就能火的我是没听说过，所以，还请先做出点东西来吧。</p>
<h3 id="素材收集"><a href="#素材收集" class="headerlink" title="素材收集"></a>素材收集</h3><p>费了这么多口舌说第三点，无非是希望新人朋友在收集游戏素材的时候，能抛开一些没必要的包袱。而这一层，则主要说说怎么收集素材。</p>
<p>问题回归到“我想做一款怎么样的游戏”这个问题上。<br>如果你想做的是“XXX同人游戏”或者“一款类似于XXX”的游戏，那么恭喜你，在素材的问题上，你会轻松很多。因为你可以借用XXX的素材。至于怎么得到这些素材，有技术的可以去原来的游戏里提取。不过我的做法通常是吧“XXX 素材”的字样告诉度娘。</p>
<p>如果你心中的游戏并没有以现实中的某款游戏为原型，那么，又该如何去寻找一些现有的、可用的素材呢。老实说，你如果直接搜索 “XXX类游戏的素材”可能很难有所斩获。此时，你需要一些素材网站的帮助。<br>这里推荐一下国内的知名游戏素材网66rpg，网址好像变了，自己百度下。<br>PS：66原本是各类游戏素材的完美聚集地，同时也是RPGMaker用户的聚集地，那里有很多RPGMaker的教程和学习资料。如果你想做简单的RPG或者文字类游戏，66+RPGMaker或橙光是你的不二选择。<br>不过，最近66再推《橙光文字游戏制作精灵》现在首页点进去都是这个，大家可以在导航栏点论坛，然后在进入素材资源的主站。</p>
<p>除了66之外，我所知道的其他国内资源站貌似都倒了。所以，很多时候需要去国外的资料站上下东西。最简单而且通用的做法是，用谷歌搜索“Game Image”或者“Game Sound”/“Game Music”。不过我更喜欢在前面加上“Free”的字样。这样可以搜到很多外国大大共享的免费资源，真是妙极了。<br>这种做法的缺点也有，大大们自己共享的素材风格各异，很难找到成套的。</p>
<p>至于音乐、音效一块，我主要还是在66上down。国外的声音素材网大多要收费，虽说有些时候，一首0.99美元，其实也就几块钱，便宜很。但是我又没有外国银行卡，人家又不支持支付宝，所以我通常还是会去偷。至于怎么偷，别问我，问度娘。<br>PS：大家有什么好的声音来源可以共享一下。@独立游戏音乐 不知道是不是这个ID</p>
<h3 id="合理组队"><a href="#合理组队" class="headerlink" title="合理组队"></a>合理组队</h3><p>经常看到有找人的帖子，不少是叫你进一个QQ群。<br>不知道大家进过这种群没有，一群大水笔在里面成天到晚BB，最后啥也做不出来。<br>招人的时候美其名曰“共同进步”，其实人多了反而容易推卸责任。黄图、恶心图满天飞，你真想讨论点和做游戏相关的，没几句就被打水笔刷没了。</p>
<p>这里介绍一些自己的经验。我与他人的合作，要么就是现实中的朋友，每天可以见面讨论。要么就是组一个专门的办公群，只把和制作游戏相关的人加进来，防止划水。</p>
<p>我非常想要说明的一点就是，独立游戏的制作，组队并不是必须的。你如果再程序上有缺陷，可以采用更加定制化的引擎；你如果不擅长画图，可以借助现有的素材。<br>多人组队大家取长补短虽然听上去很美，但是实际情况往往是交流成本增加、办事效率下降。而且，现在专职做独立游戏人并不多，大家的日常生活，谁还没点突发事件。今天我忙一天，明天你忙一天。几天下来，做游戏的热情也消磨的差不多了。<br>就我个人而言，也和别人合作过几次。有吧里的，也有外面认识的，甚至显示生活中认识的美术。有被人坑的，也有坑别人的（这里@Joker123458，他在暑假被我坑了一次）。最终能做出点东西。哪怕是小demo的，还真不多。所以，新人朋友们，还是好好单干吧，有问题主要还是靠百度。</p>
<p>PS，作为吧主的友情提醒：<br>本吧禁止无脑招人、组队贴。如果诚心组队的，请先介绍自己的游戏、说明当前的开发程度、说明需要怎样的人才。严禁胡说一通，直接甩个群号乱招的。</p>
<h3 id="持之以恒"><a href="#持之以恒" class="headerlink" title="持之以恒"></a>持之以恒</h3><p>怎么解决问题、怎么用百度、怎么搜素材、怎么组队上面都说了。最后一点就是持之以恒。<br>做一个游戏并不能一蹴而就，对新人而言尤其如此。可能你做了几周甚至几个月，才做出一些很基础、很白痴的功能。请不要灰心，也不要气馁，我曾经3天才写出一个能用的血条。万事开头难，大家都是这样过来的。<br>在制作独立游戏的过程中，你可能会感到失望、感到孤独。但是请相信，只要你坚持下来，你终将收获一份快乐。而这种快乐，是你花多少钱，都无法得到的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>原贴地址: <a href="http://tieba.baidu.com/p/2767234675" target="_blank" rel="external">http://tieba.baidu.com/p/2767234675</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;师傅领进门，修行靠个人。&lt;br&gt;可是独立游戏领域，大多是独立游戏爱好者凭自己的兴趣做做。你从一个100%的纯新人，从一个普通的游戏玩家，该如何入门呢？本帖就此展开一些讨论，希望能帮助到一些新人朋友。&lt;/p&gt;
    
    </summary>
    
      <category term="Think" scheme="http://huyaohui.com/categories/Think/"/>
    
    
      <category term="Game" scheme="http://huyaohui.com/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Libqgit2 clone error &quot;unable to lock mwindow mutex&quot;</title>
    <link href="http://huyaohui.com/2017/01/08/Libqgit2-clone-error-%22unable-to-lock-mwindow-mutex%22/"/>
    <id>http://huyaohui.com/2017/01/08/Libqgit2-clone-error-&quot;unable-to-lock-mwindow-mutex&quot;/</id>
    <published>2017-01-08T07:40:31.000Z</published>
    <updated>2017-07-30T04:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先说明一下这个error已经困扰了我两个多月了，求助了不少人，也找了N多资料都没能找到答案，关键是google都没能发现任何相关资料，简直崩溃。<br>不过今天终于才勉强解决了，但是感觉我的处理方式应该有问题，不过毕竟能用暂时就不纠结这么多了，下面具体说下我的解决方案，挺有意思的</p>
<a id="more"></a>
<h2 id="找到解决方案过程"><a href="#找到解决方案过程" class="headerlink" title="找到解决方案过程"></a>找到解决方案过程</h2><p>在找到解决方案前，尝试了无数次的重新编译，换版本编译，得到的结果仍然是同样的蛋疼。<br>并且，我发现仅仅是<code>clone</code>会出现这个错误，<code>init</code>并不会发生崩溃，当时我就在想会不会不是<code>libqgit2</code>的问题呢，因为使用<code>ctest -V</code>测试是<code>clone</code>是可以成功的。<br>由此推断出，应该是<code>QT Creator</code>的问题（还有一个件事也能佐证我这个猜测，就是期间我使用了一个<a href="http://github.com/qtpm/qtpm" target="_blank" rel="external">qtpm</a>的包管理工具去安装<code>libqgit2</code>是可以正常<code>clone</code>的，但是这个东西不能导入<code>QT Creator</code>而写项目关注的人也不多，遂放弃），但是到底是什么问题我并不清楚，我也不是很懂<code>QT</code>和编译相关的东西。<br>为此我还在<a href="http://stackoverflow.com/questions/41297760/unable-to-lock-mwindow-mutex" target="_blank" rel="external">stackoverflow</a>上提交了我这个问题，但是并没人鸟我，囧…<br>到最后，是在没办法，就使用这个错误中的关键词在项目源代码中所有，但是一无所得，后来我想到是不是不是<code>libqgit2</code>的问题是<code>libgit2</code>的问题呢，我一搜索，瞬间懵逼了，这个错误能再<code>libgit2</code>的源码中找到，瞬间燃气了星星之火，感觉有希望了，遂去翻阅<code>libgit2</code>的文档，然而可想而知我又懵逼了，并没有找到相关的文档<br>好吧心想硬着头皮去看源代码吧，这一看又看到希望了，里面的注释有说到这些方法使用来锁定window用的，但我根本就没有用到它的window啊，我有我自己的图形库，并不需要它去锁定什么window。<br>我这样一想，能不能把这些东西删除掉的内部实现注释掉呢，想想反正死马当活马医了，本以为会是一堆报错来打我脸，没想到居然行了，行了，了，天不亡我</p>
<h2 id="修改如下"><a href="#修改如下" class="headerlink" title="修改如下"></a>修改如下</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim libgit2/src/mwindow.c</div><div class="line"></div><div class="line"><span class="comment">// 注释到所有 git__mwindow_mutex 相关的判断</span></div><div class="line"><span class="comment">// 会有几处，我这里全部注释掉了</span></div><div class="line"><span class="comment">// if (git_mutex_lock(&amp;git__mwindow_mutex)) &#123;</span></div><div class="line"><span class="comment">//  giterr_set(GITERR_THREAD, "unable to lock mwindow mutex");</span></div><div class="line"><span class="comment">//  return;</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>一直以为是<code>libqgit2</code>或者是<code>QT Creator</code>的问题，但是…</li>
<li>不要过分相信权威（<code>libqgit2</code>已经没人维护了，让我一直以为是它出了问题）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说明一下这个error已经困扰了我两个多月了，求助了不少人，也找了N多资料都没能找到答案，关键是google都没能发现任何相关资料，简直崩溃。&lt;br&gt;不过今天终于才勉强解决了，但是感觉我的处理方式应该有问题，不过毕竟能用暂时就不纠结这么多了，下面具体说下我的解决方案，挺有意思的&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="libgit2" scheme="http://huyaohui.com/tags/libgit2/"/>
    
      <category term="libqgit2" scheme="http://huyaohui.com/tags/libqgit2/"/>
    
  </entry>
  
  <entry>
    <title>A simple C++ framework based on file</title>
    <link href="http://huyaohui.com/2016/12/26/A-simple-C++-framework-based-on-file/"/>
    <id>http://huyaohui.com/2016/12/26/A-simple-C++-framework-based-on-file/</id>
    <published>2016-12-26T12:49:12.000Z</published>
    <updated>2017-07-30T04:35:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>A simple C++ framework based on file.</p>
<a id="more"></a>
<h2 id="瞎扯淡"><a href="#瞎扯淡" class="headerlink" title="瞎扯淡"></a>瞎扯淡</h2><blockquote>
<p>前段时间(其实离现在已经不短了)印象笔记免费用户限制客户端同步个数, 像我这样 WindowsPC, WindowsBook, WindowsPad, WindowsPhoen, iPhone, MacBook, AndroidPad这么多设备需要同(我真不是装逼, 好吧我在装逼), 两台设备配额肯定不够的啊, 有木有, 别跟我说可以付费啊, 付费就不限制了, 反正我就不付费. </p>
<p>于是乎就突发奇想, 自己开发一个笔记应用, 那么问题来了, 得需要服务器呢, 怎么办, 想来想去, 想到不是有git吗? 我可以用git来做服务器存储笔记文件啊, 我真他妈是个天才, 恩, 我差点就信了. </p>
<p>经过一段时间的构思, 想起如果使用数据库的话, 会生成字节码文件, 这可不妙, git 对处理字节码可不在行, 思前想后, 最终决定使用纯纯文本文件为存储源, 存储数据, 反正也不会有很大的数据量, 于是乎就google了一番, 没找到相关的开源库, 心想这下坑爹了. 最终没办法, 只能自学了C++开始写这个库, 不要问我为什么不用自己擅长的语言写, 我要跨平台啊, 啊, 啊, 啊… 跨平台的话, 除了C/C++, 我还没有找到很好的选择. 这个项目我是准备支持全平台的, 好吧, 给自己挖了个巨坑… 反正无所谓了, 挖了就挖了, 填补填的上就看造化了.</p>
<p>废话就这么多了, 下面是文档和开源地址</p>
</blockquote>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><h3 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h3><p>Drag <code>src/*</code> to your projects</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"FdbrQueryBuilder.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FileDBR;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    <span class="function">FdbrQueryBuilder <span class="title">queryBuilder</span><span class="params">(<span class="string">"/Users/MakeHui/Desktop/"</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>Create table and delete table</p>
<h4 id="createTable"><a href="#createTable" class="headerlink" title="createTable"></a>createTable</h4><p>Create table</p>
<blockquote>
<p>bool createTable(string table, vector&lt;string&gt; columns)</p>
<ul>
<li>table: The table name</li>
<li>columns: create column name</li>
<li></li>
<li>return: bool</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> data = queryBuilder.createTable(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>, <span class="string">"field3"</span>&#125;);</div></pre></td></tr></table></figure>
<h4 id="deleteTable"><a href="#deleteTable" class="headerlink" title="deleteTable"></a>deleteTable</h4><p>Delete table</p>
<blockquote>
<p>bool createTable(string table)</p>
<ul>
<li>table: The table name</li>
<li></li>
<li>return: bool</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> data = queryBuilder.deleteTable(<span class="string">"tablename.fdbr"</span>);</div></pre></td></tr></table></figure>
<h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>In the basic use. You can use symbols to filter parameters.</p>
<h4 id="equality"><a href="#equality" class="headerlink" title="equality"></a>equality</h4><p>field1 = 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"123"</span>&#125;&#125;);</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 ="</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="not-equal"><a href="#not-equal" class="headerlink" title="not equal"></a>not equal</h4><p>field1 != 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 !="</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="greater"><a href="#greater" class="headerlink" title="greater"></a>greater</h4><p>field1 &gt; 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 &gt;"</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="lesser"><a href="#lesser" class="headerlink" title="lesser"></a>lesser</h4><p>field1 &lt; 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 &lt;"</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="greater-or-equal"><a href="#greater-or-equal" class="headerlink" title="greater or equal"></a>greater or equal</h4><p>field1 &gt;= 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 &gt;="</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="lesser-or-equal"><a href="#lesser-or-equal" class="headerlink" title="lesser or equal"></a>lesser or equal</h4><p>field1 &lt;= 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 &lt;="</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><p>field1 like 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 ~"</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="not-like"><a href="#not-like" class="headerlink" title="not like"></a>not like</h4><p>field1 not like 123</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1 !~"</span>, <span class="string">"123"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>Some to the query method in common use.</p>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>Select data from table</p>
<blockquote>
<p>vector&lt;map&lt;string, string&gt;&gt; select(string table, vector&lt;string&gt; columns = {}, map&lt;string, string&gt; where = {}, map&lt;string, string&gt; order = {})</p>
<ul>
<li>table: The table name</li>
<li>columns: The target columns of data will be fetched</li>
<li>where: Query conditions</li>
<li>order: Sorting conditions</li>
<li></li>
<li>return: vector&lt;map&lt;string, string&gt;&gt;</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; data = queryBuilder.select(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field1"</span>, <span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"123"</span>&#125;&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"DESC"</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>Insert new records in table</p>
<blockquote>
<p>bool insert(string table, map&lt;string, string&gt; datas)</p>
<ul>
<li>table: The table name</li>
<li>datas: The data will be inserted into table</li>
<li></li>
<li>return: bool</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> data = queryBuilder.insert(<span class="string">"tablename.fdbr"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"123"</span>&#125;, &#123;<span class="string">"field3"</span>, <span class="string">"456"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>Modify data in table</p>
<blockquote>
<p>unsigned int update(string table, map&lt;string, string&gt; datas, map&lt;string, string&gt; where = {})</p>
<ul>
<li>table: The table name</li>
<li>datas: The data that will be modified</li>
<li>where: Query conditions</li>
<li></li>
<li>return: The number of rows affected</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data = queryBuilder.update(<span class="string">"tablename.fdbr"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"111"</span>&#125;&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>Delete data from table</p>
<blockquote>
<p>unsigned int del(string table, map&lt;string, string&gt; where = {})</p>
<ul>
<li>table: The table name</li>
<li>where: Query conditions</li>
<li></li>
<li>return: The number of rows affected</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data = queryBuilder.del(<span class="string">"tablename.fdbr"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>Get only one record from table</p>
<blockquote>
<p>map&lt;string, string&gt; get(string table, vector&lt;string&gt; columns = {}, map&lt;string, string&gt; where = {}, map&lt;string, string&gt; order = {})</p>
<ul>
<li>table: The table name</li>
<li>columns: The target columns of data will be fetched</li>
<li>where: Query conditions</li>
<li>order: Sorting conditions</li>
<li></li>
<li>return map&lt;string, string&gt;</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; data = queryBuilder.get(<span class="string">"tablename.fdbr"</span>, &#123;<span class="string">"field2"</span>&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"123"</span>&#125;&#125;, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"ASC"</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<h4 id="has"><a href="#has" class="headerlink" title="has"></a>has</h4><p>Determine whether the target data existed</p>
<blockquote>
<p>bool has(string table, map&lt;string, string&gt; where = {})</p>
<ul>
<li>table: The table name</li>
<li>where: Query conditions</li>
<li></li>
<li>return: bool</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> data = queryBuilder.has(<span class="string">"tablename.fdbr"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>Counts the number of rows</p>
<blockquote>
<p>unsigned int count(string table, map&lt;string, string&gt; where = {});</p>
<ul>
<li>table: The table name</li>
<li>where: Query conditions</li>
<li></li>
<li>return: unsigned int</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data = queryBuilder.count(<span class="string">"tablename.fdbr"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><p>Get the maximum value for the column and support string</p>
<blockquote>
<p>string max(string table, string column, map&lt;string, string&gt; where = {})</p>
<ul>
<li>table: The table name</li>
<li>column: The target column will be calculated</li>
<li>where: Query conditions</li>
<li></li>
<li>return: string</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> data = queryBuilder.max(<span class="string">"tablename.fdbr"</span>, <span class="string">"field2"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="min"><a href="#min" class="headerlink" title="min"></a>min</h4><p>Get the minimum value for the column and support string</p>
<blockquote>
<p>string min(string table, string column, map&lt;string, string&gt; where = {});</p>
<ul>
<li>table: The table name</li>
<li>column: The target column will be calculated</li>
<li>where: Query conditions</li>
<li></li>
<li>return: string</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> data = queryBuilder.min(<span class="string">"tablename.fdbr"</span>, <span class="string">"field2"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h4><p>Get the average value for the column</p>
<blockquote>
<p>long double avg(string table, string column, map&lt;string, string&gt; where = {});</p>
<ul>
<li>table: The table name</li>
<li>column: The target column will be calculated</li>
<li>where: Query conditions</li>
<li></li>
<li>return: long double</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> data = queryBuilder.avg(<span class="string">"tablename.fdbr"</span>, <span class="string">"field2"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h4><p>Get the total value for the column</p>
<blockquote>
<p>long double sum(string table, string column, map&lt;string, string&gt; where = {});</p>
<ul>
<li>table: The table name</li>
<li>column: The target column will be calculated</li>
<li>where: Query conditions</li>
<li></li>
<li>return: long double</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> data = queryBuilder.sum(<span class="string">"tablename.fdbr"</span>, <span class="string">"field2"</span>, &#123;&#123;<span class="string">"field1"</span>, <span class="string">"100"</span>&#125;&#125;);</div></pre></td></tr></table></figure>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>FileDBR is under the LGPLv2.1 license.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A simple C++ framework based on file.&lt;/p&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="FileDBR" scheme="http://huyaohui.com/tags/FileDBR/"/>
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Library" scheme="http://huyaohui.com/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>CMake 编译 Qt 安装第三方 libqgit2 扩展</title>
    <link href="http://huyaohui.com/2016/11/11/CMake-bian-yi-Qt-an-zhuang-di-san-fang-libqgit2-kuo-zhan/"/>
    <id>http://huyaohui.com/2016/11/11/CMake-bian-yi-Qt-an-zhuang-di-san-fang-libqgit2-kuo-zhan/</id>
    <published>2016-11-11T08:33:25.000Z</published>
    <updated>2017-01-08T07:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然非常不愿意踏上编译这条不归路, 谁叫我爱折腾跨平台呢.<br>之前一直在搞 Cordova, 不过现在彻底对 H5 跨平台绝望了, 这里不做过多说明了, 可能以后会单独拿出来说道说道.<br>该扯得蛋也扯完了, ok, 进入正题, 编译 Qt 扩展, 坑坑坑…</p>
<a id="more"></a>
<p>这里我以编译<code>libqgit2</code>为例说明</p>
<h2 id="下载安装相关依赖"><a href="#下载安装相关依赖" class="headerlink" title="下载安装相关依赖"></a>下载安装相关依赖</h2><p><a href="http://download.qt.io/official_releases/qt/5.7/5.7.0/" target="_blank" rel="external">download.qt.io 下载 qt-opensource-mac-x64-clang-5.7.0.dmg 安装包</a><br><a href="https://github.com/anselmolsm/libqgit2" target="_blank" rel="external">anselmolsm/libqgit2 下载libqgit2源码</a><br><a href="https://github.com/libgit2/libgit2/releases?after=v0.23.1" target="_blank" rel="external">libgit2/libgit2/releases 下载 libgit2 v0.23.0源码</a></p>
<h3 id="安装-Qt"><a href="#安装-Qt" class="headerlink" title="安装 Qt"></a>安装 Qt</h3><p>傻瓜式安装 Pass…</p>
<p>Ps: 不要忘记了安装目录, 要不就要悲剧了, 不过你不可能这么蠢的对不…</p>
<h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a>编译准备</h3><p>先列出几个遇到的错误, 编译最坑的莫过于各种依赖了, 而且安装方式还不一样</p>
<h4 id="Building-with-Qt4-support"><a href="#Building-with-Qt4-support" class="headerlink" title="Building with Qt4 support"></a>Building with Qt4 support</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-- Building with Qt4 support</div><div class="line">CMake Error at /usr/<span class="built_in">local</span>/Cellar/cmake/3.6.3/share/cmake/Modules/FindQt4.cmake:1328 (message):</div><div class="line">  Found unsuitable Qt version <span class="string">""</span> from NOTFOUND, this code requires Qt 4.x</div><div class="line">Call Stack (most recent call first):</div><div class="line">  CMakeLists.txt:57 (find_package)</div><div class="line"></div><div class="line"></div><div class="line">-- Configuring incomplete, errors occurred!</div><div class="line">See also <span class="string">"/Users/MakeHui/Downloads/libqgit2-master/build/CMakeFiles/CMakeOutput.log"</span>.</div></pre></td></tr></table></figure>
<p>错误原因: 是找不到 Qt 库<br>解决方法: 需要指定 Qt 库的路径</p>
<h4 id="No-libgit2-found"><a href="#No-libgit2-found" class="headerlink" title="No libgit2 found"></a>No libgit2 found</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FATAL_ERROR <span class="string">"No libgit2 found!</span></div><div class="line">Install the libgit2 development files to your system.</div><div class="line">Alternatively define LIBGIT2_SRC_DIR to point to a libgit2 source directory.</div></pre></td></tr></table></figure>
<p>错误原因: 找不到 libgit2 库<br>解决方法: 有两种解决方法</p>
<ol>
<li>安装<code>libgit2</code>库, 但是千万别<code>brew install libgit2</code>这样安装(这个非常坑爹, 差点搞的但都碎了), 原因是这样安装的一定是最新版, 但是<code>libqgit2</code>这个库不支持最新版本的<code>libgit2</code>, 够囧吧(主要还是没什么人维护了, 库原地址: <a href="https://github.com/KDE/libqgit2" target="_blank" rel="external">https://github.com/KDE/libqgit2</a> 有能力的可以去贡献代码)</li>
<li>指定 <code>LIBGIT2_SRC_DIR</code> 参数, 也就是指定<code>libgit2</code>源代码的位置, 直接一并编译安装, 或者你先去手动编译安装一个低版本的<code>libgit2</code>库同样没问题, 这里我推荐直接包含在<code>libqgit2</code>中编译</li>
</ol>
<h4 id="Could-NOT-find-Doxygen"><a href="#Could-NOT-find-Doxygen" class="headerlink" title="Could NOT find Doxygen"></a>Could NOT find Doxygen</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could NOT find Doxygen (missing:  DOXYGEN_EXECUTABLE)</div></pre></td></tr></table></figure>
<p>这个错误不是很懂什么意思, 不过直接<code>brew install doxygen</code>完事<br><a href="http://stackoverflow.com/questions/29846214/could-not-find-doxygen-missing-doxygen-executable-in-mac-os-x" target="_blank" rel="external">http://stackoverflow.com/questions/29846214/could-not-find-doxygen-missing-doxygen-executable-in-mac-os-x</a></p>
<h4 id="修改-CMakeLists-txt-文件"><a href="#修改-CMakeLists-txt-文件" class="headerlink" title="修改 CMakeLists.txt 文件"></a>修改 CMakeLists.txt 文件</h4><p>添加下面两行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> (CMAKE_PREFIX_PATH <span class="string">"/Applications/Qt/5.7/clang_64"</span>)         <span class="comment"># Qt 库的路径</span></div><div class="line"><span class="built_in">set</span> (LIBGIT2_SRC_DIR <span class="string">"/Users/MakeHui/Downloads/libgit2-0.23.0"</span>) <span class="comment"># libgit2 源码的路径</span></div></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>上面的准备工作完成后执行下面的命令开始编译<br>Ps: 先切换到<code>libqgit2</code>源文件根目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Building (out of source build):</span></div><div class="line">$ &gt; mkdir build &amp;&amp; <span class="built_in">cd</span> build</div><div class="line">$ &gt; cmake .. </div><div class="line">$ &gt; cmake --build .</div><div class="line"><span class="comment"># Testing: 可不检查</span></div><div class="line">$ &gt; ctest -V</div><div class="line"><span class="comment"># Install:</span></div><div class="line">$ &gt; cmake --build . --target install</div></pre></td></tr></table></figure>
<p>默认安装路径: <code>/usr/local</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>创建项目Libqgit2Test</li>
<li>打开Libqgit2Test.pro</li>
<li>右键 -&gt; Add Library… -&gt; External library -&gt; continue -&gt; 选择库安装路径 -&gt; continue</li>
<li><p>生成代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">win32:CONFIG(release, debug|release): LIBS += -L$$PWD/../../../../../usr/local/lib/release/ -lqgit2</div><div class="line"><span class="keyword">else</span>:win32:CONFIG(debug, debug|release): LIBS += -L$$PWD/../../../../../usr/local/lib/debug/ -lqgit2</div><div class="line"><span class="keyword">else</span>:unix: LIBS += -L$$PWD/../../../../../usr/local/lib/ -lqgit2</div><div class="line"></div><div class="line">INCLUDEPATH += $$PWD/../../../../../usr/local/include</div><div class="line">DEPENDPATH += $$PWD/../../../../../usr/local/include</div></pre></td></tr></table></figure>
</li>
<li><p>clone远程仓库</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> repository = <span class="keyword">new</span> LibQGit2::Repository();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    repository-&gt;clone(<span class="string">"http://git.famishare.cn/MakeHui/test2.git"</span>, <span class="string">"/Users/MakeHui/Desktop/test3"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">const</span> LibQGit2::Exception&amp; e) &#123;</div><div class="line">    qDebug() &lt;&lt; e.message();</div><div class="line">&#125;</div><div class="line">qDebug() &lt;&lt; repository-&gt;listReferences();</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://doc.qt.io/qt-5/cmake-manual.html" target="_blank" rel="external">http://doc.qt.io/qt-5/cmake-manual.html</a><br><a href="http://blog.claves.me/2015/04/29/cmake/" target="_blank" rel="external">http://blog.claves.me/2015/04/29/cmake/</a><br><a href="http://www.cnblogs.com/listensong/p/4316944.html" target="_blank" rel="external">http://www.cnblogs.com/listensong/p/4316944.html</a><br><a href="https://svn.osgeo.org/ossim/trunk/ossim_package_support/cmake/CMakeModules/FindQt5.cmake" target="_blank" rel="external">https://svn.osgeo.org/ossim/trunk/ossim_package_support/cmake/CMakeModules/FindQt5.cmake</a><br><a href="http://stackoverflow.com/questions/15639781/how-to-find-qt5-cmake-module-on-windows" target="_blank" rel="external">http://stackoverflow.com/questions/15639781/how-to-find-qt5-cmake-module-on-windows</a><br><a href="http://www.cppblog.com/Error/archive/2013/04/13/199407.aspx" target="_blank" rel="external">http://www.cppblog.com/Error/archive/2013/04/13/199407.aspx</a><br><a href="http://blog.csdn.net/u010598445/article/details/46729705" target="_blank" rel="external">http://blog.csdn.net/u010598445/article/details/46729705</a><br><a href="http://stackoverflow.com/questions/29846214/could-not-find-doxygen-missing-doxygen-executable-in-mac-os-x" target="_blank" rel="external">http://stackoverflow.com/questions/29846214/could-not-find-doxygen-missing-doxygen-executable-in-mac-os-x</a><br><a href="http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t" target="_blank" rel="external">http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然非常不愿意踏上编译这条不归路, 谁叫我爱折腾跨平台呢.&lt;br&gt;之前一直在搞 Cordova, 不过现在彻底对 H5 跨平台绝望了, 这里不做过多说明了, 可能以后会单独拿出来说道说道.&lt;br&gt;该扯得蛋也扯完了, ok, 进入正题, 编译 Qt 扩展, 坑坑坑…&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="libgit2" scheme="http://huyaohui.com/tags/libgit2/"/>
    
      <category term="libqgit2" scheme="http://huyaohui.com/tags/libqgit2/"/>
    
  </entry>
  
  <entry>
    <title>简单使用 Apache JMeter 进行压力测试</title>
    <link href="http://huyaohui.com/2016/09/15/jian-dan-shi-yong-Apache-JMeter-jin-hang-ya-li-ce-shi/"/>
    <id>http://huyaohui.com/2016/09/15/jian-dan-shi-yong-Apache-JMeter-jin-hang-ya-li-ce-shi/</id>
    <published>2016-09-15T15:50:10.000Z</published>
    <updated>2016-09-16T13:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter是一个非常流行的性能测试工具, 开源，跨平台,且功能强大, 使用也非常方便, 仅需要安装<code>Java</code>环境支持即可运行.<br>说到我为什么用它, 挺囧的, 没有找到<code>Mac</code>上比较好用的测试工具, 虽然有 <code>ab</code>, <code>http_load</code>这样的控制台工具已经很好用了, 但是你要给你的领导看, 总不能直接截个控制台的图就行了吧, 怎么的也得图文并茂写上三五页的测试报告方能令你的领导满意对吧. 幸运的是<code>Apache JMeter</code>完全能满足我的需要. 升职加薪, 出任CTO赢取白富美, 走上人生巅峰, 指日可待啊!(喂, 大兄弟醒醒, 起来加班了)</p>
<a id="more"></a>
<h2 id="下载-安装-Apache-JMeter"><a href="#下载-安装-Apache-JMeter" class="headerlink" title="下载 安装 Apache JMeter"></a>下载 安装 Apache JMeter</h2><p>Mac 上一条命令搞定, so, easy, 前提是你安装了<code>homebrew</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jmeter</div></pre></td></tr></table></figure>
<h2 id="启动JMeter"><a href="#启动JMeter" class="headerlink" title="启动JMeter"></a>启动JMeter</h2><p>命令行执行下面命令, 就会启动一个图形界面了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jmeter</div></pre></td></tr></table></figure></p>
<h2 id="运行预准备"><a href="#运行预准备" class="headerlink" title="运行预准备"></a>运行预准备</h2><p>现在来对LinuxEye进行压力测试，压力测试对象为随机的几个网页链接，这几个链接是写在一个文本文件中的，在压力测试的时候会随机读取。</p>
<h3 id="建立一个线程组"><a href="#建立一个线程组" class="headerlink" title="建立一个线程组"></a>建立一个线程组</h3><p><img src="https://img.alicdn.com/imgextra/i1/1134915854/TB2drpQXqLB11BjSspkXXcy9pXa_!!1134915854.jpg" alt=""></p>
<p>为什么要建立线程组？原因很简单，因为我们要模拟多个线程（用户）来访问LinuxEye。线程属性部分中，线程数是启动多少个线程，我这里填写的是10，Ramp-Up Period (in seconds)表示线程之间间隔多少时间允许，单位是秒，比如如果填写10，那么10/10=1表示10个线程间每隔1秒钟请求网站。循环次数：60个线程运行完毕算是一次，循环次数就是这样的一个请求过程运行多少次，我这里测试就填写的是2。每次修改一个设置后，别忘记了保存一下。</p>
<h3 id="设置请求服务器、压力链接等信息"><a href="#设置请求服务器、压力链接等信息" class="headerlink" title="设置请求服务器、压力链接等信息"></a>设置请求服务器、压力链接等信息</h3><p>接下来很自然的是，我们要测试的网站地址是什么？链接是什么？所以现在我们就来设置这些信息。右键点击我们刚创建的线程组，在弹出的菜单中，选择添加-&gt;Sampler-&gt;Http请求，弹出如下图界面：</p>
<p><img src="https://img.alicdn.com/imgextra/i3/1134915854/TB2qLpQXr2B11BjSsplXXcMDVXa_!!1134915854.jpg" alt=""></p>
<p>假如你只是对一个链接进行压力测试，直接填写一个链接就ok，比如 <a href="http://www.linuxeye.com" target="_blank" rel="external">http://www.linuxeye.com</a>, 但是大多数情况下都不是这样的，我们这里需要多个链接，就如同刚开始讲到的那样，我们要将多个链接保存到一个文本文件中，然后随机读取进行压力测试。我们可以这么做，如图：</p>
<p><img src="https://img.alicdn.com/imgextra/i3/1134915854/TB2UpNQXATB11BjSspbXXbhcVXa_!!1134915854.jpg" alt=""></p>
<p>在选择一个功能下拉列表中选择_StringFromFile，然后在本机新建一个测试文件C:\Users\root\Desktop\apache-jmeter-2.9\test.txt，在第一行（你也可以不在第一行）的值中填写测试文件的路径，如下图：</p>
<p><img src="https://img.alicdn.com/imgextra/i1/1134915854/TB2WkXQXBjC11BjSszdXXbGFpXa_!!1134915854.jpg" alt=""></p>
<p>然后点击“生成”按钮，在生成按钮的左边文本框中将生成一个字符串如：</p>
<p>${__StringFromFile(C:\Users\root\Desktop\apache-jmeter-2.9\test.txt,,,)}</p>
<p>在test.txt测试文件中，我们每行写一个URL链接，如下格式：</p>
<p>/command<br>/linuxrumen<br>/program<br>/jianzhan<br>/command/cat.html<br>/command/chmod.html<br>/command/lsattr.html<br>注意，每行前面并没有 <a href="http://www.linuxeye.com" target="_blank" rel="external">http://www.linuxeye.com</a> 这样的信息，因为我们在前面已经填写了服务器地址为 www.linuxeye.com, 这里就没必要再为每个url填写这个相同前缀了；另外，上面的url格式也只是个例子，表示域名后的部分。</p>
<p>这样一来，当我们并非请求的时候，就会从test.txt中随机选择url来进行压力测试。</p>
<p>另外值得注意的一个地方是，如果参数中有中文的情况，运行的时候可能会出现乱码，这个时候就需要注意你在Jmeter中的编码设置与你要请求的网页编码是一致的。</p>
<p>路径文本框下面的选项，可以按默认的就成，Use multipart/form-data for HTTP POST是当请求中有附件的情况，一般情况下都不用选中的。</p>
<h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><p>鼠标右键点击线程组，在弹出的菜单中选择添加-&gt;监听器-&gt;用表格查询结果，如下图：</p>
<p><img src="https://img.alicdn.com/imgextra/i4/1134915854/TB2IF8QXyYC11Bjy1zbXXbYLFXa_!!1134915854.jpg" alt=""></p>
<h2 id="属性如下"><a href="#属性如下" class="headerlink" title="属性如下"></a>属性如下</h2><p>列举几个常用监听器索性说明</p>
<h3 id="查看结果树"><a href="#查看结果树" class="headerlink" title="查看结果树"></a>查看结果树</h3><p><img src="https://img.alicdn.com/imgextra/i2/1134915854/TB2MutRXsHA11Bjy0FiXXckfVXa_!!1134915854.jpg" alt=""></p>
<ol>
<li>Sample：每个请求的序号</li>
<li>Start Time：每个请求开始时间</li>
<li>Thread Name：每个线程的名称</li>
<li>Label：Http请求名称</li>
<li>Sample Time：每个请求所花时间，单位毫秒</li>
<li>Status：请求状态，如果为勾则表示成功，如果为叉表示失败。</li>
<li>Bytes：请求的字节数</li>
<li>如果Status为叉，那很显然请求是失败了，但如果是勾，也并不能认为请求就一定完全成功了，因为还得看Bytes的字节数是否是所请求网页的正常大小值，如果不是则说明发生了丢包现象，也不是完全成功。</li>
</ol>
<p>在下面还有几个参数: </p>
<ol>
<li>样本数目：也就是上面所说的请求个数，成功的情况下等于你设定的并发数目乘以循环次数</li>
<li>平均：每个线程请求的平均时间</li>
<li>最新样本：表示服务器响应最后一个请求的时间</li>
<li>偏离：服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布（这个我不是很理解）。</li>
<li>线程组：测试里每个任务都要线程去处理，所有我们后来的任务必须在线程组下面创建。可以在“Test Plan（鼠标右击） -&gt; 添加  -&gt;Threads(Users) -&gt; 线程组”来建立它，然后在线程组面板里有几个输入栏：线程数、Ramp-Up Period(in seconds)、循环次数，其中Ramp-Up Period(in seconds)表示在这时间内创建完所有的线程。如有8个线程，Ramp-Up = 200秒，那么线程的启动时间间隔为200/8=25秒，这样的好处是：一开始不会对服务器有太大的负载。</li>
<li>取样器（Sampler）：可以认为所有的测试任务都由取样器承担，有很多种，如：HTTP请求。</li>
<li>断言：对取样器返回的请求结果给出判断是否正确。</li>
<li>monitor：它的功能是对取样器的请求结果显示、统计一些数据（吞吐量、KB/S……）等</li>
</ol>
<h3 id="集合报告"><a href="#集合报告" class="headerlink" title="集合报告"></a>集合报告</h3><p>PS: 我的测试结果删了, 就不重跑一边截图了, 反正也就是标记一下给自己看</p>
<ol>
<li>#Samples: 也就是图形报表中的样本数目，总共发送到服务器的样本数目。</li>
<li>Average: 也就是图形报表中的平均值，是总运行时间除以发送到服务器的请求数。</li>
<li>Median: 也就是图形报表中的中间值，是代表时间的数字，有一半的服务器响应时间低于该值而另一半高于该值。</li>
<li>90%line: 是指90%请求的响应时间比所得数值还要小。</li>
<li>95%line: 同上</li>
<li>99%line: 同上</li>
<li>Min: 服务器响应的最短时间。</li>
<li>Max: 服务器响应的最长时间。</li>
<li>Error%: 请求的错误百分比。</li>
<li>Throughput: 也就是图形报表中的吞吐量，这里是服务器每单位时间处理的请求数，注意查看是秒或是分钟。</li>
<li>KB/sec: 是每秒钟请求的字节数。</li>
</ol>
<h3 id="图形结果"><a href="#图形结果" class="headerlink" title="图形结果"></a>图形结果</h3><p>PS: 我的测试结果删了, 就不重跑一边截图了, 反正也就是标记一下给自己看</p>
<ol>
<li>数据: 数据分布图</li>
<li>平均: 总运行时间除以发送到服务器的请求数</li>
<li>中值: 代表时间的数字，有一半的服务器响应时间低于该值而另一半高于该值</li>
<li>偏离: 表示服务器响应时间变化、离散程度测量值的大小，或者，换句话说，就是数据的分布</li>
<li>吞吐量: 服务器每分钟处理的请求数</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>功欲善其事, 必先利其器. 合理使用工具, 不重复造轮子, 有利于提升工作效率和和生活品质. 比如说这篇文章内容大部分来自参考内资料中的内容, 我只是对里面的内容进行了一定的修改和补充而已, 甚是美哉.<br>这里需要说明下, 本文章算是转载地址在下面</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://jmeter.apache.org/" target="_blank" rel="external">http://jmeter.apache.org/</a><br><a href="https://blog.linuxeye.com/335.html" target="_blank" rel="external">https://blog.linuxeye.com/335.html</a><br><a href="http://www.cnblogs.com/fnng/archive/2012/12/21/2828440.html" target="_blank" rel="external">http://www.cnblogs.com/fnng/archive/2012/12/21/2828440.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter是一个非常流行的性能测试工具, 开源，跨平台,且功能强大, 使用也非常方便, 仅需要安装&lt;code&gt;Java&lt;/code&gt;环境支持即可运行.&lt;br&gt;说到我为什么用它, 挺囧的, 没有找到&lt;code&gt;Mac&lt;/code&gt;上比较好用的测试工具, 虽然有 &lt;code&gt;ab&lt;/code&gt;, &lt;code&gt;http_load&lt;/code&gt;这样的控制台工具已经很好用了, 但是你要给你的领导看, 总不能直接截个控制台的图就行了吧, 怎么的也得图文并茂写上三五页的测试报告方能令你的领导满意对吧. 幸运的是&lt;code&gt;Apache JMeter&lt;/code&gt;完全能满足我的需要. 升职加薪, 出任CTO赢取白富美, 走上人生巅峰, 指日可待啊!(喂, 大兄弟醒醒, 起来加班了)&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="http://huyaohui.com/categories/Software/"/>
    
    
      <category term="Software" scheme="http://huyaohui.com/tags/Software/"/>
    
      <category term="Apache" scheme="http://huyaohui.com/tags/Apache/"/>
    
      <category term="JMeter" scheme="http://huyaohui.com/tags/JMeter/"/>
    
  </entry>
  
</feed>
