<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MakeHui&#39;s 超平和バスターズはずっとなかよし</title>
  <subtitle>あの日見た花の名前を僕達はまだ知らない。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huyaohui.com/"/>
  <updated>2019-12-10T15:08:11.379Z</updated>
  <id>http://huyaohui.com/</id>
  
  <author>
    <name>MakeHui</name>
    <email>hulifu521003@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 诡异横屏 BUG 解决思路全记录 以及一些对软件开发的思考</title>
    <link href="http://huyaohui.com/2019/12/09/iOS-gui-yi-heng-ping-BUG-jie-jue-si-lu-quan-ji-lu-yi-ji-yi-xie-dui-ruan-jian-kai-fa-de-si-kao/"/>
    <id>http://huyaohui.com/2019/12/09/iOS-gui-yi-heng-ping-BUG-jie-jue-si-lu-quan-ji-lu-yi-ji-yi-xie-dui-ruan-jian-kai-fa-de-si-kao/</id>
    <published>2019-12-09T06:30:58.000Z</published>
    <updated>2019-12-10T15:08:11.379Z</updated>
    
    <content type="html"><![CDATA[<p>“如果代码执行结果和预期不一致, 那么不用质疑肯定是你那里写错了”, 前辈当前如是说到<br>软件行业经过这么多年的变革, 感觉软件质量反而不如当年了(这里我说的软件质量不过说的是应用软件, 还包含操作系统层面), 不过这只是一个前言而已, 抛砖引玉而已, 暂时放下不表, 我留到最后再来谈谈我的看法</p>
<a id="more"></a>
<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>这里我会分成三个步骤进行处理</p>
<ul>
<li>列出问题症状</li>
<li>分析问题可能原因</li>
<li>最终找到并解决问题</li>
</ul>
<h3 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h3><p>前置常量</p>
<ul>
<li>PA: 页面 A, 竖屏</li>
<li>PB: 页面 B, 横屏</li>
<li>PA 是主项目中的页面</li>
<li>PB 是 Framework 中的页面</li>
<li>PA 以 Link Binary with Libraries 的方式引用 PB</li>
</ul>
<h4 id="复现-1"><a href="#复现-1" class="headerlink" title="复现 1"></a>复现 1</h4><p>变量</p>
<ul>
<li>iOS 10</li>
</ul>
<p>流程</p>
<ul>
<li>PA 进入 PB, 此时 PB 页面显示正常</li>
<li>PB 退出回到 PA, 此时 PA 亦是正常</li>
<li>PA 再次进入 PB, 此时 PB 显示异常, 此时为竖屏</li>
<li>PB 再次退回到 PA, 此时 PA 还是正常的, 也就是说, 仅是 PB 存在问题</li>
<li>退到桌面再回到 App, 问题恢复到 step 1(这里也是非常诡异, 不过之后我会解释)</li>
</ul>
<p>PS: 就上面的症状来看, 你是不是认为问题肯定处在 PB 上了, 真是 Naive 啊, 我也差点掉到坑里去了</p>
<h4 id="复现-2"><a href="#复现-2" class="headerlink" title="复现 2"></a>复现 2</h4><p>变量</p>
<ul>
<li>iOS 13</li>
</ul>
<p>流程</p>
<ul>
<li>PA 进入 PB, 此时 PB 页面显示正常</li>
<li>PB 退出回到 PA, 此时 PA 亦是正常</li>
<li>PA 再次进入 PB, 此时 PB 显示异常, 次数页面显示为横屏, 但是里面的布局却是安装竖屏的方式布局的( PB 使用的绝对布局)</li>
<li>PB 再次退回到 PA, 此时 PA 还是正常的, 也就是说, 仅是 PB 存在问题</li>
<li>退入桌面再回到 App, 问题恢复到 step 1</li>
</ul>
<p>PS: 症状有些不同, 此时你肯定又会去怀疑是不是操作系统的问题了呢, 还是 Native</p>
<h4 id="无法复现"><a href="#无法复现" class="headerlink" title="无法复现"></a>无法复现</h4><ul>
<li>在 iOS 12 中时无法复现</li>
<li>当 PB 不是以 Link Binary with Libraries 的方式引用的时候无法复现</li>
</ul>
<p>PS: 看似是一个小问题, 坑是真的不少</p>
<h3 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h3><p>下面按照我当时判断的可能性进行排序, 可能性高大放在前面</p>
<ul>
<li>Library Linker 的问题(我曾经遇到很多诡异的问题都是因为库连接器导致的, 这次我理所当然的也这么认为, 但是如果真是这个原因, 那就很难办了)</li>
<li>iOS 系统 BUG(因为在 iOS 12 上是正常的, 但是怀疑是系统 BUG 是没什么意义的, 即便是系统 BUG 你照样需要去解决)</li>
<li>代码层面的问题, 排查个个环节(详见下图)</li>
</ul>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>如果你认为我会安装上面我认为的可能原因去解决这个 Bug 那就大错特错了<br>上面我认为的可能原因, 不管是按照哪条去排查无疑都是工作量巨大, 特别还是遇上了前人留下来的代码山(PB), 更是难上加难</p>
<h4 id="以堵代疏"><a href="#以堵代疏" class="headerlink" title="以堵代疏"></a>以堵代疏</h4><p>俗话说得好堵不如疏, 但是在软件行业恰恰是反其道而行的, 常常是能堵上漏洞就已是大功一件了(虽然我现在也打算这么干, 但是我仍然觉得这是一件很操蛋的事)<br>这里先不去管可能原因, 仅针对表象进行处理</p>
<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>由上得到可用信息如下:</p>
<ul>
<li>PB 采用固定布局</li>
<li>PB 可以横屏, 但布局为竖屏(大雾~)</li>
</ul>
<p>方案: 找出所用用到屏幕长和宽的代码, 替换为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 竖屏的屏幕宽和高</div><div class="line">width = MAX(view.width, wiew.height)</div><div class="line">height = MIN(view.width, wiew.height)</div></pre></td></tr></table></figure>
<p>找到宽和高的宏定义 -&gt; 替换代码 -&gt; 重新编译 -&gt; 运行</p>
<h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><ul>
<li>PB 中的代码并不是严格的使用宏中的宽和高</li>
<li>症状并不完全是按照<code>可以横屏, 但布局为竖屏</code>, 这个是致命问题</li>
</ul>
<p>首先, 这个方案是失败, 但是并不妨碍我认为这个方案是可行的<br>其次假设如果 有第 2 条这个致命问题的话, 或许我真的会把所用用到屏幕长和宽的代码, 都替换一遍</p>
<h4 id="一些尝试"><a href="#一些尝试" class="headerlink" title="一些尝试"></a>一些尝试</h4><ul>
<li>使用新版本编译系统, 重新编译 PB Framework</li>
<li>调高 PB Target 版本号</li>
</ul>
<p>以上均失败(能成功就有鬼了)</p>
<h4 id="可能原因排查"><a href="#可能原因排查" class="headerlink" title="可能原因排查"></a>可能原因排查</h4><p>能想到的黑招都使用了, 这下就只能老老实实的按照可能原因去排查了, 但不要以为我会按照上面的顺序去排查</p>
<h5 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h5><p>首先按照苹果的标准来做, 要对页面进行旋转, 就必须在页面中实现<code>shouldAutorotate</code>和<code>supportedInterfaceOrientations</code>这两个方法, <code>shouldAutorotate</code>设置为<code>true</code>, <code>supportedInterfaceOrientations</code>设置为需要旋转到的方向, 横屏<code>UIInterfaceOrientationMaskLandscapeRight</code>, 竖屏<code>UIInterfaceOrientationMaskPortrait</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (BOOL)shouldAutorotate</div><div class="line">&#123;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIInterfaceOrientationMask)supportedInterfaceOrientations</div><div class="line">&#123;</div><div class="line">    return UIInterfaceOrientationMaskPortrait;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开 Find Navigator 输入 <code>shouldAutorotate</code>, <code>supportedInterfaceOrientations</code> 疯狂 Next<br>一通操作猛如虎, 一看结果 0/5</p>
<h5 id="排查流程"><a href="#排查流程" class="headerlink" title="排查流程"></a>排查流程</h5><p>按照上图中列出的流程, 根据<code>ViewController</code>的生命周期, 查询是否有代码影响到了屏幕的旋转<br>这里不卖关子了, 问题找到了, 我大致的罗列一下关键的代码</p>
<p>PA:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PB:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    [self interfaceOrientation:UIInterfaceOrientationLandscapeRight];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    [self interfaceOrientation:UIInterfaceOrientationLandscapeRight];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)interfaceOrientation:(UIInterfaceOrientation)orientation</div><div class="line">&#123;</div><div class="line">    if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) &#123;</div><div class="line">        SEL selector             = NSSelectorFromString(@&quot;setOrientation:&quot;);</div><div class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];</div><div class="line">        [invocation setSelector:selector];</div><div class="line">        [invocation setTarget:[UIDevice currentDevice]];</div><div class="line">        int val                  = orientation;</div><div class="line">        [invocation setArgument:&amp;val atIndex:2];</div><div class="line">        [invocation invoke];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面列出的关键代码, 想必大家已经能看出问题处在那里了<br>看到上面的代码瞬间就茅塞顿开(至少大部分的问题已经能解释通了), 万恶的黑魔法, 老是有人使用一些奇技淫巧来解决问题(这里我并不是要抨击这种行为, 其实我也经常会这么干, 但是还是那句话我并不喜欢, 这个到最后再来谈谈我的看法)</p>
<h4 id="原因梳理"><a href="#原因梳理" class="headerlink" title="原因梳理"></a>原因梳理</h4><p>PA 进入 PB -&gt; PB 调用 <code>interfaceOrientation:</code><br>这时还是正常的, 尽管这里使用了黑魔法</p>
<p>PB 返回 PA -&gt; 页面显示正常<br>其实在这里就已经出现问题了, 通过黑魔法改变的值并没有改回来, 当再次进入 PB, 调用<code>interfaceOrientation:</code>, 黑魔法失效了(我猜测的原因是重复设置同一个值时, 无法触发系统判断此时应该需要进行旋转操作了, 这个没有找到可以验证的方法)</p>
<h4 id="一些未解之谜"><a href="#一些未解之谜" class="headerlink" title="一些未解之谜"></a>一些未解之谜</h4><ul>
<li>iOS 10, 和 iOS 13 Bug 表现不一样的问题</li>
<li>在 iOS 12 中时无法复现</li>
<li>当 PB 不是以 Link Binary with Libraries 的方式引用的时候无法复现</li>
</ul>
<p>上面的原因都可以通过使用了黑魔法这个原因来解释吗?(没有检验的方法)<br>我在这里持保留意见</p>
<h2 id="一些对软件开发的思考"><a href="#一些对软件开发的思考" class="headerlink" title="一些对软件开发的思考"></a>一些对软件开发的思考</h2><p>上面写了这么多, 看似没什么用, 其实暴露出了很多的问题<br>在我个人来看其实不应存在这种问题, 如果每个人都按照标准流程去处理, 无论是程序员之间的代码通讯还是代码和系统底层进行通讯, 出离奇问题的概率应该会大大减少, 即使出现了网上也大概率能找到相似的问题<br>那么程序员们到底是为什么要如此做呢? 难道他们就不清楚会导致这个结果吗?<br>有太多问题需要解释, 但又无从解释, 不过我还是想尝试强行解释一下, 对不对就随他去了</p>
<h3 id="系统层之罪"><a href="#系统层之罪" class="headerlink" title="系统层之罪"></a>系统层之罪</h3><p>苹果的软件质量下滑, 想必大家都是有目共睹的, 下面我就随便举一些我遇到过的例子(只讲开发中的问题, 苹果的系统应用问题这里不聊)</p>
<ul>
<li>在 App 中没法调用 Framework 中的类和方法, 至今我没能找到问题所在(换公司电脑同样的操作却没问题), 即便是强制加载 Framework 也仍然是行不通</li>
<li>AutoLayout 在 UITableViewCell 中进行 UILabel 的横向布局, 第一个 UILabel 会被压缩, 但是在 UIView 中确实正常的</li>
<li>在 Storyboard 中的 UITableView 如果 UITableViewCell 的个数超过一屏的话, 超出的 UITableViewCell 的 AutoLayout 的显示会出错, 但是在实际的运行中却是正常的</li>
<li>Debug 断点的时候首次触发断点, 你永远不知道它在那里 loading 什么东西, 为什么要那么久</li>
<li>Leaks, View UI Hierarchy 等工具, 开发了一万年, 用起来仍然是各种卡, 各种崩溃</li>
<li>Xcode 10 导致 iOS 9.2 崩溃的问题, Xcode 10.1 上线了明明写着修复了, 问题依旧(最后的说法貌似是在服务器端修复了, 我没有得到可靠的消息, 无法证实)</li>
<li>相同的代码经常在不同的 iOS 版本中的表现不一致(这里不做详细的描述)</li>
</ul>
<p>上面我仅仅是列举除了一些影响正常开发的问题, 一些不影响开发的小问题简直懒得说了<br>这些我想足够能解释为什么我会认为是系统的问题了吧<br>当然这并不是要把一切问题都甩给系统, 而是当系统层经常性不稳定时, 开发者就会自然而然的对系统产生不信任感, 从而影响到开发者自身对问题的判断, 以至于被引导到一条死胡同里</p>
<h3 id="开发者之罪"><a href="#开发者之罪" class="headerlink" title="开发者之罪"></a>开发者之罪</h3><p>试想一下, 当一个不懂互设计, 甚至连<code>UIKit</code>都没听说个的人, 设计出来的页面, 然后再交给一个三流的程序员去开发(没有贬低的意思, 我也是三流程序员), 结果可想而知<br>问题不在于是否存在问题, 而是在于整个生产环境就是不健康的, 导致整条流水线上的人都很浮躁, 只想着守着自己的一亩三分地, 不愿改变也不想改变, 最后的结果就是, 先来的坑后来的, 后来的继续坑下去, 进入死循环<br>以至于愿意改变和学习的人也被大环境的洪流给拉下了水, 比如你去接手前辈们留下来的代码(垃圾山), 你会如何做呢, 是重写(重构几无可能, 能进行重构的代码表示还是有大致的设计的), 还是继续往垃圾山中倾倒垃圾呢? 我想答案不言自明了<br>至于什么代码写的好就随时都能被替代这种说法我就不想说什么了, 随它去了</p>
<h3 id="开发模式之罪"><a href="#开发模式之罪" class="headerlink" title="开发模式之罪"></a>开发模式之罪</h3><p>业界从传统软件开发迈向现代软件开发过程中, 疯狂的强调这<code>Change</code>, <code>Runing</code>, <code>More</code><br>我不能说这是错的, 其实我反倒是赞同现在软件开发模式的, 但是并不能因为我赞同就不去讨论这里面存在的问题了<br>当敏捷软件开发大行其道的时候, 效率虽然得到了提升, 各种新的特性被加入到了软件中, 这是一件好事, 但是伴随着这些明显的好处带来的确实软件的质量的不断的下滑<br>比如什么不影响使用的 Bug 可以暂时性的忽略, 先上线, 但是最后的结果就变成了, 这个 Bug 伴随着软件走向了终结都没能去解决(并不是没能力解决), 新特性却是一大堆, 而新的特性随之又带来了新的 Bug 以至于把开发者带入了 Bug 泥潭, 最终逼迫开发人员用脚投票放弃高质量代码</p>
<p>再次重申一下我是赞同现代软件开发的, 当然我现在也不知道这算不上是一个问题, 因为这完全可以通过人治的方式解决, 比如工作量的精准量化(尽量小的安排工作量, 0.5 天一个迭代), Bug 过多, 可以安排一整个大的迭代周期进行修复, 代码优化重构可以一定的周期进行一次, 或者每个大周期进行一次, 总归来说还是人治的成分在里面, 需要管理人员有很强的业务能力(了解开发和产品细节, 了解开发人员的能力, 能够把握开发的节奏), 在小型的团队中很难找到这样的人来总览全局, 小型团队中更多的是突击型的开发人员, 如何让这种类型的开发者参与到敏捷开发总来, 而且能够高产出和高质量代码都兼顾还不能对管理人员的要求太高<br>要找出这种情况适用的方案的解, 虽然有点强人所难, 但是我觉得真是因为有困难我们才更应该去解决, 毕竟程序员就是一群专门解决问题的人, 不是吗?</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论软件行业如何变化, 作为程序员的我们应该做也必须做的就不断的学习和思考, 并努力写出优秀的代码去影响后来者, 实现正循环<br>与君共勉</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“如果代码执行结果和预期不一致, 那么不用质疑肯定是你那里写错了”, 前辈当前如是说到&lt;br&gt;软件行业经过这么多年的变革, 感觉软件质量反而不如当年了(这里我说的软件质量不过说的是应用软件, 还包含操作系统层面), 不过这只是一个前言而已, 抛砖引玉而已, 暂时放下不表, 我留到最后再来谈谈我的看法&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Think" scheme="http://huyaohui.com/tags/Think/"/>
    
      <category term="Objective-C" scheme="http://huyaohui.com/tags/Objective-C/"/>
    
      <category term="Framework" scheme="http://huyaohui.com/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>Gitnoter 项目弃就一个坑</title>
    <link href="http://huyaohui.com/2019/04/27/Gitnoter-xiang-mu-qi-jiu-yi-ge-keng/"/>
    <id>http://huyaohui.com/2019/04/27/Gitnoter-xiang-mu-qi-jiu-yi-ge-keng/</id>
    <published>2019-04-27T11:46:15.000Z</published>
    <updated>2019-04-27T11:52:35.659Z</updated>
    
    <content type="html"><![CDATA[<p>做一件事中是得要有始有终对不, 虽然我的标题是<code>弃就一个坑</code>, 单这不妨碍我对这个项目做一个称重的总结, 对就是挺沉重的</p>
<a id="more"></a>
<h2 id="为什么要启动这个项目"><a href="#为什么要启动这个项目" class="headerlink" title="为什么要启动这个项目"></a>为什么要启动这个项目</h2><h3 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h3><blockquote>
<p>依稀记得应该是<code>2016</code>, 印象笔记更改了收费模式, 每个账号只能绑定两个设备同步数据<br>本来这应该是件很正常不过的事, 确实轻度用户使用影响笔记免费版实在是太爽了, 根本就没必要付费, 但是他偏偏要美其名曰的说, 绝大多数用户都只有两个设备, 这就让人很恼火了, 搞得全是用户的错, 难道设备数超过了两个, 就直接砸了吗? 想盈利就明说就是了, 根本就没必有拐着弯骂人</p>
</blockquote>
<h3 id="替代产品"><a href="#替代产品" class="headerlink" title="替代产品"></a>替代产品</h3><p>当时想的是找替代品并不是要自己开发, 有几个有这个闲心情的呢, 做出来没人关注, 浪费时间</p>
<ul>
<li>有道笔记: 应用不好用, 还有你广告, 而且还经常数据同步失败 丢失什么的, 总结一句话就是除了免费就是一无是处的垃圾(现在是什么情况不清楚, 这是我当前用的时候的感想)</li>
<li>蚂蚁笔记: 号称是专为程序员设计的笔记, 我看就只有这么个噱头了, 不是很好用, 而且还是订阅制, 如果是买断制的话还真会考虑讲究这用</li>
<li>为知笔记: 还算好好用, 但是还是订阅制, 不订阅只能本地使用</li>
<li>Ulysses: 体验好, 但不跨平台, 而且是订阅制(这个算是黑点了)</li>
<li>MWeb: 好用也是买断制, 但是还是不跨平台</li>
</ul>
<p>我心中的完美解决方案:</p>
<ul>
<li>Markdown</li>
<li>云同步</li>
<li>全平台 PC/Mobile</li>
<li>买断/免费 (对于轻量用户来说, 订阅制太亏了, 这也是我要弃用印象笔记的原因)</li>
</ul>
<h2 id="关于技术选型"><a href="#关于技术选型" class="headerlink" title="关于技术选型"></a>关于技术选型</h2><p>首先肯定是直接看一些开源的解决方案</p>
<h3 id="存储库"><a href="#存储库" class="headerlink" title="存储库"></a>存储库</h3><blockquote>
<p>我第一个想到的就是使用<code>git</code>来作为存储库, 这样可以依托<code>github</code>来存储数据了(简直天才), 而且恰好就有一个这样的跨平台的<code>git</code>客户端库<code>libgit2</code>(简直完美)</p>
</blockquote>
<h3 id="桌面端解决方案"><a href="#桌面端解决方案" class="headerlink" title="桌面端解决方案"></a>桌面端解决方案</h3><blockquote>
<p>最开始我的打算是分平台去实现相关的业务逻辑, 就我一个人搞, 业务量巨大<br>该死的我又不死心的去搞挺跨平台(博主之前就是搞跨平台开发的, 从此对跨平台深恶痛绝)<br>最后我闲着了<code>Qt</code>跨平台开发, 当时我想的就是, <code>Qt</code>毕竟是<code>Cpp</code>库, 怎么滴性能也不会太差吧, 而且能支持全平台, 这个完美符合我的要求(后来事实证明我还是太年轻了, 被坑的还是不够惨, 先按下不表)</p>
</blockquote>
<h3 id="移动端解决方案"><a href="#移动端解决方案" class="headerlink" title="移动端解决方案"></a>移动端解决方案</h3><blockquote>
<p>自从中了<code>Qt</code>的毒后我就一心扑到<code>Qt</code>上了, 最后采用了<code>v-play</code>的移动端解决方案, 刚开始看了他们几个demo应用后还沾沾自喜, 这东西还真挺不错的, 居然还能内嵌<code>cocos2d-x</code><br>我其中的一个方案是用<code>cocos2d-x</code>来做跨平台开发, 博主这时大喜, 心想如果这个不行还能使用<code>cocos2d-x</code>来开发呢(呵呵…天真)</p>
</blockquote>
<h2 id="关于问-S-题-B"><a href="#关于问-S-题-B" class="headerlink" title="关于问(S)题(B)"></a>关于问(S)题(B)</h2><p>写作<code>问题</code>, 读作<code>SB</code>, 也就不怕别人笑话了, 奏这样了</p>
<h3 id="libgit2"><a href="#libgit2" class="headerlink" title="libgit2"></a>libgit2</h3><p>关于这个库折腾了还几次, 整个大概经历了一两年: <a href="https://huyaohui.com/tags/libgit2/">https://huyaohui.com/tags/libgit2/</a></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul>
<li><a href="https://huyaohui.com/2016/11/11/CMake-bian-yi-Qt-an-zhuang-di-san-fang-libqgit2-kuo-zhan/">QCMake 编译 Qt 安装第三方 libqgit2 扩展</a></li>
<li><a href="https://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/">Qt Creator 编译第三方扩展库</a></li>
</ul>
<blockquote>
<p>前后经历了两次不同方式的编译, 当时我还沾沾自喜, 以为找到了正确的编译姿势<br>呵呵…现在看来其实两种编译方式根本没什么区别</p>
</blockquote>
<h4 id="无法使用"><a href="#无法使用" class="headerlink" title="无法使用"></a>无法使用</h4><ul>
<li><a href="/2017/01/08/Libqgit2-clone-error-unable-to-lock-mwindow-mutex/">Libqgit2 clone error “unable to lock mwindow mutex”</a></li>
</ul>
<blockquote>
<p>先声明一下, 上面我写的这些都是在放屁, 其实根本不是这么回事<br>原因简单的要死, 就是因为我没有开启线程, 说到底还是没有仔细阅读文档</p>
</blockquote>
<h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><blockquote>
<p>也不知道怎么原因官方 api 中没提供直接 push 的方法<br>尽管网上有人写了 push 功能的代码, 但是尽管尝试后, 均已失败告终(这是在当时那个时间节点的事, 在我暂停编码后, 有人开源了一些基于 libgit2 的 cpp 封装实现)<br>最后在 libgit2 的作者拒绝掉的 PR 中找到了某人写的示例代码, 目前使用的还是这份代码, 当你看到这份代码是别拒绝的就应该知道其实写的不是很好, 仅仅就是能用而已<br>就在我放弃这个项目之前, 我还尝试使用 cpp 封装的 libgit2 来解决 push 问题(尽管这份代码仍然存在问题, 但是问题已经不大了), 说再多也没啥diao用了, 弃坑了</p>
</blockquote>
<h3 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h3><h4 id="平台表现"><a href="#平台表现" class="headerlink" title="平台表现"></a>平台表现</h4><blockquote>
<p>个个不同的平台之间的表现不同, 坑的一批<br>虽然应该遵循, 不同平台按照不同的表现走, 但是也不能太丑了吧, 简直可以用丑到爆炸来形容了, 特别是在 Linux 平台上<br>最后不得不用 QSS 来处理平台表现问题, 而且在不同平台还存在兼容性的问题, 简直没法活了</p>
</blockquote>
<h4 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h4><blockquote>
<p>由于新版本的 Qt 不再支持<code>webview</code>所以只能用<code>WebEngine</code><br>偏偏<code>WebEngin</code>又大的一p, 最终权衡选择了使用<code>TextBrowser</code>来实现<br>坑爹开始了, 这玩意不支持<code>CSS</code>, <code>JavaScript</code>和一些<code>html</code>的基本特性<br>当然这也不怪他, 设计出来就不是为了干这些事的</p>
</blockquote>
<h5 id="接管图片显示"><a href="#接管图片显示" class="headerlink" title="接管图片显示"></a>接管图片显示</h5><blockquote>
<p>由上面可知得自己来处理图片的显示<br>OK 一同操作后先把图片下载下来然后替换掉 src 的<code>web image</code>到本地图片地址<br>难度不算大虽然性能差点勉强算是解决了, 难道你以为这就 ojbk 了吗, 还是太年轻, 接着往下看</p>
</blockquote>
<h5 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h5><blockquote>
<p>由于<code>TextBrowser</code>不支持相对布局属性, 比如: <code>width=&quot;80%&quot;</code>这样的写法<br>我不得不在插入图片的时候动态去计算图片的显示范围, 否则图片很大的话就会显示非常难看, 而且会超出显示框的显示大小, 继续 ojbk 你以为又搞定了, 仍然是<code>图样</code><br>图片大小不能使用相对大小的直接问题就是当你窗口大小改变后, 你就必须要重新计算一遍大小, 否则还是会出现之前一样的问题, 但是重新计算有会有新的问题, 如果你文档中的图片数量过多的话计算起来就会非常慢, 特别是在<code>window</code>平台上提别明显<br>随之有得在<code>window</code>平台上加多一个机制, 就是在拖动更改窗口大小时, 只有在松开鼠标时才重新计算, 体验略差, 但是勉强就不卡了</p>
</blockquote>
<h3 id="v-play"><a href="#v-play" class="headerlink" title="v-play"></a>v-play</h3><blockquote>
<p>先来说下<code>v-play</code>是个什么玩意儿, 这玩意是基于<code>Qt Quick</code>的一个移动端游戏解决方案, 同时还能做界面开发, 因为它实现了一些<code>UI</code>开发中常用的空间, 使用起来还是不错的, 当然这也是一个坑而已<br>为什么说这玩意是个坑呢, 性能是真的差, 别看他们<code>demo</code>写的是挺不错的实际你用起来之后会发现是真的卡, 如果是做一些轻量级的展示类型的项目我想还是可以用的, 如果交互性太强了, 那就垃圾吧倒吧<br>其实如果是轻量级的展示类型的项目那么为什么不用<code>RN</code>呢, 这东西连<code>Qt</code>官方都不怎么上心去完善(当然我指的是<code>QtQuick</code>, <code>v-play</code>做的够好了)</p>
</blockquote>
<h3 id="cocos2d-x"><a href="#cocos2d-x" class="headerlink" title="cocos2d-x"></a>cocos2d-x</h3><blockquote>
<p>这里顺带一提, 期间我有段时间想用这东西来搞跨平台开发(博主之前就是用这东西混了一段时间饭吃), 现在想想还好没用, 要不然不知道又要遇到多少坑呢</p>
</blockquote>
<h2 id="说说为什么弃坑"><a href="#说说为什么弃坑" class="headerlink" title="说说为什么弃坑"></a>说说为什么弃坑</h2><blockquote>
<p>说到为什么弃坑这就不得不说说自己的经历了, 就在我决定开发这个项目之前, 我参加并主导了一个创业项目, 当然是以失败告终的, 要不然我也不会开始这个项目的, 毕竟这个东西肯定是赚不到钱的<br>那么又为什么要做呢, 这就要说到我性格了, 想做的事就一定会想着去做, 就像本项目一样, 虽然16年就想做了, 但是还是等到了17年才开始做, 期间做了大量的调研和准备工作, 如果不是创业失败也许不知道什么时候会开始这个项目<br>搞了半天还是没有说为什么弃坑呢, 这就来了<br>经历过创业失败和开发该项目遇到的问题的双重打击下, 我到是想明白了很多事, 人也通透多了<br>任何事情都不是做了就一定要等待一个结果的, 其实人生中有很多事是没有什么所谓的结果<br>或许弃坑也是一种结果呢, 是吧<br>迈出这一步虽然不容易, 但是决定迈出去后, 反而人清爽了许多, 每个人的精力和能力都是有局限性的<br>没有为自己辩解的意思, 随着年龄的增长, 对事物看法逐渐的趋于平和了, 对事物的看法反而更透彻了, 不再盲目的跟风和特立独行(表面上的)了<br>想说的很多, 但文笔有限, 那么就这样了吧</p>
</blockquote>
<h3 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h3><blockquote>
<p>无论做什么都是要有一个契机的, 我弃坑这件事也是如此<br>事情是这样的, 平常我是会关注一些微博上的技术博主的, 他们经常会推荐一些比较好用的框架和应用什么的<br>就在前段时间(据我动手写这篇博文已经过去很久了), 看到今天我要说的这个项目<br><a href="https://github.com/tamlok/vnote" target="_blank" rel="external">tamlok/vnote</a>这个也是用<code>Qt</code>开发的</p>
<p>先来提取几个关键字</p>
<ul>
<li>项目起始时间: 2017年</li>
<li>star: 4455(写到这里去看了一下, 应该比我当时看到要多出不少)</li>
<li>Qt</li>
<li>markdown</li>
<li>WebEngine</li>
</ul>
<p>从中看出来和我这个项目很相似, 但是选型上就有很大不同了, 我选择的是纯cpp开发, 而该作者这是完全是依托于 WebEngine<br>先来说说各自的优缺点<br>我的方案的好处就是性能高, 包体小, 缺点可用的轮子少, 集成难度大<br>vnote 则和我的方案恰好相反, 好处是轮子多, 集成难度小, 缺点就是性能相对略差, 包体大<br>其实开始我也想过使用 vnote 这样方案, 但是性能差这点实在是不能忍的虽然我的<code>markdown preview</code>这块的逻辑性能也比较差, 但是优化一下还是可以的, 而且我正在尝试用<code>zserge/webview</code>该库的解决方案来处理我这块的逻辑, 即解决的性能问题, 也解决了包体大小的问题, 但是一切都完了, 我弃坑了<br>能获得这么多的 star, 肯定比我牛, 我相信 vnote 的作者也是能想到我想到的这些问题的, 至于他是什么想法我到是也不想去探寻了<br>这里顺便一提, 为知笔记用的也是用的 Qt WebEngine</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>如果有人说是我垃圾不会用<code>Qt</code>的话, 我承认我确实用不好<br>好了这次就真的这样, 没什么要说的了</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做一件事中是得要有始有终对不, 虽然我的标题是&lt;code&gt;弃就一个坑&lt;/code&gt;, 单这不妨碍我对这个项目做一个称重的总结, 对就是挺沉重的&lt;/p&gt;
    
    </summary>
    
      <category term="Think" scheme="http://huyaohui.com/categories/Think/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Think" scheme="http://huyaohui.com/tags/Think/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins iOS 打包并上传至蒲公英</title>
    <link href="http://huyaohui.com/2019/04/19/Jenkins-iOS-da-bao-bing-shang-chuan-zhi-pu-gong-ying/"/>
    <id>http://huyaohui.com/2019/04/19/Jenkins-iOS-da-bao-bing-shang-chuan-zhi-pu-gong-ying/</id>
    <published>2019-04-19T02:04:54.000Z</published>
    <updated>2019-11-17T05:02:33.774Z</updated>
    
    <content type="html"><![CDATA[<p><code>CI/CD</code> with <code>Jenkins</code> 折腾良久用于还是给我搞掂了, 下面就来说说我到底是怎么淌过这些坑的(真心就是不停的淌坑, 简直毫无乐趣可言, 不过淌完后还是很畅快的:-D)</p>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>这里不得不先来说下步骤, 因为每一步都非常重要, 稍不注意都会 GG</p>
<ol>
<li>安装 Java</li>
<li>安装 Jenkins</li>
<li>配置 ssh key</li>
<li>Xcode 相关配置(这里神坑)</li>
<li>Command 编译, 打包脚本(这里照样坑的一匹)</li>
<li>上传安装包至<code>蒲公英</code></li>
<li>使用 Jenkins 自动化</li>
</ol>
<h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><p>再次<strong>温馨提示</strong>: 请务必按照步骤来</p>
<h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><p>本来这里没什么好说的一个命令搞定的事<br>但是众所周知 Oracle 开始对 Java 收费, 现在安装 Java 会出现一些麻烦, 不过可以到网上找到一些镜像</p>
<p><strong>注意:</strong> 这里最好安装 <code>OracleJava8</code>, 我尝试了 <code>OpenJava12</code> 并不行</p>
<h3 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3><p>Java 安装好后这里基本就没啥好说的了, 到官网下载对应平台的的二进制文件安装, 无脑 next 就行</p>
<p>使用<code>homebrew</code>进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">brew install jenkins</div><div class="line"></div><div class="line"># 启动</div><div class="line">cd cd /usr/local/Cellar/jenkins/&#123;version&#125;/libexec</div><div class="line">java -jar ./jenkins.war</div></pre></td></tr></table></figure>
<p><strong>注意:</strong> 按理说二进制安装后<code>Jenkins</code>的服务会自动启动并打开, 但是我遇到了他自己没有启动的情况, 这里就需要自己检查一下端口占用的问题了, 我的情况是<code>8080</code>端口被我安装的<code>Docker</code>给占用了, 这时可以关闭<code>Docker</code>或者更改<code>Jenkins</code>的端口, 更改方式我这里就不给出了, 可以自行搜索</p>
<h4 id="Jenkins-配置"><a href="#Jenkins-配置" class="headerlink" title="Jenkins 配置"></a>Jenkins 配置</h4><p>奏是按照提示无脑下一步</p>
<p>第一次进入会告诉你需要输入密码, 按照提示打开改路径下的文件密码就在里面, 填入就行<br>记住需要使用<code>sudo</code>才能打开, 否则没权限(当然密码在你启动<code>Jenkins</code>的时候其实就已经显示在控制台了, 仔细查看还是能找到的)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cat /Users/wsh/.jenkins/secrets/initialAdminPassword</div></pre></td></tr></table></figure>
<p>选择安装建议插件, 我这个用到的就只有<code>shell</code>和<code>git</code></p>
<p>建议创建一个新的账号, 如果你奏是像用<code>root</code>账号登录的话, 那么我告诉你密码就是<code>initialAdminPassword</code>里的那个长串</p>
<h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h3><p>请看我的另一篇<code>Blog</code>: <a href="https://huyaohui.com/2015/12/31/SSH-keys-gong-yue-pei-zhi-yu-shi-yong/">SSH keys 公钥配置与使用</a></p>
<p><code>github</code>公钥配置上文中已给出, 其他平台的配置方法大同小异, 这里不赘述,可执行搜索</p>
<h3 id="Xcode-相关配置-这里神坑"><a href="#Xcode-相关配置-这里神坑" class="headerlink" title="Xcode 相关配置(这里神坑)"></a>Xcode 相关配置(这里神坑)</h3><p><strong>如果是在你自己的开发机上进行编译的话, 那你可能就不会遇到这些问题, 不过最好还是看下以供参考</strong></p>
<ul>
<li>Macos: 10.14.4</li>
<li>Xcode: 10.2.1</li>
</ul>
<p>上面是我的系统和编译环境</p>
<h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>查看<a href="https://huyaohui.com/2015/10/01/Xcode-lian-jie-zhen-ji-tiao-shi/">Xcode 链接真机调试</a>这篇文章中关于证书相关的内容, 安装证书</p>
<p>当然你可以把你开发机上的证书拷贝到你的编译机上去, 同样的我这里不做阐述, 执行搜索</p>
<h4 id="登录-Apple-账号"><a href="#登录-Apple-账号" class="headerlink" title="登录 Apple 账号"></a>登录 Apple 账号</h4><p><img src="https://user-images.githubusercontent.com/8622405/56410566-1a81ef80-62b0-11e9-81b9-22c38a005a63.png" alt=""></p>
<h4 id="编译归档-神坑"><a href="#编译归档-神坑" class="headerlink" title="编译归档(神坑)"></a>编译归档(神坑)</h4><p>为什么说这里是神坑呢, 如果你不用<code>Xcode</code>先进行一次编译归档操作就直接进行命令行打包就会出现找不到<code>provisioning profile</code>文件, 打包失败</p>
<p>点击<code>Product</code> -&gt; <code>Archive</code>等待编译完成后进入归档页面, 此时选择<code>Ad Hoc</code>, 然后无脑下一步<br>最后点击<code>Export</code>导出, 然后找到导出的问题件夹内的<code>ExportOptions.plist</code>文件保存好, 之后使用命令行编译时需要用到(这里很重要, 网上一大堆资料都没说怎么得到这个文件, 以及这个文件的作用)</p>
<p><img src="https://user-images.githubusercontent.com/8622405/56411125-4900ca00-62b2-11e9-8092-ce04eed3a3fe.png" alt=""></p>
<p>网上的资料全部都是选择第一项<code>App Store</code>, 但是我选择使玩这项后, 使用命令行打包出来的<code>ipa</code>并不能成功安装到手机上</p>
<h3 id="Command-编译-打包脚本-这里照样坑的一匹"><a href="#Command-编译-打包脚本-这里照样坑的一匹" class="headerlink" title="Command 编译, 打包脚本(这里照样坑的一匹)"></a>Command 编译, 打包脚本(这里照样坑的一匹)</h3><p>这里把编译先搞清楚, 之后再来部署<code>Jenkins</code>就水到渠成了, 所以我把命令行编译这块单独拿出来解释说明<br><code>Jenkins</code>最终要执行的就是这些命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据实际情况修改target和scheme名字</span></div><div class="line"><span class="comment"># 通常情况下他们的名字都是一样的, 如果你修改的了的话就当我没说</span></div><div class="line">TARGET_NAME=<span class="string">"MHDemo"</span></div><div class="line">SCHEME_NAME=<span class="string">"MHDemo"</span></div><div class="line">XCARCHIVE_NAME=<span class="string">"MHDemo.xcarchive"</span></div><div class="line"></div><div class="line"><span class="comment"># clean 清理编译缓存</span></div><div class="line">xcodebuild clean -target <span class="variable">$&#123;TARGET_NAME&#125;</span> \</div><div class="line">    -scheme <span class="variable">$&#123;SCHEME_NAME&#125;</span> \</div><div class="line">    -configuration Release</div><div class="line"></div><div class="line">rm -rf ./build</div><div class="line">rm -rf ./ExportOptions.plist</div><div class="line">mkdir -p ./build/Release-iphoneos</div><div class="line"></div><div class="line"><span class="comment"># 创建 ExportOptions.plist 文件</span></div><div class="line"><span class="comment"># 当然你也可以把它放在本地的某个地方, 但是我出于管理方便所以我把它放在了 shell 脚本中自动生成了</span></div><div class="line"><span class="comment"># 这个文件就是上面通过 Xcode 归档后生成的, 我这里剔除了所有不必要的信息, 只保留的核心内容</span></div><div class="line"><span class="comment"># Update 2019-10-11: Xcode 11 需要添加: &lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;ad-hoc&lt;/string&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt;&lt;/dict&gt;&lt;/plist&gt;"</span> &gt; ExportOptions.plist</div><div class="line"></div><div class="line"><span class="comment"># 执行归档操作</span></div><div class="line">xcodebuild -archivePath ./build/Release-iphoneos/<span class="variable">$&#123;XCARCHIVE_NAME&#125;</span> \</div><div class="line">    -target <span class="variable">$&#123;TARGET_NAME&#125;</span> \</div><div class="line">    -scheme <span class="variable">$&#123;SCHEME_NAME&#125;</span> \</div><div class="line">    -configuration Release \</div><div class="line">    archive</div><div class="line"></div><div class="line"><span class="comment"># 生成 ipa 安装文件</span></div><div class="line">xcodebuild -exportArchive -archivePath ./build/Release-iphoneos/<span class="variable">$&#123;XCARCHIVE_NAME&#125;</span>\</div><div class="line">    -exportPath ./build/ \</div><div class="line">    -exportOptionsPlist ./ExportOptions.plist \</div><div class="line">    -allowProvisioningUpdates</div></pre></td></tr></table></figure>
<p>如果上述操作都没有问题的话, <code>ipa</code>安装包应该会生成在项目根目录下的<code>build</code>文件夹下</p>
<h3 id="上传安装包至蒲公英"><a href="#上传安装包至蒲公英" class="headerlink" title="上传安装包至蒲公英"></a>上传安装包至蒲公英</h3><p>上传到<code>fir.im</code>应该也是大同小异的, 大家执行搜索一下, 我这里只以蒲公英为例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 蒲公英上的User Key</div><div class="line">uKey=&quot;3582ee5da8a51e153d89233389exxxxx&quot;</div><div class="line"># 蒲公英上的API Key</div><div class="line">apiKey=&quot;7eec744cc7509408231e0792594xxxxx&quot;</div><div class="line"># 要上传的ipa文件路径</div><div class="line">IPA_PATH=&quot;./build/$&#123;TARGET_NAME&#125;.ipa&quot;</div><div class="line"># 密码</div><div class="line">PASSWORD=&quot;lzq951236&quot;</div><div class="line">MSG=`git log -1 --pretty=%B`</div><div class="line"># 执行上传至蒲公英的命令</div><div class="line">echo &quot;++++++++++++++upload+++++++++++++&quot;</div><div class="line">curl -F &quot;file=@$&#123;IPA_PATH&#125;&quot; -F &quot;uKey=$&#123;uKey&#125;&quot; -F &quot;_api_key=$&#123;apiKey&#125;&quot; -F &quot;updateDescription=$&#123;MSG&#125;&quot; -F &quot;password=$&#123;PASSWORD&#125;&quot; http://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure>
<p>上传成功, 命令行会返回<code>code: 0</code>, 表示成功</p>
<p>如果需要上传到自己的服务器, 其实也是同理, 使用上面脚本的之后一行的<code>curl</code>命令就好, 具体可自行搜索<code>curl</code>如何使用</p>
<h3 id="使用-Jenkins-自动化"><a href="#使用-Jenkins-自动化" class="headerlink" title="使用 Jenkins 自动化"></a>使用 Jenkins 自动化</h3><p>上面的所有环节都打通了, 使用<code>Jenkins</code>完成自动化, 还会有什么难度吗?</p>
<p>不过我这里还是简单的说一下把, 免得大家看了网上的一些资料后又走上了歪路</p>
<h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p>新建任务 -&gt; 输入任务名称 -&gt; 构建一个自由风格的软件</p>
<p><img src="https://user-images.githubusercontent.com/8622405/56412555-30df7980-62b7-11e9-8df9-b0ffe39eced6.png" alt=""></p>
<h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p>源码管理 -&gt; Git -&gt; Repository URL -&gt; 输入创库地址</p>
<p><img src="https://user-images.githubusercontent.com/8622405/56412810-f62a1100-62b7-11e9-95d6-55c0fe90a608.png" alt=""></p>
<p>添加 clone 创库的凭证</p>
<p>私钥来自之前我们创建的<code>ssh key</code>, 私钥路径<code>~/.ssh/id_rsa</code> <strong>注意:</strong> 公钥必须首先配置到了<code>git</code>托管平台, 公钥路径<code>~/.ssh/id_rsa.pub</code></p>
<p><img src="https://user-images.githubusercontent.com/8622405/56412907-4acd8c00-62b8-11e9-9c37-4028f2e69653.png" alt=""></p>
<h4 id="执行-shell"><a href="#执行-shell" class="headerlink" title="执行 shell"></a>执行 shell</h4><p>首先增加构建步骤</p>
<p><img src="https://user-images.githubusercontent.com/8622405/56413116-f70f7280-62b8-11e9-95a9-acc22fda6977.png" alt=""></p>
<p>拷贝上文的脚本至命令输入框内, 注意替换你实际的项目名称, 人后点击保存, 最后点击<code>立即构建</code>, 开始执行自动化构建<br>此时大功告成, 如果你想使用<code>构建触发器</code>的话, 请执行查阅资料, 这个比较简单, 这里就不做说明了</p>
<p><img src="https://user-images.githubusercontent.com/8622405/56413198-45247600-62b9-11e9-8a28-82962ba96bd3.png" alt=""></p>
<h3 id="关于-Xcode-integration-插件"><a href="#关于-Xcode-integration-插件" class="headerlink" title="关于 Xcode integration 插件"></a>关于 Xcode integration 插件</h3><p>最开始也是使用的这种方式进行的部署, 但是很遗憾无论我怎么折腾都没能完成工作</p>
<p>遇到的问题: <code>userString = &quot;Your session has expired.  Please log in.&quot;;</code><br>网友的说法是, 只要<code>Xcode</code>重新登录就能解决问题了<br>还有的说法是没有解<code>锁钥匙串</code>, 我个人任务这个说法比较可信, 但是很遗憾按照网友的说法并没能解决问题<br>如果哪位大佬能看到这篇文章的话, 知道这是怎么回事, 劳烦我说一声, 🙏</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://forums.developer.apple.com/thread/70326" target="_blank" rel="external">https://forums.developer.apple.com/thread/70326</a><br><a href="https://medium.com/xcblog/xcodebuild-deploy-ios-app-from-command-line-c6defff0d8b8" target="_blank" rel="external">https://medium.com/xcblog/xcodebuild-deploy-ios-app-from-command-line-c6defff0d8b8</a><br><a href="https://shashikantjagtap.net/full-stack-ios-continuous-delivery-with-xcodebuild-and-exportoptions-plist/" target="_blank" rel="external">https://shashikantjagtap.net/full-stack-ios-continuous-delivery-with-xcodebuild-and-exportoptions-plist/</a><br><a href="http://oriochan.com/projectManage.html" target="_blank" rel="external">http://oriochan.com/projectManage.html</a><br><a href="https://www.jianshu.com/p/91e8f571fc2b" target="_blank" rel="external">https://www.jianshu.com/p/91e8f571fc2b</a><br><a href="https://www.jianshu.com/p/9cb3d8c8c78d" target="_blank" rel="external">https://www.jianshu.com/p/9cb3d8c8c78d</a><br><a href="https://www.jianshu.com/p/ce36997919b4" target="_blank" rel="external">https://www.jianshu.com/p/ce36997919b4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CI/CD&lt;/code&gt; with &lt;code&gt;Jenkins&lt;/code&gt; 折腾良久用于还是给我搞掂了, 下面就来说说我到底是怎么淌过这些坑的(真心就是不停的淌坑, 简直毫无乐趣可言, 不过淌完后还是很畅快的:-D)&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Jenkins" scheme="http://huyaohui.com/tags/Jenkins/"/>
    
      <category term="CI/CD" scheme="http://huyaohui.com/tags/CI-CD/"/>
    
      <category term="DevOps" scheme="http://huyaohui.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>更改 android apk 包名 达到双开甚至多开的目的</title>
    <link href="http://huyaohui.com/2019/03/13/geng-gai-android-apk-bao-ming-da-dao-shuang-kai-shen-zhi-duo-kai-de-mu-de/"/>
    <id>http://huyaohui.com/2019/03/13/geng-gai-android-apk-bao-ming-da-dao-shuang-kai-shen-zhi-duo-kai-de-mu-de/</id>
    <published>2019-03-13T13:49:55.000Z</published>
    <updated>2019-03-13T13:56:35.644Z</updated>
    
    <content type="html"><![CDATA[<p>起因是那狗日的乐视电视有些app没法安装, 至于为什么不能安装我就懒得说了, 总之就是一个话 Fuck<br>当然这个难不倒我们程序员们, 用脚指头都能想到是通过包名进行的判断, 那么我们改掉包名不就搞定了, 对吧</p>
<a id="more"></a>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><ul>
<li>apktool</li>
<li>keytool</li>
<li>jarsigner</li>
</ul>
<p>大家执行搜索安装</p>
<h3 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apktool d package-name.apk</div></pre></td></tr></table></figure>
<h3 id="查找包名"><a href="#查找包名" class="headerlink" title="查找包名"></a>查找包名</h3><ul>
<li>打开<code>AndroidMaifest.xml</code>文件</li>
<li>找到第一行的<code>package=&quot;xxx.xxx.xxx&quot;</code></li>
<li><code>xx.xxx.xxx</code>对应的就是包名</li>
</ul>
<h3 id="更改包名"><a href="#更改包名" class="headerlink" title="更改包名"></a>更改包名</h3><ul>
<li>假设包名是<code>com.huyaohui.test</code></li>
<li>全局搜索并替换改名称为你想要的包名, 假设是<code>com.huyaohui.test2</code></li>
</ul>
<h3 id="更改-smali-路径"><a href="#更改-smali-路径" class="headerlink" title="更改 smali 路径"></a>更改 smali 路径</h3><ul>
<li>全局搜索 <code>Lcom/huyaohui/test</code></li>
<li>替换成 <code>Lcom/huyaohui/test2</code></li>
</ul>
<h2 id="更改文件夹名称"><a href="#更改文件夹名称" class="headerlink" title="更改文件夹名称"></a>更改文件夹名称</h2><ul>
<li>找到所有这种层级的 <code>com/huyaohui/test</code> 文件夹</li>
<li>把对应的文件夹名称更改为包名对应的名称 <code>com/huyaohui/test2</code></li>
</ul>
<h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><p>更改完包名的 App 重新打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apktool b package-name # 这里的 package-name 是文件夹名</div></pre></td></tr></table></figure>
<p>打好的包存放路径为 <code>package-name/dist</code></p>
<h3 id="创建-keystore"><a href="#创建-keystore" class="headerlink" title="创建 keystore"></a>创建 keystore</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keyalg DSA -keysize 1024 -sigalg SHA1withDSA  -validity 20000  -keystore MyDevel.keystore -alias devel   -keypass MyDevel -storepass MyDevel</div></pre></td></tr></table></figure>
<h3 id="重新签名"><a href="#重新签名" class="headerlink" title="重新签名"></a>重新签名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -sigalg SHA1withDSA -digestalg SHA1 -keystore myDevel.keystore -storepass MyDevel dianshijia_v5.0.3_build120.apk devel</div></pre></td></tr></table></figure>
<p>签名完成后, 修改包名的工作就彻底结束了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没啥好总结的, 谁叫 java 那么好反编译呢 :-D</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/fe56575d3991" target="_blank" rel="external">https://www.jianshu.com/p/fe56575d3991</a><br><a href="https://www.cnblogs.com/ayanmw/p/3720804.html" target="_blank" rel="external">https://www.cnblogs.com/ayanmw/p/3720804.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起因是那狗日的乐视电视有些app没法安装, 至于为什么不能安装我就懒得说了, 总之就是一个话 Fuck&lt;br&gt;当然这个难不倒我们程序员们, 用脚指头都能想到是通过包名进行的判断, 那么我们改掉包名不就搞定了, 对吧&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://huyaohui.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://huyaohui.com/tags/Android/"/>
    
      <category term="apk" scheme="http://huyaohui.com/tags/apk/"/>
    
      <category term="逆向工程" scheme="http://huyaohui.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 基本语法</title>
    <link href="http://huyaohui.com/2019/02/21/TypeScript-ji-ben-yu-fa/"/>
    <id>http://huyaohui.com/2019/02/21/TypeScript-ji-ben-yu-fa/</id>
    <published>2019-02-21T13:12:45.000Z</published>
    <updated>2019-02-21T13:20:36.146Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>TypeScript 是微软开发的 JavaScript 的超集，TypeScript 兼容 JavaScript，可以载入 JavaScript 代码然后运行。TypeScript 与 JavaScript 相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言。</p>
<p>TypeScript 微软官方网站 <a href="http://www.typescriptlang.org/" target="_blank" rel="external">http://www.typescriptlang.org/</a><br>TypeScript 源码 <a href="http://typescript.codeplex.com" target="_blank" rel="external">http://typescript.codeplex.com</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h1><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Boolean</div><div class="line">var isDone:boolean = false;</div></pre></td></tr></table></figure>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Number</div><div class="line">var width:number = 100;</div></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//String</div><div class="line">var name:string = &quot;hello&quot;;</div></pre></td></tr></table></figure>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//Array</div><div class="line">var list:number[] = [1, 2, 3];</div><div class="line">var list:Array&lt;number&gt;=[1, 2, 3];</div></pre></td></tr></table></figure>
<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Enum</div><div class="line">enum Color &#123;Red, Green, Blue&#125;</div><div class="line">var c: Color = Color.Red;</div><div class="line">alert(c);//默认值从0开始，alert(0);</div><div class="line">//可以手动指定值</div><div class="line">enum Color1 &#123;Red = 1, Green, Blue&#125;</div><div class="line">var c1: Color1 = Color1.Green;</div><div class="line">alert(c1);//alert(2)</div><div class="line">//根据值查找名称</div><div class="line">enum Color2 &#123;Red = 1, Green=2, Blue=4&#125;</div><div class="line">var c2: string = Color2[4];</div><div class="line">alert(c2);//alert(Blue)</div></pre></td></tr></table></figure>
<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//不确定类型，退出编译检查</div><div class="line">var notSure: any = 4;</div><div class="line">notSure = &quot;maybe a string instead&quot;;</div><div class="line">notSure = false; // okay, definitely a boolean</div><div class="line"></div><div class="line">//不确定数组元素类型</div><div class="line">var anylist:any[] = [1, true, &quot;free&quot;];</div><div class="line">anylist[1] = 100;</div></pre></td></tr></table></figure>
<h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//空白</div><div class="line">function warnUser(): void &#123;</div><div class="line">    alert(123);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    animalName:string;</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;: Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var tom = new Animal(&quot;Tom&quot;);</div><div class="line">tom.sayHello();//alert(Tom:Hello)</div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    animalName:string;</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;: Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat extends Animal &#123;</div><div class="line">    //重写sayHello方法</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Cat)：&quot; + &quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Mouse extends Animal &#123;</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Mouse)：&quot; + &quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var tom:Animal = new Cat(&quot;Tom&quot;);</div><div class="line">tom.sayHello();//alert(Tom(Cat):Hello)</div><div class="line">var jerry:Animal = new Mouse(&quot;Jerry&quot;);</div><div class="line">jerry.sayHello();//alert(Jerry(Mouse):Hello)</div></pre></td></tr></table></figure>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>当我们把 animalName 改为 private</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    private animalName:string;//默认是public</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat extends Animal &#123;</div><div class="line">    //重写sayHello方法</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Cat)：&quot; + &quot;Hello&quot;);//Error 编译不通过</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="get，set-访问器"><a href="#get，set-访问器" class="headerlink" title="get，set 访问器"></a>get，set 访问器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    private _animalName:string;//默认是public</div><div class="line"></div><div class="line">    get animalName():string &#123;</div><div class="line">        return this._animalName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    set animalName(name:string):string &#123;</div><div class="line">        this._animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//静态属性</div><div class="line">class Table &#123;</div><div class="line">    static width = 100;</div><div class="line">    static height = 200;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var width = Table.width;</div><div class="line">alert(width);//alert(100)</div></pre></td></tr></table></figure>
<h1 id="3-接口"><a href="#3-接口" class="headerlink" title="3. 接口"></a>3. 接口</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">interface ICar &#123;</div><div class="line">    color:string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Bus implements ICar &#123;</div><div class="line">    color:string;</div><div class="line">    constructor() &#123;</div><div class="line">        this.color = &quot;Blue&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var bus = new Bus();</div><div class="line">alert(bus.color);</div></pre></td></tr></table></figure>
<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//继承接口</div><div class="line">interface Shape &#123;</div><div class="line">    color: string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface PenStroke &#123;</div><div class="line">    penWidth: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Square extends Shape, PenStroke &#123;</div><div class="line">    sideLength: number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">interface ICar &#123;</div><div class="line">    color:string;</div><div class="line">    safetyDevice?:any;//实现类无需实现</div><div class="line">&#125;</div><div class="line"></div><div class="line">function MoveCar(car:ICar)&#123;</div><div class="line">    if(car.safetyDevice)</div><div class="line">    &#123;</div><div class="line">        alert(&quot;The car is safe&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        alert(&quot;The car is not safe&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-模块（Modules）"><a href="#4-模块（Modules）" class="headerlink" title="4. 模块（Modules）"></a>4. 模块（Modules）</h1><blockquote>
<p>作用：1. 防止命名空间冲突；2. 将一个功能模块很容易的划分到不同文件中，更容易维护；</p>
</blockquote>
<h2 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module MyDemo &#123;</div><div class="line">    export interface IDemo &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    export class Demo implements IDemo &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module Shapes &#123;</div><div class="line">    export module Polygons &#123;</div><div class="line">        export class Triangle &#123; &#125;</div><div class="line">        export class Square &#123; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">import polygons = Shapes.Polygons;</div><div class="line">var sq = new polygons.Square(); // 类似于 &apos;new Shapes.Polygons.Square()&apos;</div></pre></td></tr></table></figure>
<h1 id="5-函数（Function）"><a href="#5-函数（Function）" class="headerlink" title="5. 函数（Function）"></a>5. 函数（Function）</h1><h2 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function add(x:number, y:number):number &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;</div><div class="line">// or</div><div class="line">var myAdd = function (x:number, y:number):number &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="完整的函数类型"><a href="#完整的函数类型" class="headerlink" title="完整的函数类型"></a>完整的函数类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(x:number, y:number)=&gt;number =</div><div class="line">    function (x:number, y:number):number &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>为了增强可读性，给参数 x、y 具有实际的意义，可以这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(baseValue:number, increment:number)=&gt;number =</div><div class="line">    function (x:number, y:number):number &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>第二部分 number 是一个返回类型，如果无需返回类型，请使用’void’<br>第三部分的 function 参数类型，根据上下文类型进行推断，可以省略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(baseValue:number, increment:number)=&gt;number =</div><div class="line">    function (x, y) &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//可选参数</div><div class="line">function buildName(firstName:string, lastName?:string) &#123;</div><div class="line">    if (lastName)</div><div class="line">        return firstName + &quot; &quot; + lastName;</div><div class="line">    else return firstName;</div><div class="line">&#125;</div><div class="line">var result1 = buildName(&quot;Bob&quot;);</div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//默认参数</div><div class="line">function buildNameDefaultValue(firstName: string, lastName = &quot;Smith&quot;) &#123;</div><div class="line">        return firstName + &quot; &quot; + lastName;</div><div class="line">&#125;</div><div class="line">var result1 = buildNameDefaultValue(&quot;Bob&quot;);</div></pre></td></tr></table></figure>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>例如在 C# 中，方法参数定义使用 param int[], 调用方法时，就可以传递多个 int 类型的参数<br>在 TypeScript 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function buildNameRest(firstName:string, ...restOfName:string[]) &#123;</div><div class="line">    return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var employeeName = buildNameRest(&quot;Joseph&quot;, &quot;Samuel&quot;, &quot;Lucas&quot;, &quot;MacKinzie&quot;)</div></pre></td></tr></table></figure>
<h2 id="Lambads-和-this-关键字"><a href="#Lambads-和-this-关键字" class="headerlink" title="Lambads 和 this 关键字"></a>Lambads 和 this 关键字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var people=&#123;</div><div class="line">    name:[&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;],</div><div class="line">    getName:function()&#123;</div><div class="line">        return function()&#123;</div><div class="line">            var i=Math.floor(Math.random()*4);</div><div class="line">            return &#123;</div><div class="line">                n:this.name[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var pname=people.getName();</div><div class="line">alert(&quot;名字：&quot;+pname().n);</div></pre></td></tr></table></figure>
<p>调用发现 getName 中的 this 关键字指向的是 getName, 访问不到外部的 name 属性<br>所以我们修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var people = &#123;</div><div class="line">    name: [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;],</div><div class="line">    getName: function () &#123;</div><div class="line">        return  ()=&gt; &#123;</div><div class="line">            var i = Math.floor(Math.random() * 4);</div><div class="line">            return &#123;</div><div class="line">                n: this.name[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var pname = people.getName();</div><div class="line">alert(&quot;名字：&quot; + pname().n);</div></pre></td></tr></table></figure>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//重载</div><div class="line">function student(name:string):string;</div><div class="line">function student(age:number):number;</div><div class="line">function student(numberorage:any):any &#123;</div><div class="line">    if (numberorage &amp;&amp; typeof (numberorage) == &quot;string&quot;)</div><div class="line">        alert(&quot;姓名&quot;);</div><div class="line">    else</div><div class="line">        alert(&quot;年龄&quot;);</div><div class="line">&#125;</div><div class="line">student(&quot;Tom&quot;);//alert(&quot;姓名&quot;)</div><div class="line">student(15);//alert(&quot;年龄&quot;)</div></pre></td></tr></table></figure>
<h1 id="6-泛型"><a href="#6-泛型" class="headerlink" title="6. 泛型"></a>6. 泛型</h1><h2 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function identity&lt;T&gt;(arg: T): T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//数组泛型</div><div class="line">function identity&lt;T&gt;(arg: T[]): T[] &#123;</div><div class="line">    console.log(arg.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="泛型类型（通用的函数类型）"><a href="#泛型类型（通用的函数类型）" class="headerlink" title="泛型类型（通用的函数类型）"></a>泛型类型（通用的函数类型）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function identity&lt;T&gt;(arg:T):T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line">var myIdentity:&lt;T&gt;(arg:T)=&gt;T = identity;//T也可使用其他字母表示</div><div class="line">//也可以这么写</div><div class="line">//var myIdentity:&#123;&lt;T&gt;(arg:T): T&#125; = identity;</div></pre></td></tr></table></figure>
<h2 id="接口泛型"><a href="#接口泛型" class="headerlink" title="接口泛型"></a>接口泛型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">interface GenericIdentityFn &#123;</div><div class="line">    &lt;T&gt;(arg:T): T;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function identity&lt;T&gt;(arg:T):T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myIdentity:GenericIdentityFn = identity;</div></pre></td></tr></table></figure>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class GenericNumber&lt;T&gt; &#123;</div><div class="line">    zeroValue:T;</div><div class="line">    add:(x:T, y:T) =&gt; T;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myGenericNumber = new GenericNumber&lt;number&gt;();</div><div class="line">myGenericNumber.zeroValue = 0;</div><div class="line">myGenericNumber.add = function (x, y) &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">interface Lengthwise &#123;</div><div class="line">    length: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function loggingIdentity&lt;T extends Lengthwise&gt;(arg:T):T &#123;</div><div class="line">    console.log(arg.length);</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loggingIdentity(3);//error</div><div class="line">loggingIdentity(&#123;length: 10, value: 3&#125;);  //只要类型包含length属性即可</div></pre></td></tr></table></figure>
<h2 id="泛型类约束"><a href="#泛型类约束" class="headerlink" title="泛型类约束"></a>泛型类约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Findable&lt;T&gt;</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">function find&lt;T&gt;(n: T, s: Findable&lt;T&gt;) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-合并"><a href="#7-合并" class="headerlink" title="7. 合并"></a>7. 合并</h1><h2 id="合并接口"><a href="#合并接口" class="headerlink" title="合并接口"></a>合并接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">interface Box &#123;</div><div class="line">    height: number;</div><div class="line">    width: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Box &#123;</div><div class="line">    scale: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var box: Box = &#123;height: 5, width: 6, scale: 10&#125;;</div></pre></td></tr></table></figure>
<h2 id="合并模块"><a href="#合并模块" class="headerlink" title="合并模块"></a>合并模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module Animals &#123;</div><div class="line">    exportclass Zebra &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module Animals &#123;</div><div class="line">    exportinterface Legged &#123; numberOfLegs: number; &#125;</div><div class="line">    exportclass Dog &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//相当于</div><div class="line">module Animals &#123;</div><div class="line">    exportinterface Legged &#123; numberOfLegs: number; &#125;</div><div class="line"></div><div class="line">    exportclass Zebra &#123; &#125;</div><div class="line">    exportclass Dog &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="合并模块和类"><a href="#合并模块和类" class="headerlink" title="合并模块和类"></a>合并模块和类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Album &#123;</div><div class="line">    label:Album.AlbumLabel;</div><div class="line">&#125;</div><div class="line">module Album &#123;</div><div class="line">    export class AlbumLabel &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="合并模块和函数"><a href="#合并模块和函数" class="headerlink" title="合并模块和函数"></a>合并模块和函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function buildLabel(name:string):string &#123;</div><div class="line">    return buildLabel.prefix + name + buildLabel.suffix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module buildLabel &#123;</div><div class="line">    export var suffix = &quot;&quot;;</div><div class="line">    export var prefix = &quot;Hello, &quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(buildLabel(&quot;Sam Smith&quot;));</div></pre></td></tr></table></figure>
<h2 id="合并模块与枚举"><a href="#合并模块与枚举" class="headerlink" title="合并模块与枚举"></a>合并模块与枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">enum Color &#123;</div><div class="line">    red = 1,</div><div class="line">    green = 2,</div><div class="line">    blue = 4</div><div class="line">&#125;</div><div class="line"></div><div class="line">module Color &#123;</div><div class="line">    export function mixColor(colorName:string) &#123;</div><div class="line">        if (colorName == &quot;yellow&quot;) &#123;</div><div class="line">            return Color.red + Color.green;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;white&quot;) &#123;</div><div class="line">            return Color.red + Color.green + Color.blue;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;magenta&quot;) &#123;</div><div class="line">            return Color.red + Color.blue;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;cyan&quot;) &#123;</div><div class="line">            return Color.green + Color.blue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不能合并"><a href="#不能合并" class="headerlink" title="不能合并"></a>不能合并</h2><ul>
<li>类与类不能合并</li>
<li>接口与类不能合并</li>
<li>变量与类不能合并</li>
</ul>
<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><blockquote>
<p>转载请注明出处：<a href="http://www.cnblogs.com/xcong/p/4570235.html" target="_blank" rel="external">http://www.cnblogs.com/xcong/p/4570235.html</a><br>文中代码引用自 Ts 官网和极客学院<br>TS 文件下载 <a href="http://files.cnblogs.com/files/xcong/TsDemo.zip" target="_blank" rel="external">http://files.cnblogs.com/files/xcong/TsDemo.zip</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;TypeScript 是微软开发的 JavaScript 的超集，TypeScript 兼容 JavaScript，可以载入 JavaScript 代码然后运行。TypeScript 与 JavaScript 相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言。&lt;/p&gt;
&lt;p&gt;TypeScript 微软官方网站 &lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.typescriptlang.org/&lt;/a&gt;&lt;br&gt;TypeScript 源码 &lt;a href=&quot;http://typescript.codeplex.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://typescript.codeplex.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://huyaohui.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://huyaohui.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://huyaohui.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的 STD 指的是什么</title>
    <link href="http://huyaohui.com/2019/02/14/C++-zhong-de-STD-zhi-de-shi-shi-mo/"/>
    <id>http://huyaohui.com/2019/02/14/C++-zhong-de-STD-zhi-de-shi-shi-mo/</id>
    <published>2019-02-14T08:05:54.000Z</published>
    <updated>2019-02-21T13:19:42.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="std-的由来"><a href="#std-的由来" class="headerlink" title="std 的由来"></a>std 的由来</h2><blockquote>
<p>在标准 C++ 以前，都是用 <code>#include&lt;iostream.h&gt;</code> 这样的写法的，因为要包含进来的头文件名就是 <code>iostream.h</code>。<br>标准 C++ 引入了名字空间的概念，并把 <code>iostream</code> 等标准库中的东东封装到了 <code>std</code> 名字空间中，<br>同时为了不与原来的头文件混淆，规定标准 C++ 使用一套新的头文件，这套头文件的文件名后不加. <code>h</code> 扩展名，如 <code>iostream</code>、<code>string</code> 等等，<br>并且把原来 C 标准库的头文件也重新命名，如原来的 <code>string.h</code> 就改成 <code>cstring</code>(就是把<code>.h</code> 去掉，前面加上字母 <code>c</code>)，所以头文件包含的写法也就变成了 <code>#include &lt;iostream&gt;</code>。<br>并不是写了 <code>#include&lt;iostream&gt;</code> 就必须用 <code>using namespace std</code>; 我们通常这样的写的原因是为了一下子把 std 名字空间的东东全部暴露到全局域中（就像是直接包含了 iostream.h 这种没有名字空间的头文件一样），使标准 C++ 库用起来与传统的 <code>iostream.h</code> 一样方便。<br>如果不用 <code>using namespace std</code>, 使用标准库时就得时时带上名字空间的全名，如 <code>std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl</code>;</p>
</blockquote>
<h2 id="include-quot-iostream-quot-与-include-lt-iostream-gt-的区别"><a href="#include-quot-iostream-quot-与-include-lt-iostream-gt-的区别" class="headerlink" title="#include &quot;iostream&quot; 与 #include&lt;iostream&gt; 的区别"></a><code>#include &quot;iostream&quot;</code> 与 <code>#include&lt;iostream&gt;</code> 的区别</h2><blockquote>
<p>前者先在当前目录找 <code>iostream</code> 文件，找不到再去系统头文件路径找，后者反之。<br>因此，做为一个良好的习惯，在包含系统头文件时尽量用 <code>&lt;&gt;</code>，而在包含自己的工程中的头文件时用 <code>&quot;&quot;</code>。<br>且<code>&lt;iostream&gt;</code> 和 <code>&lt;iostream.h&gt;</code> 文件是不一样(前者没有后缀)，实际上，在编译器 <code>#include</code> 文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。<br>后缀为<code>.h</code> 的头文件 C++ 标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带 <code>.h</code> 后缀的头文件里，c++ 标准为了和 C 区别开，也为了正确使用命名空间，规定头文件不使用后缀 <code>.h</code>。<br>因此，当使用 <code>&lt;iostream.h&gt;</code> 时，相当于在 C 中调用库函数，使用的是全局命名空间，也就是早期的 C++ 实现；<br>当使用 <code>&lt;iostream&gt;</code> 的时候，该头文件没有定义全局命名空间，必须使用 <code>namespace std</code>；这样才能正确使用 <code>cout</code>。</p>
</blockquote>
<a id="more"></a>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上内容均来自网上，暂未查到原始出处，知道出处的请联系我加上</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;std-的由来&quot;&gt;&lt;a href=&quot;#std-的由来&quot; class=&quot;headerlink&quot; title=&quot;std 的由来&quot;&gt;&lt;/a&gt;std 的由来&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在标准 C++ 以前，都是用 &lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 这样的写法的，因为要包含进来的头文件名就是 &lt;code&gt;iostream.h&lt;/code&gt;。&lt;br&gt;标准 C++ 引入了名字空间的概念，并把 &lt;code&gt;iostream&lt;/code&gt; 等标准库中的东东封装到了 &lt;code&gt;std&lt;/code&gt; 名字空间中，&lt;br&gt;同时为了不与原来的头文件混淆，规定标准 C++ 使用一套新的头文件，这套头文件的文件名后不加. &lt;code&gt;h&lt;/code&gt; 扩展名，如 &lt;code&gt;iostream&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt; 等等，&lt;br&gt;并且把原来 C 标准库的头文件也重新命名，如原来的 &lt;code&gt;string.h&lt;/code&gt; 就改成 &lt;code&gt;cstring&lt;/code&gt;(就是把&lt;code&gt;.h&lt;/code&gt; 去掉，前面加上字母 &lt;code&gt;c&lt;/code&gt;)，所以头文件包含的写法也就变成了 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;。&lt;br&gt;并不是写了 &lt;code&gt;#include&amp;lt;iostream&amp;gt;&lt;/code&gt; 就必须用 &lt;code&gt;using namespace std&lt;/code&gt;; 我们通常这样的写的原因是为了一下子把 std 名字空间的东东全部暴露到全局域中（就像是直接包含了 iostream.h 这种没有名字空间的头文件一样），使标准 C++ 库用起来与传统的 &lt;code&gt;iostream.h&lt;/code&gt; 一样方便。&lt;br&gt;如果不用 &lt;code&gt;using namespace std&lt;/code&gt;, 使用标准库时就得时时带上名字空间的全名，如 &lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;quot;hello&amp;quot; &amp;lt;&amp;lt; std::endl&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;include-quot-iostream-quot-与-include-lt-iostream-gt-的区别&quot;&gt;&lt;a href=&quot;#include-quot-iostream-quot-与-include-lt-iostream-gt-的区别&quot; class=&quot;headerlink&quot; title=&quot;#include &amp;quot;iostream&amp;quot; 与 #include&amp;lt;iostream&amp;gt; 的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;#include &amp;quot;iostream&amp;quot;&lt;/code&gt; 与 &lt;code&gt;#include&amp;lt;iostream&amp;gt;&lt;/code&gt; 的区别&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前者先在当前目录找 &lt;code&gt;iostream&lt;/code&gt; 文件，找不到再去系统头文件路径找，后者反之。&lt;br&gt;因此，做为一个良好的习惯，在包含系统头文件时尽量用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，而在包含自己的工程中的头文件时用 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;br&gt;且&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 文件是不一样(前者没有后缀)，实际上，在编译器 &lt;code&gt;#include&lt;/code&gt; 文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。&lt;br&gt;后缀为&lt;code&gt;.h&lt;/code&gt; 的头文件 C++ 标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带 &lt;code&gt;.h&lt;/code&gt; 后缀的头文件里，c++ 标准为了和 C 区别开，也为了正确使用命名空间，规定头文件不使用后缀 &lt;code&gt;.h&lt;/code&gt;。&lt;br&gt;因此，当使用 &lt;code&gt;&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 时，相当于在 C 中调用库函数，使用的是全局命名空间，也就是早期的 C++ 实现；&lt;br&gt;当使用 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 的时候，该头文件没有定义全局命名空间，必须使用 &lt;code&gt;namespace std&lt;/code&gt;；这样才能正确使用 &lt;code&gt;cout&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="std" scheme="http://huyaohui.com/tags/std/"/>
    
      <category term="STL" scheme="http://huyaohui.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Sqlite3 单表级联删除数据</title>
    <link href="http://huyaohui.com/2018/12/18/Sqlite3-dan-biao-ji-lian-shan-chu-shu-ju/"/>
    <id>http://huyaohui.com/2018/12/18/Sqlite3-dan-biao-ji-lian-shan-chu-shu-ju/</id>
    <published>2018-12-18T02:51:17.000Z</published>
    <updated>2019-01-12T05:05:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个网络相关的 iOS 库, 遇到一个需要级联删除数据的地方, 本来想用外键约束的级联删除来解决<br>后来发现, 在外键约束时 插入数据是有条件限制的, 在某些情况下插入数据会失败, 不过蛋疼之余还是给我想到解决方案了, 嘻嘻</p>
<a id="more"></a>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>这里我不会讲<code>外键约束</code>是什么, 其他地方可以找到很多资料<br>这里只关注当前需要解决的问题</p>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"test_table"</span> (</div><div class="line">  <span class="string">"id"</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">  <span class="string">"uuid"</span> <span class="built_in">TEXT</span>,</div><div class="line">  <span class="string">"parent_uuid"</span> <span class="built_in">TEXT</span> <span class="keyword">REFERENCES</span> test_table(<span class="keyword">uuid</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>当插入数据时, 就会看到如下错误</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (<span class="keyword">uuid</span>, parent_uuid)<span class="keyword">VALUES</span>(<span class="string">'a'</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- foreign key mismatch - "test_table" referencing "test_table", Time: 0.003000s</span></div></pre></td></tr></table></figure>
<p>根据外键约束的原理, 可以知道这就是一个先有鸡还是先有蛋的问题<br>因为 在插入数据时会检查<code>parent_uuid</code>中的值是否存在<code>uuid</code>列中, 如果不存在则插入失败</p>
<h3 id="可行的方案"><a href="#可行的方案" class="headerlink" title="可行的方案"></a>可行的方案</h3><p>如果你的<code>uuid</code>是主键的并且在插入数据时满足以下两个条件的任意一个可以插入成功</p>
<ol>
<li><code>parent_uuid</code>为<code>NULL</code></li>
<li><code>parent_uuid</code>等于<code>uuid</code></li>
</ol>
<p>而实际情况则是多变的, 这样处理的话制约性太强了, 方案并不好<br>Ps: 虽然我当前的这个项目用的是在代码中递归实现的, 但是我还是要说下下面的这个方案<br>    之后会改成这个方案😁</p>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>同样的在这里我不会叫<code>触发器</code>是什么, 资料其他地方很多</p>
<p>数据表还是上面的那个结构<br>下面是数据表中的数据(Ps: 因为是触发器实现所以不存在参入检查的问题)</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">uuid</th>
<th style="text-align:center">parent_uuid</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">c</td>
<td style="text-align:center">d</td>
</tr>
</tbody>
</table>
<h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>下面是触发器Sql: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">"tri_test_table"</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">"test_table"</span> </div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">DELETE</span> <span class="keyword">FROM</span> test_table <span class="keyword">WHERE</span> parent_uuid = old.uuid;</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure>
<p>下面是删除删除数据Sql: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PRAGMA</span> recursive_triggers = <span class="literal">true</span>;</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">uuid</span> = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">PRAGMA</span> recursive_triggers = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<h3 id="关于recursive-triggers"><a href="#关于recursive-triggers" class="headerlink" title="关于recursive_triggers"></a>关于recursive_triggers</h3><p>如果不开启的话, 触发器只会触发一次, 那么最终<code>id=3</code>这条记录仍然是会存在的, 这样效果级联删除的效果就没有达到了<br>但是 Sqlite3 默认是关闭 recursive_triggers 这个选项的, 需要手动开启, 具体的可以看下面参考资料的官方文档</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://sqlite.org/pragma.html#pragma_recursive_triggers" target="_blank" rel="external">https://sqlite.org/pragma.html#pragma_recursive_triggers</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一个网络相关的 iOS 库, 遇到一个需要级联删除数据的地方, 本来想用外键约束的级联删除来解决&lt;br&gt;后来发现, 在外键约束时 插入数据是有条件限制的, 在某些情况下插入数据会失败, 不过蛋疼之余还是给我想到解决方案了, 嘻嘻&lt;/p&gt;
    
    </summary>
    
      <category term="Sql" scheme="http://huyaohui.com/categories/Sql/"/>
    
    
      <category term="Sqlite3" scheme="http://huyaohui.com/tags/Sqlite3/"/>
    
      <category term="Sql" scheme="http://huyaohui.com/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>iOS Storyboard 和 UIColor 创建出来的颜色显示效果不同</title>
    <link href="http://huyaohui.com/2018/12/06/iOS-Storyboard-he-UIColor-chuang-jian-chu-lai-de-yan-se-xian-shi-xiao-guo-bu-tong/"/>
    <id>http://huyaohui.com/2018/12/06/iOS-Storyboard-he-UIColor-chuang-jian-chu-lai-de-yan-se-xian-shi-xiao-guo-bu-tong/</id>
    <published>2018-12-06T07:25:49.000Z</published>
    <updated>2019-01-12T05:05:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>路漫漫其修远兮，吾将上下而求索。<br>真是绝了，这个问题从我开始搞 iOS 开发时就一直困扰这我了，虽然那时候我也尝试这找解决方案，但是一直都没能找到怎么解决，只是大概知道是配色文件到诊的，但是要如果更改正确却无从下手了。<br>现在看来，我找不到解决方案也是理所应当的了，至于原因接着往下看。（提示：我搞 iOS 开发那会还是 iOS8 时代）。</p>
<a id="more"></a>
<p>你有没有遇到过以下问题：</p>
<ul>
<li>设计师给你的颜色值在 Interface Builder 中设置以及代码设置与真机与模拟器显示的颜色不一致，甚至肉眼完全看的出来。</li>
<li>为一个普通的控件设置 Color，设置了颜色为 XXXXXX。取色工具测的也是正常的 XXXXXX，但是模拟器 / 真机运行起来之后，颜色变色了，用取色工具测，颜色变成了 YYYYYY。</li>
<li>为什么当我用颜色吸管工具在 Photoshop 选择一个颜色的和 RGB 值，在 Xcode 中设置后得不到相同的颜色?</li>
<li>为什么真机或者模拟器截图后，用吸管取色后得到的值与 Interface Builder 中设置的颜色值不一样？</li>
<li>太恶心了，就一个颜色为什么不一样？</li>
<li>我做错了什么吗?</li>
</ul>
<p>看完这篇文章后，这些问题将会全部消失。</p>
<h2 id="color-space"><a href="#color-space" class="headerlink" title="color space"></a>color space</h2><p>色彩空间，色域。我不会在这里详细介绍, 进一步了解可以阅读: <a href="http://www.dpbestflow.org/color/color-space-and-color-profiles" target="_blank" rel="external">http://www.dpbestflow.org/color/color-space-and-color-profiles</a>  在那里, 你可以找到关于色彩模型, 色彩空间和色彩配置的定义, 以获得更深的理解。我也会稍后再博客中翻译整篇文章。</p>
<h2 id="color-profile"><a href="#color-profile" class="headerlink" title="color profile"></a>color profile</h2><p>色彩配置。我不会在这里详细介绍, 进一步了解可以阅读: <a href="http://www.dpbestflow.org/color/color-space-and-color-profiles" target="_blank" rel="external">http://www.dpbestflow.org/color/color-space-and-color-profiles</a>  在那里, 你可以找到关于色彩模型, 色彩空间和色彩配置的定义, 以获得更深的理解。我也会稍后再博客中翻译整篇文章。</p>
<h2 id="理解苹果的颜色处理"><a href="#理解苹果的颜色处理" class="headerlink" title="理解苹果的颜色处理"></a>理解苹果的颜色处理</h2><p>苹果认为相同的 RGB 值在任何地方都应该显示相同。其实应用一个 RGB 的组合在不同的设备上不会总是有着相同的颜色，这取决于你使用的是哪一个颜色配置（color profile）。</p>
<p>需要知道是，color profile 是展现一个色彩空间中颜色的数值模型 (色彩空间, 色域（color space）是展现颜色的一个方式, 例如: RGB, CMYK, HSV, 等等)，一些色彩配置（color profile）是“设备相关” 的，一些色彩配置（color profile）是 “设备无关” 的。这意味着同样的颜色在不同的设备 (“设备无关”) 上会展现相同的颜色，其中一些将会根据设备的特点改变颜色(“设备相关”)</p>
<p>同样有趣的是, 当你截图时, 不仅每个像素的 RGB 值都得到了存储, 而且还有关于被截取的设备的互补信息。这样, 苹果可以通过计算不同的 RGB 组合来使颜色在不同的设备中看起来相同, 以最佳的方式使这些颜色与设备的特性和限制相匹配。</p>
<p>说了这么多, 给定一个色彩空间（color space） (例如, RGB), 您将在其中有多个色彩配置 (一般 RGB、Adobe RGB、PAL/SECAM 等), 因此你将有多种方法使用不同的 RGB 组合来获得相同的颜色。</p>
<p>Xcode 中的 RGB 色彩配置（color profile）有 Adobe RGB、Apple RGB、Device RGB（设备 RGB）、Generic RGB（通用 RGB）、Wide Gamut RGB（广域 RGB）。要查看整个色彩配置列表, 可以从 Xcode 的 Interface Builder 的色彩选择工具中查看。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142804.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142804.png" alt=""></a></p>
<p>因此, 当您选择选择了 RGB 值组合，并更改了要使用的色彩配置时, 您将获得相同的颜色，但是会得出不同的 RGB 值，这是应用颜色时使开发人员非常恼火的主要问题。</p>
<p>例如, 通用 RGB (10、80、105) 和设备 RGB (0、99、124) 是相同的颜色，但有不同的 RGB 值。如你所见。这就是为什么最终可以有不同的颜色， 即使你使用的是你从别处取色的精确的 RGB 组合 (Photoshop 吸管, 数码测色计（Digital Color Meter）等)。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142805.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142805.png" alt=""></a></p>
<p>同样, 如果在不同的色彩配置中使用相同的 RGB 组合, 则会得到不同的颜色。 <a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142806.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142806.png" alt=""></a></p>
<p>此外, Photoshop 处理颜色时，使用 Photoshop 的人与使用 RGB 值的人不是同一台设备不说，Adobe 使用人员 Photoshop 的色彩空间也未必与开发人员一致 (可能会是 Adobe 发明的颜色空间), 所以当你试图直接从 Photoshop 中选取它们并将其应用于 Xcode 时, 情况可能会变得更糟。</p>
<p>Photoshop 在编辑菜单的颜色设置中可以查看更改色彩配置。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-170957.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-170957.png" alt=""></a></p>
<p>所有这一切都解释了为什么当你使用数码测色计选择一个颜色, 你可能会得到不同的 RGB 值但是是相同的颜色。如果你在不同的显示器 (因为额外的设备信息可以添加到每个像素, 当你选择颜色, 取决于您使用的是与设备相关的色彩配置还是与设备无关的。</p>
<p>你可以猜到，我们要使用一个设备无关的， 如 sRGB (代表标准的 RGB), 所以无论我们将在什么地方显示，我们将得到相同的 RGB 值时。</p>
<p>iOS 中代码自定义设置 RGB 与 Interface Builder 自定义设置 RGB 颜色一致。都使用了 sRGB 色彩配置。</p>
<h3 id="在-XIB-中的色彩配置"><a href="#在-XIB-中的色彩配置" class="headerlink" title="在 XIB 中的色彩配置"></a>在 XIB 中的色彩配置</h3><p><strong>选择颜色后使用 sublime 等文本编辑器直接打开 storyboard 或者 xib 文件。即可看到如下几种结果。</strong></p>
<p>如果色彩配置采用了 sRGB ，sb/xib 的 xml 中会这样写，colorSpace=”custom” customColorSpace=”sRGB” ，一般都是使用颜色选择器自定义 RGB 后自动选择的 sRGB 色彩配置</p>
<p>如果色彩配置采用了 Display P3， sb/xib 的 xml 中会这样写，colorSpace=”custom” customColorSpace=”displayP3”，</p>
<p>如果色彩配置采用了 Generic RGB， sb/xib 的 xml 中会这样写，colorSpace=”calibratedRGB” ，一般都是使用颜色选择器自定义 RGB 后手动选择的 Generic RGB 色彩配置</p>
<p>如果色彩配置采用了 Generic Gray ， sb/xib 的 xml 中会这样写，colorSpace=”calibratedWhite”，一般都是系统默认的灰白颜色。</p>
<p>如果色彩配置采用了 Device Gray ， sb/xib 的 xml 中会这样写，colorSpace=”deviceRGB”，，一般都是使用颜色选择器自定义 RGB 后手动选择的 DeviceRGB 色彩配置</p>
<p>如果色彩配置采用了 Adobe RGB ， sb/xib 的 xml 中会这样写，colorSpace=”adobeRGB1998”，，一般都是使用颜色选择器自定义 RGB 后手动选择的 Adobe RGB 色彩配置</p>
<p>最后发现，手动选择的 Apple RGB 色彩配置，sb/xib 的 xml 中会这样写，colorSpace=”sRGB”，说明苹果默认统一成了 sRGB.</p>
<h3 id="在纯代码中的色彩配置"><a href="#在纯代码中的色彩配置" class="headerlink" title="在纯代码中的色彩配置"></a>在纯代码中的色彩配置</h3><p>最新 Xcode8 测试, 以下代码使用 sRGB 色彩配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (UIColor *)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha</div></pre></td></tr></table></figure>
<p>类似 [UIColor darkGrayColor] 使用 Generic Gray 色彩配置</p>
<p>不信我们 log 下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CGColorSpaceRef   ref = CGColorGetColorSpace([UIColor colorWithRed:104/255.0 green:104/255.0 blue:104/255.0 alpha:1].CGColor);</div><div class="line">NSLog(@&quot;%@&quot;,ref);</div><div class="line">CGColorSpaceRef   ref2 =  CGColorGetColorSpace([UIColor darkGrayColor].CGColor);</div><div class="line">NSLog(@&quot;%@&quot;,ref2);</div><div class="line"></div><div class="line">&lt;CGColorSpace 0x60000003f2a0&gt; (kCGColorSpaceICCBased; kCGColorSpaceModelRGB; sRGB IEC61966-2.1; extended range)</div><div class="line">&lt;CGColorSpace 0x60800002af20&gt; (kCGColorSpaceICCBased; kCGColorSpaceModelMonochrome; Generic Gray Gamma 2.2 Profile; extended range)</div></pre></td></tr></table></figure>
<h2 id="颜色拾取与应用"><a href="#颜色拾取与应用" class="headerlink" title="颜色拾取与应用"></a>颜色拾取与应用</h2><p>既然你明白了这件事的 ‘原因’, 让我们来谈谈技巧。</p>
<p>要选择颜色， 我们将使用苹果系统自带的 “数码测色计” 应用，你可以在系统的实用工具或者 Spotlight 找到。这个程序适用于一些色彩配置计算屏幕上的一个像素的 RGB 值。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-145700.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-145700.png" alt=""></a></p>
<p><strong>Xcode 的颜色选择器也支持拾取，但是不能设置指定色彩配置的颜色拾取。只能是 sRGB(代表标准的 RGB)。</strong></p>
<p>要应用颜色，我们将使用 Xcode 的 Interface Builder， 或者， 我们也可以以代码方式进行。</p>
<h3 id="颜色拾取"><a href="#颜色拾取" class="headerlink" title="颜色拾取"></a>颜色拾取</h3><p>打开数码测色计（Digital Color Meter），下拉中选择 “以 sRGB 显示”/ “Display in sRGB”, 使用取色吸管取色，shift+cmd+c，快捷键拷贝当前屏幕像素 RGB 的值.</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151913.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151913.png" alt=""></a></p>
<p>如果想拷贝 16 进制颜色，在菜单的显示中可以设置切换。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151422.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151422.png" alt=""></a></p>
<p>然后再 Xcode 的 Interface Builder，颜色选择器中选择 sRGB(默认也是 sRGB)，填入取的颜色 RGB 值。</p>
<p>或者代码设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.label.backgroundColor = [UIColor colorWithRed:39/255.0 green:45/255.0 blue:51/255.0 alpha:0];</div></pre></td></tr></table></figure>
<p><strong>所以，总结下技巧：</strong></p>
<p>使用取色软件，以 sRGB 色彩配置，取得 RGB 值。</p>
<p>设计最好也使用 sRGB 色彩配置进行设计。</p>
<p>如果设计要给开发取色要使用 sRGB 取色。</p>
<p>因为代码初始化 UIColor 是不能像 NSColor 一样指定色彩空间的。所以要以不变（sRGB）应万变。</p>
<p>使用 sRGB 在 Xcode Interface Builder(或通过代码) 中应用这些 RGB 值。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/28367811/color-in-storyboard-not-matching-uicolor" target="_blank" rel="external">https://stackoverflow.com/questions/28367811/color-in-storyboard-not-matching-uicolor</a><br><a href="http://www.skyfox.org/ios-app-color-set-and-color-profile.html" target="_blank" rel="external">http://www.skyfox.org/ios-app-color-set-and-color-profile.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路漫漫其修远兮，吾将上下而求索。&lt;br&gt;真是绝了，这个问题从我开始搞 iOS 开发时就一直困扰这我了，虽然那时候我也尝试这找解决方案，但是一直都没能找到怎么解决，只是大概知道是配色文件到诊的，但是要如果更改正确却无从下手了。&lt;br&gt;现在看来，我找不到解决方案也是理所应当的了，至于原因接着往下看。（提示：我搞 iOS 开发那会还是 iOS8 时代）。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Storyboard" scheme="http://huyaohui.com/tags/Storyboard/"/>
    
      <category term="XIB" scheme="http://huyaohui.com/tags/XIB/"/>
    
      <category term="XML" scheme="http://huyaohui.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>如何计算算法的空间复杂度</title>
    <link href="http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-kong-jian-fu-za-du/"/>
    <id>http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-kong-jian-fu-za-du/</id>
    <published>2018-12-05T11:52:26.000Z</published>
    <updated>2018-12-05T11:52:30.174Z</updated>
    
    <content type="html"><![CDATA[<p>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity)S(n) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。渐近空间复杂度也常常简称为空间复杂度。</p>
<a id="more"></a>
<ul>
<li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。</li>
</ul>
<p>我们在写代码时，完全可以用空间来换取时间，比如说，要判断某某年是不是闰年，你可能会花一点心思写了一个算法，而且由于是一个算法，也就意味着，每次给一个年份，都是要通过计算得到是否是闰年的结果。还有另一个办法就是，事先建立一个有 2 050 个元素的数组（年数略比现实多一点），然后把所有的年份按下标的数字对应，如果是闰年，此数组项的值就是 1，如果不是值为 0。这样，所谓的判断某一年是否是闰年，就变成了查找这个数组的某一项的值是多少的问题。此时，我们的运算是最小化了，但是硬盘上或者内存中需要存储这 2050 个 0 和 1。</p>
<p>算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是 “就地 “ 进行的，是节省存储的算法，如这一节介绍过的几个算法都是如此；有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如将快速排序和归并排序算法就属于这种情况。</p>
<p>通过一笔空间上的开销来换取计算时间的小技巧。到底哪一个好，其实要看你用在什么地方。</p>
<p>算法的<a href="http://www.nowamagic.net/librarys/veda/tag/空间复杂度" target="_blank" rel="external">空间复杂度</a>通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)= O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>
<p>一般情况下，一个程序在机器上执行时，除了需要存储程序本身的指令、常数、变量和输入数据外，还需要存储对数据操作的存储单元。若输入数据所占空间只取决于问题本身，和算法无关，这样只需要分析该算法在实现时所需的辅助单元即可。若算法执行时所需的辅助空间相对于输入数据量而言是个常数，则称此算法为原地工作，空间复杂度为 O(1)。</p>
<ul>
<li>关于 O(1) 的问题， O(1) 是说数据规模和临时变量数目无关，并不是说仅仅定义一个临时变量。举例：无论数据规模多大，我都定义 100 个变量，这就叫做数据规模和临时变量数目无关。就是说空间复杂度是 O(1)。</li>
<li>那就是指函数运行时处理数据的规模与空间和时间的一个变化时的比例关系，不是具体的数值。</li>
</ul>
<p>当一个算法的空间复杂度为一个常量，即不随被处理数据量 n 的大小而改变时，可表示为 O(1)；当一个算法的空间复杂度与以 2 为底的 n 的对数成正比时，可表示为 0(10g2n)；当一个算法的空 I 司复杂度与 n 成线性比例关系时，可表示为 0(n). 若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。</p>
<ul>
<li>通常，我们都使用 “时间复杂度” 来指运行时间的需求，使用 “空间复杂度” 指空间需求。当不用限定词地使用 “复杂度” 时，通常都是指时间复杂度。</li>
</ul>
<p>对于一个<a href="http://www.nowamagic.net/librarys/veda/tag/算法" target="_blank" rel="external">算法</a>，其时间复杂度和空间复杂度往往是相互影响的。当追求一个较好的时间复杂度时，可能会使空间复杂度的性能变差，即可能导致占用较多的存储空间；反之，求一个较好的空间复杂度时，可能会使时间复杂度的性能变差，即可能导致占用较长的运行时间。另外，算法的所有性能之间都存在着或多或少的相互影响。因此，当设计一个算法 (特别是大型算法) 时，要综合考虑算法的各项性能，算法的使用频率，算法处理的数据量的大小，算法描述语言的特性，算法运行的机器系统环境等各方面因素，才能够设计出比较好的算法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文地址：<a href="http://www.nowamagic.net/librarys/veda/detail/2197" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/2197</a>，欢迎访问原出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity)S(n) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。渐近空间复杂度也常常简称为空间复杂度。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://huyaohui.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://huyaohui.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何计算算法的时间复杂度</title>
    <link href="http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-shi-jian-fu-za-du/"/>
    <id>http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-shi-jian-fu-za-du/</id>
    <published>2018-12-05T11:43:49.000Z</published>
    <updated>2018-12-05T11:48:58.946Z</updated>
    
    <content type="html"><![CDATA[<p>算法的时间复杂度定义为：</p>
<p>在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n}=0(f(n))。它表示随问题规模 n 的增大，算法执行时间的埔长率和 f(n) 的埔长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f( n) 是问题规横 n 的某个函数。</p>
<a id="more"></a>
<ul>
<li>这样用大写 O() 来体现算法时间复杂度的记法，我们称之为大 O 记法。一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</li>
<li>之前我们说的三个求和算法的时间复杂度分别为 0(n)，0(1)，0(n<sup>2</sup>)。我就推一下吧。</li>
</ul>
<p>计算 1 + 2 + 3 + 4 + …… + 100。代码如下，之前也有讲过：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, sum = <span class="number">0</span>, n = <span class="number">100</span>;    <span class="comment">/* 执行1次 */</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">/* 执行 n+1 次 */</span></div><div class="line">    &#123;</div><div class="line">        sum = sum + i;          <span class="comment">/* 执行n次 */</span></div><div class="line">        <span class="comment">//printf("%d \n", sum);</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);          <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码附加的注释可以看到所有代码都执行了多少次。那么这写代码语句执行次数的总和就可以理解为是该算法计算出结果所需要的时间。该算法所用的时间（算法语句执行的总次数）为： 1 + (n + 1) + n + 1 = 2n + 3</p>
<p>而当 n 不断增大，比如我们这次所要计算的不是 1 + 2 + 3 + 4 + …… + 100 = ？ 而是 1 + 2 + 3 + 4 + …… + n = ？其中 n 是一个十分大的数字，那么由此可见，上述算法的执行总次数（所需时间）会随着 n 的增大而增加，但是在 for 循环以外的语句并不受 n 的规模影响（永远都只执行一次）。所以我们可以将上述算法的执行总次数简单的记做： 2n 或者简记 n</p>
<p>这样我们就得到了我们设计的算法的<a href="http://www.nowamagic.net/librarys/veda/tag/时间复杂度" target="_blank" rel="external">时间复杂度</a>，我们把它记作： O(n)</p>
<p>再来看看高斯的算法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, n = <span class="number">100</span>;   <span class="comment">/* 执行1次 */</span></div><div class="line">    sum = (<span class="number">1</span> + n) * n/<span class="number">2</span>;    <span class="comment">/* 执行1次 */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);      <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个算法的时间复杂度： O(3)，但一般记作 O(1)。</p>
<p>从感官上我们就不难看出，从算法的效率上看，O(3) &lt; O(n) 的，所以高斯的<a href="http://www.nowamagic.net/librarys/veda/tag/算法" target="_blank" rel="external">算法</a>更快，更优秀。</p>
<p>下面再来一个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j, x = <span class="number">0</span>, sum = <span class="number">0</span>, n = <span class="number">100</span>;  <span class="comment">/* 执行1次 */</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    &#123;</div><div class="line">        sum = sum + i;</div><div class="line">        <span class="comment">//printf("%d \n", sum);</span></div><div class="line">        <span class="keyword">for</span>( j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">        &#123;</div><div class="line">            x++;                <span class="comment">/* 执行n*n次 */</span></div><div class="line">            sum = sum + x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);          <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码严格的说不能称之为一个算法，毕竟它很 “无聊而且莫名其妙”（毕竟算法是为了解决问题而设计的嘛），先不论这个“算法” 能解决什么问题，我们看一下它的 “大 O 阶” 如何推导，还是先计算一下它的执行总次数：</p>
<p>执行总次数 = 1 + (n + 1) + n<em>(n + 1) + n</em>n + (n + 1) + 1 = 2n<sup>2</sup> + 3n + 3</p>
<p>如何推导大 o 阶呢？我们给出了下面 的推导方法：</p>
<ol>
<li>用常数 1 取代运行时间中的所有加法常数。</li>
<li>在修改后的运行次数函数中，只保留最髙阶项。</li>
<li>如果最高阶项存在且不是 1, 则去除与这个项相乘的常数。</li>
</ol>
<p>按照上面推导 “大 O 阶” 的步骤我们先来第一步：“用常数 1 取代运行时间中的所有加法常数”，则上面的算式变为：执行总次数 = 2n^2 + 3n + 1</p>
<p>第二步：“在修改后的运行次数函数中，只保留最高阶项”。这里的最高阶是 n 的二次方，所以算式变为：执行总次数 = 2n^2</p>
<p>第三步：“如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数”。这里 n 的二次方不是 1 所以要去除这个项的相乘常数，算式变为：执行总次数 = n^2</p>
<p>因此最后我们得到上面那段代码的算法时间复杂度表示为： O(n^2)</p>
<ul>
<li>最后我们在把常见的算法时间复杂度以及他们在效率上的高低顺序记录在这里，是大家对算法的效率有个直观的认识。</li>
</ul>
<p>O(1) 常数阶 &lt; O(logn) 对数阶 &lt; O(n) 线性阶 &lt; O(nlogn) &lt; O(n^2) 平方阶 &lt; O(n^3) &lt; { O(2^n) &lt; O(n!) &lt; O(n^n) }</p>
<ul>
<li>最后三项用大括号把他们括起来是想要告诉大家，如果日后大家设计的算法推导出的 “大 O 阶” 是大括号中的这几位，那么趁早放弃这个算法，在去研究新的算法出来吧。因为大括号中的这几位即便是在 n 的规模比较小的情况下仍然要耗费大量的时间，算法的时间复杂度大的离谱，基本上就是“不可用状态”。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文地址：<a href="http://www.nowamagic.net/librarys/veda/detail/2195" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/2195</a>，欢迎访问原出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法的时间复杂度定义为：&lt;/p&gt;
&lt;p&gt;在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n}=0(f(n))。它表示随问题规模 n 的增大，算法执行时间的埔长率和 f(n) 的埔长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f( n) 是问题规横 n 的某个函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://huyaohui.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://huyaohui.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>A dumb UI is a good UI: Using MVP in iOS with swift</title>
    <link href="http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/"/>
    <id>http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/</id>
    <published>2018-03-25T11:39:06.000Z</published>
    <updated>2018-03-25T13:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.<br>主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.<br>那么话说回来为什么要写这篇博文呢?<br>自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白</p>
<a id="more"></a>
<h2 id="MVC-模式介绍"><a href="#MVC-模式介绍" class="headerlink" title="MVC 模式介绍"></a>MVC 模式介绍</h2><p>当涉及到ios应用程序的开发时, 模型视图控制器是一种常见的设计模式.<br>通常视图层由 UIKit 中的元素组成, 这些元素通过程序或 xib 文件定义, 模型层包含应用程序的业务逻辑, 控制器层（由 UIViewController 类表示）是模型和视图之间的粘合剂. </p>
<p><img src="https://user-images.githubusercontent.com/8622405/37874567-ecd45016-3063-11e8-85ee-4d1ae6df6a48.png" alt="bildschirmfoto-2016-02-01-um-22 23 46"></p>
<p>这种模式的一个很好的部分是将业务逻辑和业务规则封装在模型层中. 但是, UIViewController 仍然包含与 UI 有关的逻辑, 这意味着如下：</p>
<ul>
<li>调用业务逻辑并将结果绑定到视图</li>
<li>管理视图元素</li>
<li>将来自模型层的数据转换为友好的格式</li>
<li>导航逻辑</li>
<li>管理 UI 状态</li>
<li>更多…</li>
</ul>
<p>承担所有这些工作, UIViewController 将会变得巨大而难以维护和测试. </p>
<p>所以, 现在是时候考虑改进 MVC 来处理这些问题了.<br>我们称之为改进 模型(Model)-视图(View)-主持人(Presenter) MVP. </p>
<h2 id="MVP-模式介绍"><a href="#MVP-模式介绍" class="headerlink" title="MVP 模式介绍"></a>MVP 模式介绍</h2><p>MVP 模式在1996年由 <a href="http://www.wildcrest.com/Potel/Portfolio/mvp.pdf" target="_blank" rel="external">Mike Potel</a> 首次引入, 并且多年来进行了多次讨论.<br>在他的文章中, <a href="http://martinfowler.com/eaaDev/uiArchs.html" target="_blank" rel="external">GUI架构</a> Martin Fowler 讨论了这种模式, 并将其与其他管理 UI 代码的模式进行了比较. </p>
<p>有很多 MVP 的变体, 它们之间有很小的差异.<br>在这篇文章中, 我选择了目前应用程序开发中常用的常用一种.<br>这个变体的特征是：</p>
<ul>
<li>MVP的视图部分包括uiview和UIViewController. </li>
<li>视图(View)将用户交互委托给主持人(Presenter). </li>
<li>主持人包含处理用户交互的逻辑. </li>
<li>主持人(Presenter)与模型(Model)层进行通信, 将数据转换为UI友好格式, 并更新视图(View). </li>
<li>主持人对 UIKit 没有依赖关系. </li>
<li>视图是被动的 (dump)</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/8622405/37874568-ed6f0386-3063-11e8-830e-6a0ded0f0143.png" alt="bildschirmfoto-2016-02-01-um-22 23 57"></p>
<h2 id="MVP-操作示例"><a href="#MVP-操作示例" class="headerlink" title="MVP 操作示例"></a>MVP 操作示例</h2><p>以下示例将向您展示如何在操作中使用 MVP</p>
<p>我们的示例是一个非常简单的应用程序, 它只显示一个简单的用户列表. 您可以从这里获得完整的源代码: <a href="https://github.com/iyadagha/iOS-mvp-sample" target="_blank" rel="external">https://github.com/iyadagha/iOS-mvp-sample</a> .</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>让我们从用户的简单数据模型开始：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> lastName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> email: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h3><p>那么我们实现一个简单的用户服务, 即异步返回用户列表：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//the service delivers mocked data with a delay</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack:<span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>)&#123;</div><div class="line">        <span class="keyword">let</span> users = [<span class="type">User</span>(firstName: <span class="string">"Iyad"</span>, lastName: <span class="string">"Agha"</span>, email: <span class="string">"iyad@test.com"</span>, age: <span class="number">36</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mila"</span>, lastName: <span class="string">"Haward"</span>, email: <span class="string">"mila@test.com"</span>, age: <span class="number">24</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mark"</span>, lastName: <span class="string">"Astun"</span>, email: <span class="string">"mark@test.com"</span>, age: <span class="number">39</span>)</div><div class="line">                    ]</div><div class="line"> </div><div class="line">        <span class="keyword">let</span> delayTime = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(<span class="number">2</span> * <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>)))</div><div class="line">        dispatch_after(delayTime, dispatch_get_main_queue()) &#123;</div><div class="line">            callBack(users)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserPresenter"><a href="#UserPresenter" class="headerlink" title="UserPresenter"></a>UserPresenter</h3><p>下一步是编写userpresenter.<br>首先我们需要用户的数据模型, 可以直接在视图中使用.<br>它包含根据需要从视图中正确格式化的数据：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserViewData</span></span>&#123;   </div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserView"><a href="#UserView" class="headerlink" title="UserView"></a>UserView</h3><p>之后, 我们需要对视图进行抽象, 这可以在 Presenter 不知道 UIViewController 的情况下使用.<br>我们通过定义一个协议 UserView 来做到这一点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UserView</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该协议将在 Presenter 中使用, 稍后将在 UIViewController 中实现. 基本上, 协议包含了在 Presenter 中控制 View 的函数调用. </p>
<p>Presenter 看起来是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userService:<span class="type">UserService</span></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">private</span> <span class="keyword">var</span> userView : <span class="type">UserView</span>?</div><div class="line">     </div><div class="line">    <span class="keyword">init</span>(userService:<span class="type">UserService</span>)&#123;</div><div class="line">        <span class="keyword">self</span>.userService = userService</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attachView</span><span class="params">(view:UserView)</span></span>&#123;</div><div class="line">        userView = view</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detachView</span><span class="params">()</span></span> &#123;</div><div class="line">        userView = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">self</span>.userView?.startLoading()</div><div class="line">        userService.getUsers&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] users <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.userView?.finishLoading()</div><div class="line">            <span class="keyword">if</span>(users.<span class="built_in">count</span> == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">self</span>?.userView?.setEmptyUsers()</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">let</span> mappedUsers = users.<span class="built_in">map</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="type">UserViewData</span>(name: <span class="string">"<span class="subst">\($<span class="number">0</span>.firstName)</span> <span class="subst">\($<span class="number">0</span>.lastName)</span>"</span>, age: <span class="string">"<span class="subst">\($<span class="number">0</span>.age)</span> years"</span>)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">self</span>?.userView?.setUsers(mappedUsers)</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将在后面看到 Presenter 可以通过函数<code>attachView(view:UserView)</code>和<code>attachView(view:UserView)</code>来更好地控制 UIViewContoller 的生命周期方法<br>请注意, 将<code>User</code>转换为<code>UserViewData</code>是 Presenter 的责任.<br>还要注意, <code>userView</code>必须<code>weak</code>以避免保留周期. </p>
<h3 id="UserViewController"><a href="#UserViewController" class="headerlink" title="UserViewController"></a>UserViewController</h3><p>实现的最后一部分是UserViewController:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emptyView: <span class="type">UIView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> activityIndicator: <span class="type">UIActivityIndicatorView</span>?</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userPresenter = <span class="type">UserPresenter</span>(userService: <span class="type">UserService</span>())</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> usersToDisplay = [<span class="type">UserViewData</span>]()</div><div class="line"> </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView?.dataSource = <span class="keyword">self</span></div><div class="line">        activityIndicator?.hidesWhenStopped = <span class="literal">true</span></div><div class="line"> </div><div class="line">        userPresenter.attachView(<span class="keyword">self</span>)</div><div class="line">        userPresenter.getUsers()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的 ViewController 有一个 tableView 来显示用户列表、一个 emptyView (如果没有用户时显示)和一个当应用程序正在加载用户时显示的 activityIndicator. 此外, 它还有一个 userPresenter 和一个用户列表. </p>
<p>在<code>viewDidLoad方</code>法中, UserViewController将自己连接到 Presenter.<br>这是可行的, 因为我们很快就会看到 UserViewController 实现了 UserView 协议. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UserView</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.startAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.stopAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        usersToDisplay = users</div><div class="line">        tableView?.hidden = <span class="literal">false</span></div><div class="line">        emptyView?.hidden = <span class="literal">true</span>;</div><div class="line">        tableView?.reloadData()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        tableView?.hidden = <span class="literal">true</span></div><div class="line">        emptyView?.hidden = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如我们所看到的, 这些函数不包含复杂的逻辑, 他们只是在进行纯视图管理. </p>
<h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><p>最后, UITableViewDataSource 实现非常基本, 看起来如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> usersToDisplay.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Subtitle</span>, reuseIdentifier: <span class="string">"UserCell"</span>)</div><div class="line">        <span class="keyword">let</span> userViewData = usersToDisplay[indexPath.row]</div><div class="line">        cell.textLabel?.text = userViewData.name</div><div class="line">        cell.detailTextLabel?.text = userViewData.age</div><div class="line">        cell.textLabel</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-images.githubusercontent.com/8622405/37874569-edd27b1e-3063-11e8-9c88-b3c914ddfed7.png" alt="mvp-ios-e1454670703144"></p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>做MVP的好处之一是能够在不测试UIViewController本身的情况下测试大部分UI逻辑.<br>如果我们对我们的 Presenter 有一个很好的单元测试覆盖范围, 我们就不需要为UIViewController编写单元测试了. </p>
<p>现在让我们看看如何测试我们的UserPresenter. 首先, 我们定义两个mock对象. 其中一个mock是UserService, 以使它提供所需的用户列表. 另一个mock是UserView, 以验证这些方法是否被正确调用. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceMock</span>: <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> users: [<span class="type">User</span>]</div><div class="line">    <span class="keyword">init</span>(users: [<span class="type">User</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.users = users</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack: <span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        callBack(users)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewMock</span> : <span class="title">NSObject</span>, <span class="title">UserView</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> setUsersCalled = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> setEmptyUsersCalled = <span class="literal">false</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        setUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        setEmptyUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在, 我们可以测试当服务提供一个非空用户列表时, Presenter 的行为是否正确. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenterTest</span>: <span class="title">XCTestCase</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> emptyUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>]())</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> towUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>(firstName: <span class="string">"firstname1"</span>, lastName: <span class="string">"lastname1"</span>, email: <span class="string">"first@test.com"</span>, age: <span class="number">30</span>),</div><div class="line">                                                     <span class="type">User</span>(firstName: <span class="string">"firstname2"</span>, lastName: <span class="string">"lastname2"</span>, email: <span class="string">"second@test.com"</span>, age: <span class="number">24</span>)])</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testShouldSetUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">        <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: towUsersServiceMock)</div><div class="line">        userPresenterUnderTest.attachView(userViewMock)</div><div class="line"> </div><div class="line">        <span class="comment">//when</span></div><div class="line">        userPresenterUnderTest.getUsers()</div><div class="line"> </div><div class="line">        <span class="comment">//verify</span></div><div class="line">        <span class="type">XCTAssertTrue</span>(userViewMock.setUsersCalled)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的, 如果服务返回一个空的用户列表, 我们也可以测试 Presenter 是否正确工作. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">testShouldSetEmptyIfNoUserAvailable</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">    <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: emptyUsersServiceMock)</div><div class="line">    userPresenterUnderTest.attachView(userViewMock)</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    userPresenterUnderTest.getUsers()</div><div class="line"></div><div class="line">    <span class="comment">//verify</span></div><div class="line">    <span class="type">XCTAssertTrue</span>(userViewMock.setEmptyUsersCalled)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Where-to-go-from-there"><a href="#Where-to-go-from-there" class="headerlink" title="Where to go from there"></a>Where to go from there</h2><p>我们已经看到了MVP是MVC的演进. 我们只需要将UI逻辑放在一个名为 Presenter 的额外组件中, 并 被动的 (dump) 使我们的UIViewController. </p>
<p>MVP的特点之一是 Presenter 和 View 互相认识.<br>在这种情况下, 视图 UIViewController 具有对演示者的引用, 反之亦然.<br>尽管可以使用反应式编程来删除演示者中使用的视图的参考.<br>使用 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a> 或 <a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a> 等响应式框架, 可以构建一个体系结构, 其中只有 View 知道 Presenter, 反之亦然.<br>在这种情况下, 架构将被称为 MVVM. </p>
<p>如果你想在iOS中了解更多关于MVVM的信息, 请查看以下帖子:<br><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1" target="_blank" rel="external">MVVM Tutorial with ReactiveCocoa</a><br><a href="https://medium.com/cobe-mobile/implementing-mvvm-in-ios-with-rxswift-458a2d47c33d#.3zb8ebzqf" target="_blank" rel="external">Implementing MVVM in iOS with RxSwift</a></p>
<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="http://iyadagha.com/using-mvp-ios-swift/" target="_blank" rel="external">http://iyadagha.com/using-mvp-ios-swift/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.&lt;br&gt;主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.&lt;br&gt;那么话说回来为什么要写这篇博文呢?&lt;br&gt;自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://huyaohui.com/tags/Swift/"/>
    
      <category term="MVP" scheme="http://huyaohui.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>打包 Qt 应用时关于动态链接库的一些注意事项</title>
    <link href="http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/"/>
    <id>http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/</id>
    <published>2018-01-04T10:11:33.000Z</published>
    <updated>2018-01-04T10:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. </p>
<a id="more"></a>
<p>首先你需要安装一个干净的操作系统, 使用虚拟机就好了, 保持你的虚拟机和你开发的电脑在同一个网段内(Ps: 方便传输数据)</p>
<p>如何安装虚拟机这里就不细说了, 网上搜索一大堆资料.</p>
<ol>
<li>打包好后, 吧包传到虚拟机内</li>
<li>打开可执行程序, 如果能正常打开, 那么表示你的库连接没有问题</li>
<li>如果弹出提示框, 说你缺少什么, 那么你需要到你的开发环境里去找到这个库, 然后拷贝到可执行程序同目录下的的<code>Frameworks</code>目录里, 直到程序可运行</li>
</ol>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>不同平台之间的一些细微差别</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 平台如果出现问题, 会弹出一个崩溃框, 点击<code>报告</code>按钮, 可以看到崩溃日志, 里面会告诉你除了什么问题, 按照提示操作即可</p>
<p>当你的<code>Frameworks</code>目录下确实存在这个运行库的时候, 还是爆类似如下的错误时, 可检查是否是链接库的链接位置有问题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Termination Reason:    DYLD, [0x1] Library missing</div><div class="line"></div><div class="line">Application Specific Information:</div><div class="line">dyld: launch, loading dependent libraries</div><div class="line"></div><div class="line">Dyld Error Message:</div><div class="line">  Library not loaded: /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2k/lib/libcrypto.1.0.0.dylib</div><div class="line">  Referenced from: /Applications/MyApp/MyApp.app/Contents/Frameworks/libssl.1.0.0.dylib</div><div class="line">  Reason: image not found</div></pre></td></tr></table></figure>
<h4 id="查看链接位置"><a href="#查看链接位置" class="headerlink" title="查看链接位置"></a>查看链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> MyApp.app/Contents/Frameworks</div><div class="line">$ otool -L libssl.1.0.0.dylib</div><div class="line"></div><div class="line">libssl.1.0.0.dylib:</div><div class="line">    @executable_path/../Frameworks/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)</div></pre></td></tr></table></figure>
<p>通过上面可知, 确实是链接位置有问题, 应该是一个相对路径才对</p>
<h4 id="修改链接位置"><a href="#修改链接位置" class="headerlink" title="修改链接位置"></a>修改链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ install_name_tool -change /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib @executable_path/../Frameworks/libcrypto.1.0.0.dylib libssl.1.0.0.dylib</div></pre></td></tr></table></figure>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux 平台需要使用终端运行可执行程序, 因为自己双击打开可执行程序, 无法查看错误日志.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 平台和 macOS 平台太类似, 只不过 Windows 平台太会直接告诉你出了什么问题</p>
<p>需要注意的是: 如果出现了<code>api-ms-win-crt-runtime-l1-1-0.dll</code>丢失, 那么意味着客户机没有安装运行库, 安装<code>msvc2016_x64</code>或者<code>msvc2016_x32</code>即可, google 一下就可以查看到详情了, 这里不细说了</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib" target="_blank" rel="external">https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib</a></p>
<p><a href="https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x" target="_blank" rel="external">https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. &lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://huyaohui.com/categories/Build/"/>
    
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
      <category term="macOS" scheme="http://huyaohui.com/tags/macOS/"/>
    
      <category term="Linux" scheme="http://huyaohui.com/tags/Linux/"/>
    
      <category term="Windows" scheme="http://huyaohui.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Fix Qt launching debugger not work</title>
    <link href="http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/"/>
    <id>http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/</id>
    <published>2018-01-04T08:33:35.000Z</published>
    <updated>2018-01-04T08:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次手贱导致 Qt debugger 无法工作的经历<br>事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.<br>我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.</p>
<a id="more"></a>
<h2 id="错误log"><a href="#错误log" class="headerlink" title="错误log"></a>错误log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">eERROR: Lldb stderr: Traceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eERROR: Lldb stderr:   File &quot;/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python/lldb/__init__.py&quot;, line 98, in &lt;module&gt;</div><div class="line">e    import six</div><div class="line">eImportError: No module named six</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eerror: python failed attempting to evaluate &apos;print(&apos;@\nlldbstartupok@\n&apos;)&apos;</div></pre></td></tr></table></figure>
<p>google 到的解决方案是需要安装<code>pip install six</code>这个包</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="卸载-brew-安装的-python"><a href="#卸载-brew-安装的-python" class="headerlink" title="卸载 brew 安装的 python"></a>卸载 brew 安装的 python</h3><p>如果不卸载, 无法使用系统 python, <code>LLDB</code>调用的是系统的 python 而不是自己安装的<br>需要注意的是, 卸载完后需要重启一下控制台</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall --ignore-dependencies python</div></pre></td></tr></table></figure>
<h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">sudo python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="安装-six-包"><a href="#安装-six-包" class="headerlink" title="安装 six 包"></a>安装 six 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install six</div></pre></td></tr></table></figure>
<p>ok, 打完收工, 完美如初</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要手贱, 不要手贱, 不要手贱…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次手贱导致 Qt debugger 无法工作的经历&lt;br&gt;事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.&lt;br&gt;我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Debug" scheme="http://huyaohui.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>解决Qt使用动画更改窗口大小时窗口内部件闪烁的问题</title>
    <link href="http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/"/>
    <id>http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/</id>
    <published>2017-11-24T07:25:06.000Z</published>
    <updated>2017-12-30T13:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命不息, 趟坑不止. 还好都能解决, 可喜可贺.<br>先来说下这次踩的又是什么坑吧, 当你使用<code>QPropertyAnimation</code>修改<code>window</code>的<code>size</code>的时候, <code>window</code>内的<code>widget</code>会出现闪烁的现象, 当时的猜测应该是因为<code>widget</code>没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o</p>
<a id="more"></a>
<h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><p>Native Widgets vs Alien Widgets</p>
<p>Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing system. They do not have a native window handle associated with them. This feature significantly speeds up widget painting, resizing, and removes flicker.</p>
<p>Should you require the old behavior with native windows, you can choose one of the following options:</p>
<ul>
<li>Use the <code>QT_USE_NATIVE_WINDOWS</code>=1 in your environment.</li>
<li>Set the <code>Qt::AA_NativeWindows</code> attribute on your application. All widgets will be native widgets.</li>
<li>Set the <code>Qt::WA_NativeWindow</code> attribute on widgets: The widget itself and all of its ancestors will become native (unless <code>Qt::WA_DontCreateNativeAncestors</code> is set).</li>
<li>Call <code>QWidget::winId</code> to enforce a native window (this implies 3).</li>
<li>Set the <code>Qt::WA_PaintOnScreen</code> attribute to enforce a native window (this implies 3).</li>
</ul>
<p>原文地址: <a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a></p>
<p>英语渣这里就不翻译了, 大概意思就是<code>Qt 4.4</code>里面引用了一种机制可以消除闪烁的现象, 但是不知道为什么在<code>5.0</code>之后又移除了这个功能, 只做一个选项供大家使用(Ps: 这一点上文并没有提到, 但是联想到这是<code>Qt5</code>的文档应该也能想到, 但是我还是找到了有人在社区的提问, 单是没人回, 这就很微妙了<a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">-&gt;_-&gt;传送门</a>)</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>上文已经说了不过我这里还是写一下, 都是我测试过的哦..<br>上文中提到的方法, 我只试了两个, 其他的并未尝试, 故不做说明, 见谅</p>
<h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>作用于整个应用</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qApp-&gt;setAttribute(Qt::AA_NativeWindows, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="单个设置"><a href="#单个设置" class="headerlink" title="单个设置"></a>单个设置</h3><p>作用于单个<code>QWidget</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">widget-&gt;setAttribute(Qt::WA_NativeWindow, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当全局设置该属性后, 会导致<code>QTextEdit</code>和<code>QPlainTextEdit</code>无法输入中文</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a><br><a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命不息, 趟坑不止. 还好都能解决, 可喜可贺.&lt;br&gt;先来说下这次踩的又是什么坑吧, 当你使用&lt;code&gt;QPropertyAnimation&lt;/code&gt;修改&lt;code&gt;window&lt;/code&gt;的&lt;code&gt;size&lt;/code&gt;的时候, &lt;code&gt;window&lt;/code&gt;内的&lt;code&gt;widget&lt;/code&gt;会出现闪烁的现象, 当时的猜测应该是因为&lt;code&gt;widget&lt;/code&gt;没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt图标显示模糊原因及解决方法</title>
    <link href="http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/"/>
    <id>http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/</id>
    <published>2017-10-19T10:25:29.000Z</published>
    <updated>2017-10-20T09:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>自使用<code>Qt</code>以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过<code>Qss</code>来设置图标就不会出现失真的情况, 还有一种方案就是使用<code>svg</code>格式的图片, 也能解决部分问题<br>但是这两种方法在设置<code>QLineEdit</code>的<code>icon</code>的时候无效了.<br>没办法继续找答案, 灵光一闪间, 想起了<code>iOS</code>开发中有<code>@2x</code>和<code>@3x</code>的图片, 用来适配不同屏幕分辨率, 于是搜索<code>qt mac  图片 两倍大小</code>, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o</p>
<a id="more"></a>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>The key to the OS X high-dpi mode is that most geometry that was previously specified in device pixels are now in device-independent points. This includes desktop geometry (which on the 15 inch retina MacBook Pro is 1440×900 and not the full 2880×1800), window geometry and event coordinates. The CoreGraphics paint engine is aware of the full resolution and will produce output at that resolution. For example, a 100×100 window occupies the same area on screen on a normal and high-dpi screen (everything else being equal). On the high-dpi screen the window’s backing store contains 200×200 pixels.</p>
<p>The main benefits of this mode is backwards compatibility and free high-dpi vector graphics. Unaware applications simply continue to work with the same geometry as before and can keep hardcoded pixel values. At the same time they get crisp vector graphics such as text for free. Raster graphics does not get an automatic improvement but is manageable. The downside is the inevitable coordinate system confusion when working with code that mixes points and pixels.</p>
<p>The scale factor between points and pixels is always 2x. This is also true when changing the screen resolution – points and pixels are scaled by the same amount. When scaling for “More Space” applications will render to a large backing store which is then scaled down to the physical screen resolution.</p>
<p>不知道怎么翻译o(╯□╰)o, 大概意思就是<code>OS X</code>采用的是<code>retina</code>屏幕, 这种屏幕在相同尺寸的情况下的一个像素点是之前屏幕的两倍, 也就是<a href="https://zh.wikipedia.org/wiki/%E6%AF%8F%E8%8B%B1%E5%AF%B8%E7%82%B9%E6%95%B0" target="_blank" rel="external">DPI</a>更高<br>而<code>Qt</code>默认并不支持这种处理方式, 所以导致实际有一个像素点对应屏幕上两个像素点, 这也就是失真的原因了</p>
<p>原文地址: <a href="http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/" target="_blank" rel="external">http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用<code>QPainter</code>手动设置绘制大小, 如下代码的图片绘制已经被修改成了可以在高DPI系统中返回一个更大的像素映射, 但是这种行为会破坏现有的代码结构, 代码来控制最好的情况应该是<code>Qt</code>框架来直接控制</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">QRect destinationRect = ...</div><div class="line">QIcon icon = ...</div><div class="line">painter.drawPixmap(destinationRect, icon.pixmap(destinationRect.size()));</div><div class="line">QIcon::pixmap()</div></pre></td></tr></table></figure>
<p>所以<code>Qt</code>使用<code>AA_UseHighDpiPixmaps</code>这个应用程序属性来控制渲染：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在Qt 5.1和之后的版本中这个属性默认值是关闭的, 需要手动开启</div><div class="line">qApp-&gt;setAttribute(Qt::AA_UseHighDpiPixmaps);</div></pre></td></tr></table></figure>
<h2 id="一些奇怪的地方"><a href="#一些奇怪的地方" class="headerlink" title="一些奇怪的地方"></a>一些奇怪的地方</h2><p>当没有开启搞质量<code>DPI</code>时:<br>经过尝试, 使用svg矢量图来显示icon一切正常, 单是设置<code>QPushButton</code>的<code>icon</code>时无效, 设置<code>QTreeViewItem</code>的<code>icon</code>是正常的<br>还有就是貌似使用QSS设置icon也不会出现这个bug, 但是不是绝对的, 设置<code>QLineEdit</code>的<code>icon</code>的时候还是会模糊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自使用&lt;code&gt;Qt&lt;/code&gt;以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过&lt;code&gt;Qss&lt;/code&gt;来设置图标就不会出现失真的情况, 还有一种方案就是使用&lt;code&gt;svg&lt;/code&gt;格式的图片, 也能解决部分问题&lt;br&gt;但是这两种方法在设置&lt;code&gt;QLineEdit&lt;/code&gt;的&lt;code&gt;icon&lt;/code&gt;的时候无效了.&lt;br&gt;没办法继续找答案, 灵光一闪间, 想起了&lt;code&gt;iOS&lt;/code&gt;开发中有&lt;code&gt;@2x&lt;/code&gt;和&lt;code&gt;@3x&lt;/code&gt;的图片, 用来适配不同屏幕分辨率, 于是搜索&lt;code&gt;qt mac  图片 两倍大小&lt;/code&gt;, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QDialog 模态对话框和非模态对话框</title>
    <link href="http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/"/>
    <id>http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/</id>
    <published>2017-09-26T08:13:16.000Z</published>
    <updated>2017-10-17T07:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.<br>虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)</p>
<a id="more"></a>
<p>对话框是 GUI 程序中不可或缺的组成部分。很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。尽管 Ribbon 界面的出现在一定程度上减少了对话框的使用几率，但是，我们依然可以在最新版本的 Office 中发现不少对话框。因此，在可预见的未来，对话框会一直存在于我们的程序之中。</p>
<p>Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。</p>
<h2 id="QDialog的模态与非模态区别"><a href="#QDialog的模态与非模态区别" class="headerlink" title="QDialog的模态与非模态区别"></a>QDialog的模态与非模态区别</h2><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><p>简介: 在关闭模式对话框之前，程序不能进行其他工作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// exec()方法: 它总是以模态来显示对话框</span></div><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;exec();</div><div class="line"></div><div class="line"><span class="comment">// show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性</span></div><div class="line">Dialog *dialog2 = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog2-&gt;setModal(<span class="literal">true</span>);</div><div class="line">dialog2-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中当<code>Dialog</code>没关闭前, 无法操作<code>MainWindow</code></p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850572-81f2c330-a26b-11e7-9a8a-50cb8c56ec43.jpg" alt="qq20170926-163259 2x"></p>
<h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p>简介: 运行在应用程序中，对于任何其他窗口都是独立窗口</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// dialog2-&gt;setModal(false); // 默认是false</span></div><div class="line">dialog-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中<code>Dialog</code>和<code>MainWindow</code>互不影响</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850573-8237aac2-a26b-11e7-8829-e24ecc00a3d4.jpg" alt="qq20170926-162738 2x"></p>
<h3 id="特殊的模态对话框"><a href="#特殊的模态对话框" class="headerlink" title="特殊的模态对话框"></a>特殊的模态对话框</h3><p>简介: 在关闭模式对话框之前, 程序可以修改父窗口的大小, 并且对话框会固定停留在父窗口的标题下面</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;open();</div></pre></td></tr></table></figure>
<p>效果如下图</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850571-81f040ba-a26b-11e7-90af-04ac3973b725.jpg" alt="qq20170926-163208 2x"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.&lt;br&gt;虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Dialog" scheme="http://huyaohui.com/tags/Dialog/"/>
    
  </entry>
  
  <entry>
    <title>CMake C/CPP 混合编译</title>
    <link href="http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/"/>
    <id>http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/</id>
    <published>2017-09-25T06:53:25.000Z</published>
    <updated>2017-09-25T07:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实主要是要记录一下使用<code>CMake</code> <code>C/CPP</code>混编的一些细节, 要不然会被坑的很惨, 顺便把<code>C/CPP</code>混编原理和实现也说一下. </p>
<a id="more"></a>
<h2 id="C-C-混合编程是什么"><a href="#C-C-混合编程是什么" class="headerlink" title="C/C++混合编程是什么"></a>C/C++混合编程是什么</h2><p>就像问题本身所说, C/C++混合编程也就是一个工程中, 在C函数中调用C++函数的方法, 在C++的函数中能够调用C函数的方法.</p>
<h2 id="C-C-混合编程有什么用"><a href="#C-C-混合编程有什么用" class="headerlink" title="C/C++混合编程有什么用"></a>C/C++混合编程有什么用</h2><p>在我们日常开发中, 也许会遇到这么一些情况, 同事A, C非常牛逼, 但是对C++一窍不通; 同事B, C++信手拈来, 但是对C却满头雾水. 但是在工作中有这么一种需求, 同事A需要用到C++的方法, 同事B需要用到C的方法,  这怎么办? </p>
<p>没错, 最简单的就是, 同事A把C的代码写好, 然后同事B只管调用即可, 同理, 同事A只管调用同事B写好的C++代码, 各司其职, 提高工作效率.</p>
<h2 id="C-C-混合编程应该怎么实现"><a href="#C-C-混合编程应该怎么实现" class="headerlink" title="C/C++混合编程应该怎么实现"></a>C/C++混合编程应该怎么实现</h2><p>那么, 这混合编程究竟要怎么实现呢?</p>
<p>在介绍之前, 我们先简单了解下以下几个概念</p>
<h3 id="函数重载-Overloading"><a href="#函数重载-Overloading" class="headerlink" title="函数重载(Overloading)"></a>函数重载(Overloading)</h3><p>C++和Java中的函数重载的定义一致, </p>
<p>即在相同的作用域内, C++允许多个函数名称相同, 而形参列表不同: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 没有参数</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;	<span class="comment">// 有一个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;	<span class="comment">// 有一个double类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;	<span class="comment">// 有两个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 报错, 函数重载体现在函数名相同形参列表不同和返回类型无关</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而大家有没有想过为什么C++支持函数重载, 而C却不支持函数重载呢? </p>
<p>这个就要涉及到C++的名字改编机制了. 请往下看~</p>
<h3 id="C-的名字改编机制"><a href="#C-的名字改编机制" class="headerlink" title="C++的名字改编机制"></a>C++的名字改编机制</h3><h4 id="在C中"><a href="#在C中" class="headerlink" title="在C中"></a>在C中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成`_test` </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps: 不提供test()函数的实现是让<code>CMake</code>链接的时候报错, 这样我们才能看清楚test()函数的真面目!</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后依然是 _test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<h4 id="在C-中"><a href="#在C-中" class="headerlink" title="在C++中"></a>在C++中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成 test()</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"test()"</span>, referenced from:</div><div class="line">      run() in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后是 test(int)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps : 有的系统的编译器会编译成_test_int 这种格式, 名字改编机制只是一种思路, 并没有一种唯一的命名规范, 不同的编译器命名规范不同, 但是思路一致! 如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 编译后生成: test() 或 _test</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;   <span class="comment">// 编译后生成: test(int) 或 _test_int</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span></span>;    <span class="comment">// 编译后生成: test(double) 或 _test_double</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;    <span class="comment">// 编译后生成: test(int, int) 或 _test_int_int</span></div></pre></td></tr></table></figure>
<h4 id="extern-及-extern-“C”"><a href="#extern-及-extern-“C”" class="headerlink" title="extern 及 extern “C”"></a>extern 及 extern “C”</h4><p>extern相信大家比较熟悉, 它一般用来声明一个函数, 全局变量的作用域. extern告诉编译器, 其声明的函数和变量可以供本文件或者其他文件使用. 这里不再赘述. </p>
<p>extern “C” 中的C是什么意思呢?</p>
<p>这里的C不是指C语言这一门语言, 而是表示一种编译和链接的规约. C表示符合C语言的编译和连接规约的任何语言，如Fortran(公式翻译)、assembler(汇编语言)等。</p>
<p>ps: extern “C” 只是指定编译和链接的规约, 并不会影响语义, 所以在C++文件中该怎么写还得怎么写, 必须遵循C++的语法规范. </p>
<blockquote>
<p>在C++源文件的语句前加上 extern “C” 的作用就是告诉编译器, 这一段代码按照类C的编译和链接规约来编译和链接(对, 也就是按照类C的函数命名规范编译)</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>通过上面几个例子, 相信大家很容易就能知道为什么C++支持重载而C不支持重载了.<br>因为C++有名字改编机制而C没有!<br>所以在C中, 只要函数名相同, 不管你的形参列表如何南辕北辙, 编译器均会将其编译为同一函数名, 这样在程序执行过程中就会造成函数调用的二义性(也就是对于相同函数名的函数, 程序并不知道应该调用哪一个函数), 这是不允许的, 所以会报错.<br>然而对于C++而言, 尽管他们的函数名相同, 但是因为他们的形参列表不同, 编译器编译后实际上会为他们改名为不同名字的函数, 所以程序执行调用函数的时候并不会产生二义性, 因此C++允许函数重载.<br>这里扯一句题外话, C++的重载被认为不是多态, 因为多态是动态运行时对方法的绑定, 而C++的函数重载最多算是编译时的”多态”. (这句话不一定正确, 请大家纠正)</p>
</blockquote>
<h2 id="CPP调用C代码"><a href="#CPP调用C代码" class="headerlink" title="CPP调用C代码"></a>CPP调用C代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种方法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cpp.h"</span></span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二种方法</span></div><div class="line"><span class="comment">// c.h 文件定义规则</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// Do something...</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里有一点需要注意当<code>CMake</code>的<code>project(projectname LANGUAGES CXX)</code>方法指定了语言时, <code>CMake</code>只会编译指定的语言的代码, 而导致<code>C</code>语言代码不被编译, 这里需要特别注意</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>当需要使用到C/CPP混编时需要用到<code>extern &quot;C&quot;</code></li>
<li>当<code>CMake</code>指定了语言时, 只有指定的语言才会参与编译</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code" target="_blank" rel="external">https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code</a><br><a href="http://guangming008.blog.163.com/blog/static/1203968201011634426908/" target="_blank" rel="external">http://guangming008.blog.163.com/blog/static/1203968201011634426908/</a><br><a href="http://www.jianshu.com/p/8d3eb96e142a" target="_blank" rel="external">http://www.jianshu.com/p/8d3eb96e142a</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实主要是要记录一下使用&lt;code&gt;CMake&lt;/code&gt; &lt;code&gt;C/CPP&lt;/code&gt;混编的一些细节, 要不然会被坑的很惨, 顺便把&lt;code&gt;C/CPP&lt;/code&gt;混编原理和实现也说一下. &lt;/p&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>Qt StyleSheet 作用范围</title>
    <link href="http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/"/>
    <id>http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/</id>
    <published>2017-08-10T12:14:26.000Z</published>
    <updated>2017-08-10T13:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到<code>Qss</code>和<code>css</code>是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~</p>
<a id="more"></a>
<h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><p>在开发界面的过程中, 莫名其面的<code>QTableWidget</code>的滚动条变成方块了, 然后我单独开启一个项目测试又是正常的, 感觉非常奇怪<br>后来我惊讶的发现只要把<code>QTableWidget</code>的父节点<code>QWidget</code>改成删除就好了, 我想当然的以为是<code>QWidget</code>的bug, 我就把父节点<code>QWidget</code>换成<code>QFrame</code>, 居然可以了, 这让我更加确信是<code>QWidget</code>的bug了, 也让我走进了万劫不复的深渊<br>然后我继续忙, 突然间<code>QTableWidget</code>的滚动条又变成方块了, 遂陷入沉思, 最后决定放弃, 先把滚动条关闭再说, 不想再折腾这个东西了(已经折腾两天了/(ㄒoㄒ)/~~)<br>在写<code>Qss</code>的时候不小心写错了个单词, 然后发现控制台出现了, 好几个相同的报错, 遂想到是不是当前节点的子节点也修改了这个属性呢? 当时还没想到是这个原因导致的滚动条bug(前面说了我已经放弃了)<br>再后来我不甘心继续找滚动条bug的原因, 我还怀疑是<code>Qt</code>版本的问题, 于是就用一个旧版本去重新实现该功能, 发现一切正常, 我又相当然的以为真是<code>Qt</code>的bug, 然后我大喜欢把项目迁移的旧版<code>Qt</code>上, 又发现直接用旧版本<code>Qt</code>打开<code>.ui</code>文件滚动条bug还在, 于是乎我就用旧版本<code>Qt</code>重新吧界面画了一遍, 一开始的时候还没问题, 但是当我改完细节后, 立马就不行了, 滚动条bug又出现了<br>于是乎我慢慢的撤销代码, 一步一步测试, 最后发现是设置了<code>Qss</code>才导致的滚动条bug, 突然灵光一闪记起来了之前的写出单词导致控制台出现相同的报错, 一切的线索都链接起来了<br>终于知道为什么连google都找不答案, 原来是直接太傻逼了, 最后搜索 <code>qt stylesheet</code>搜索框下面直接出现了<code>qt stylesheet 仅限当前</code>, 我想我肯定找到答案了</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th style="text-align:left">选择器</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">通用选择器</td>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配所有的widget</td>
</tr>
<tr>
<td style="text-align:left">类型选择器</td>
<td style="text-align:left">QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例和继承于它的子类</td>
</tr>
<tr>
<td style="text-align:left">属性选择器</td>
<td style="text-align:left">QPushButton[flat=”false”]</td>
<td style="text-align:left">匹配所有非flat的QPushButton(通常情况下，使用Q_PROPERTY宏来声明你的属性，比如此例中的flat),并且要注意，你的属性类型要受 QVariant::toString()支持(查看toString()方法的帮助文档以获取更详细的解释). <br>这个选择器类型也可以用来判断动态属性，要了解更多使用自定义动态属性的细节，请参考使用自定义动态属性 。<br>除了使用=，你还可以使用~=来判断一个QStringList中是否包含给定的QString。<br>警告：如果在设置了样式表后，相应的属性值发生了改变(如：flat变成了”true”)，则有必要重新加载样式表，一个有效的方法是，取消样式表，再重新设置一次,下面的代码是其中一种方式：<br>style()-&gt;unpolish(this);<br>style()-&gt;polish(this);// force a stylesheet recomputation</td>
</tr>
<tr>
<td style="text-align:left">类选择器</td>
<td style="text-align:left">.QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例，但不包括它的子类，与*[class~=”QPushButton”]是等价的。</td>
</tr>
<tr>
<td style="text-align:left">ID选择器</td>
<td style="text-align:left">QPushButton#okButton</td>
<td style="text-align:left">匹配所有object name为”okButton”的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">后裔选择器</td>
<td style="text-align:left">QDialog QPushButton</td>
<td style="text-align:left">匹配所有继承于QDialog(包括其所有子孙)的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">子选择器</td>
<td style="text-align:left">QDialog &gt; QPushButton</td>
<td style="text-align:left">匹配所有直接继承与QDialog的QPushButton实例。</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/qq_24571549/article/details/64131396" target="_blank" rel="external">http://blog.csdn.net/qq_24571549/article/details/64131396</a><br><a href="http://blog.csdn.net/vonger/article/details/7899101" target="_blank" rel="external">http://blog.csdn.net/vonger/article/details/7899101</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到&lt;code&gt;Qss&lt;/code&gt;和&lt;code&gt;css&lt;/code&gt;是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Qss" scheme="http://huyaohui.com/tags/Qss/"/>
    
  </entry>
  
  <entry>
    <title>Qt Creator 编译第三方扩展库</title>
    <link href="http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/"/>
    <id>http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/</id>
    <published>2017-07-30T04:25:45.000Z</published>
    <updated>2017-07-30T08:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇关于Qt编译的文章以来<a href="http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/">CMake 编译 Qt 安装第三方 libqgit2 扩展</a>, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.<br>其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). </p>
<a id="more"></a>
<h2 id="之前失败的原因"><a href="#之前失败的原因" class="headerlink" title="之前失败的原因"></a>之前失败的原因</h2><p>主要原因是选择错了编译环境, 应该直接使用<code>Qt Creator</code>进行编译, 而我使用的是<code>Cmake GUI</code>进行的编译, 导致最后编译出来的库在<code>Qt</code>中部分功能无法正常使用.</p>
<h2 id="此次编译过程"><a href="#此次编译过程" class="headerlink" title="此次编译过程"></a>此次编译过程</h2><h3 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750561-b7233e3a-7521-11e7-8330-190bd28733a4.jpg" alt="qq20170730-121113 2x"></p>
<p>这一步非常重要, 之前我也试过直接使用<code>Qt Creator</code>导入第三方库, 会导入失败, 原因就在这没有选择<code>C编译器</code>(<code>libgit2</code>是<code>C语言库</code>)</p>
<h3 id="导入libgit2库"><a href="#导入libgit2库" class="headerlink" title="导入libgit2库"></a>导入libgit2库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750562-b75f4038-7521-11e7-8d7d-804f6273885b.jpg" alt="qq20170730-121325 2x"></p>
<p>直接选择<code>CMakeLists.txt</code>打开</p>
<h3 id="选择构建工具包"><a href="#选择构建工具包" class="headerlink" title="选择构建工具包"></a>选择构建工具包</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750564-b78d10c6-7521-11e7-8552-45fb7b1ac3d4.jpg" alt="qq20170730-121622 2x"></p>
<p>选择上面配置好<code>C编译器</code>的构建工具包</p>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750566-b797b1e8-7521-11e7-8089-88036c9f119b.jpg" alt="qq20170730-121658 2x"></p>
<p>最后构建出来的项目如上图所示, 如果没有配置<code>C编译器</code>的话就只能看到一个<code>CMakeLists.txt</code>文件, 然后点击运行</p>
<h3 id="最后生成的链接库"><a href="#最后生成的链接库" class="headerlink" title="最后生成的链接库"></a>最后生成的链接库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750565-b7975900-7521-11e7-9310-6684f3dce175.jpg" alt="qq20170730-121835 2x"></p>
<p>运行完成后, 不出意外的话会在项目同级目录下生成一个<code>build</code>目录, 里面有我们要的编译后生成的二进制文件, 至此编译完成.(在windows平台如法炮制就好, linux平台暂未测试)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇关于Qt编译的文章以来&lt;a href=&quot;http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/&quot;&gt;CMake 编译 Qt 安装第三方 libqgit2 扩展&lt;/a&gt;, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.&lt;br&gt;其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). &lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="libgit2" scheme="http://huyaohui.com/tags/libgit2/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>cocos2dx Texture、SpriteFrame、Sprite的区别</title>
    <link href="http://huyaohui.com/2017/07/28/cocos2dx-Texture%E3%80%81SpriteFrame%E3%80%81Sprite-de-qu-bie/"/>
    <id>http://huyaohui.com/2017/07/28/cocos2dx-Texture、SpriteFrame、Sprite-de-qu-bie/</id>
    <published>2017-07-28T13:24:10.000Z</published>
    <updated>2017-07-28T13:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.<br>前段时间查了下<code>Texture、SpriteFrame、Sprite的区别</code>(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.</p>
<a id="more"></a>
<h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>Texture是保存在GPU缓冲中的一张纹理。是由一张图片创建获得的</p>
<h2 id="SpriteFrame"><a href="#SpriteFrame" class="headerlink" title="SpriteFrame"></a>SpriteFrame</h2><p><code>SpriteFrame</code> = <code>Texture</code> + <code>Rect</code><br>也就是说<code>SpriteFrame</code>是根据一张纹理材质来剪切而获得的</p>
<h2 id="Sprite"><a href="#Sprite" class="headerlink" title="Sprite"></a>Sprite</h2><p>简单的说<code>Sprite</code>就是一个<code>SpriteFrame</code>的控制器, 可以控制<code>SpriteFrame</code>以何种形式进行渲染</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html" target="_blank" rel="external">http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html</a><br><a href="http://blog.csdn.net/huaweitman/article/details/11477493" target="_blank" rel="external">http://blog.csdn.net/huaweitman/article/details/11477493</a><br><a href="http://dwz.cn/6kkzf2" target="_blank" rel="external">精灵 (计算机图形学)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.&lt;br&gt;前段时间查了下&lt;code&gt;Texture、SpriteFrame、Sprite的区别&lt;/code&gt;(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/categories/Cocos2dx/"/>
    
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/tags/Cocos2dx/"/>
    
      <category term="Texture" scheme="http://huyaohui.com/tags/Texture/"/>
    
      <category term="SpriteFrame" scheme="http://huyaohui.com/tags/SpriteFrame/"/>
    
      <category term="Sprite" scheme="http://huyaohui.com/tags/Sprite/"/>
    
  </entry>
  
</feed>
