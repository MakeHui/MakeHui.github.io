<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MakeHui&#39;s 超平和バスターズはずっとなかよし</title>
  <subtitle>あの日見た花の名前を僕達はまだ知らない。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huyaohui.com/"/>
  <updated>2019-02-21T13:13:12.525Z</updated>
  <id>http://huyaohui.com/</id>
  
  <author>
    <name>MakeHui</name>
    <email>hulifu521003@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript 基本语法</title>
    <link href="http://huyaohui.com/2019/02/21/TypeScript-ji-ben-yu-fa/"/>
    <id>http://huyaohui.com/2019/02/21/TypeScript-ji-ben-yu-fa/</id>
    <published>2019-02-21T13:12:45.000Z</published>
    <updated>2019-02-21T13:13:12.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>TypeScript 是微软开发的 JavaScript 的超集，TypeScript 兼容 JavaScript，可以载入 JavaScript 代码然后运行。TypeScript 与 JavaScript 相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言。</p>
<p>TypeScript 微软官方网站 <a href="http://www.typescriptlang.org/" target="_blank" rel="external">http://www.typescriptlang.org/</a><br>TypeScript 源码 <a href="http://typescript.codeplex.com" target="_blank" rel="external">http://typescript.codeplex.com</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h1><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Boolean</div><div class="line">var isDone:boolean = false;</div></pre></td></tr></table></figure>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Number</div><div class="line">var width:number = 100;</div></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//String</div><div class="line">var name:string = &quot;hello&quot;;</div></pre></td></tr></table></figure>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//Array</div><div class="line">var list:number[] = [1, 2, 3];</div><div class="line">var list:Array&lt;number&gt;=[1, 2, 3];</div></pre></td></tr></table></figure>
<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Enum</div><div class="line">enum Color &#123;Red, Green, Blue&#125;</div><div class="line">var c: Color = Color.Red;</div><div class="line">alert(c);//默认值从0开始，alert(0);</div><div class="line">//可以手动指定值</div><div class="line">enum Color1 &#123;Red = 1, Green, Blue&#125;</div><div class="line">var c1: Color1 = Color1.Green;</div><div class="line">alert(c1);//alert(2)</div><div class="line">//根据值查找名称</div><div class="line">enum Color2 &#123;Red = 1, Green=2, Blue=4&#125;</div><div class="line">var c2: string = Color2[4];</div><div class="line">alert(c2);//alert(Blue)</div></pre></td></tr></table></figure>
<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//不确定类型，退出编译检查</div><div class="line">var notSure: any = 4;</div><div class="line">notSure = &quot;maybe a string instead&quot;;</div><div class="line">notSure = false; // okay, definitely a boolean</div><div class="line"></div><div class="line">//不确定数组元素类型</div><div class="line">var anylist:any[] = [1, true, &quot;free&quot;];</div><div class="line">anylist[1] = 100;</div></pre></td></tr></table></figure>
<h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//空白</div><div class="line">function warnUser(): void &#123;</div><div class="line">    alert(123);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    animalName:string;</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;: Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var tom = new Animal(&quot;Tom&quot;);</div><div class="line">tom.sayHello();//alert(Tom:Hello)</div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    animalName:string;</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;: Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat extends Animal &#123;</div><div class="line">    //重写sayHello方法</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Cat)：&quot; + &quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Mouse extends Animal &#123;</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Mouse)：&quot; + &quot;Hello&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var tom:Animal = new Cat(&quot;Tom&quot;);</div><div class="line">tom.sayHello();//alert(Tom(Cat):Hello)</div><div class="line">var jerry:Animal = new Mouse(&quot;Jerry&quot;);</div><div class="line">jerry.sayHello();//alert(Jerry(Mouse):Hello)</div></pre></td></tr></table></figure>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>当我们把 animalName 改为 private</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    private animalName:string;//默认是public</div><div class="line"></div><div class="line">    constructor(name:string) &#123;</div><div class="line">        this.animalName = name;</div><div class="line">    &#125;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat extends Animal &#123;</div><div class="line">    //重写sayHello方法</div><div class="line">    sayHello() &#123;</div><div class="line">        alert(this.animalName + &quot;(Cat)：&quot; + &quot;Hello&quot;);//Error 编译不通过</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="get，set-访问器"><a href="#get，set-访问器" class="headerlink" title="get，set 访问器"></a>get，set 访问器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    private _animalName:string;//默认是public</div><div class="line"></div><div class="line">    get animalName():string &#123;</div><div class="line">        return this._animalName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    set animalName(name:string):string &#123;</div><div class="line">        this._animalName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//静态属性</div><div class="line">class Table &#123;</div><div class="line">    static width = 100;</div><div class="line">    static height = 200;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var width = Table.width;</div><div class="line">alert(width);//alert(100)</div></pre></td></tr></table></figure>
<h1 id="3-接口"><a href="#3-接口" class="headerlink" title="3. 接口"></a>3. 接口</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">interface ICar &#123;</div><div class="line">    color:string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Bus implements ICar &#123;</div><div class="line">    color:string;</div><div class="line">    constructor() &#123;</div><div class="line">        this.color = &quot;Blue&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var bus = new Bus();</div><div class="line">alert(bus.color);</div></pre></td></tr></table></figure>
<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//继承接口</div><div class="line">interface Shape &#123;</div><div class="line">    color: string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface PenStroke &#123;</div><div class="line">    penWidth: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Square extends Shape, PenStroke &#123;</div><div class="line">    sideLength: number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">interface ICar &#123;</div><div class="line">    color:string;</div><div class="line">    safetyDevice?:any;//实现类无需实现</div><div class="line">&#125;</div><div class="line"></div><div class="line">function MoveCar(car:ICar)&#123;</div><div class="line">    if(car.safetyDevice)</div><div class="line">    &#123;</div><div class="line">        alert(&quot;The car is safe&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        alert(&quot;The car is not safe&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-模块（Modules）"><a href="#4-模块（Modules）" class="headerlink" title="4. 模块（Modules）"></a>4. 模块（Modules）</h1><blockquote>
<p>作用：1. 防止命名空间冲突；2. 将一个功能模块很容易的划分到不同文件中，更容易维护；</p>
</blockquote>
<h2 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module MyDemo &#123;</div><div class="line">    export interface IDemo &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    export class Demo implements IDemo &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module Shapes &#123;</div><div class="line">    export module Polygons &#123;</div><div class="line">        export class Triangle &#123; &#125;</div><div class="line">        export class Square &#123; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">import polygons = Shapes.Polygons;</div><div class="line">var sq = new polygons.Square(); // 类似于 &apos;new Shapes.Polygons.Square()&apos;</div></pre></td></tr></table></figure>
<h1 id="5-函数（Function）"><a href="#5-函数（Function）" class="headerlink" title="5. 函数（Function）"></a>5. 函数（Function）</h1><h2 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function add(x:number, y:number):number &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;</div><div class="line">// or</div><div class="line">var myAdd = function (x:number, y:number):number &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="完整的函数类型"><a href="#完整的函数类型" class="headerlink" title="完整的函数类型"></a>完整的函数类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(x:number, y:number)=&gt;number =</div><div class="line">    function (x:number, y:number):number &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>为了增强可读性，给参数 x、y 具有实际的意义，可以这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(baseValue:number, increment:number)=&gt;number =</div><div class="line">    function (x:number, y:number):number &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>第二部分 number 是一个返回类型，如果无需返回类型，请使用’void’<br>第三部分的 function 参数类型，根据上下文类型进行推断，可以省略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myAdd:(baseValue:number, increment:number)=&gt;number =</div><div class="line">    function (x, y) &#123;</div><div class="line">        return x + y;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//可选参数</div><div class="line">function buildName(firstName:string, lastName?:string) &#123;</div><div class="line">    if (lastName)</div><div class="line">        return firstName + &quot; &quot; + lastName;</div><div class="line">    else return firstName;</div><div class="line">&#125;</div><div class="line">var result1 = buildName(&quot;Bob&quot;);</div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//默认参数</div><div class="line">function buildNameDefaultValue(firstName: string, lastName = &quot;Smith&quot;) &#123;</div><div class="line">        return firstName + &quot; &quot; + lastName;</div><div class="line">&#125;</div><div class="line">var result1 = buildNameDefaultValue(&quot;Bob&quot;);</div></pre></td></tr></table></figure>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>例如在 C# 中，方法参数定义使用 param int[], 调用方法时，就可以传递多个 int 类型的参数<br>在 TypeScript 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function buildNameRest(firstName:string, ...restOfName:string[]) &#123;</div><div class="line">    return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var employeeName = buildNameRest(&quot;Joseph&quot;, &quot;Samuel&quot;, &quot;Lucas&quot;, &quot;MacKinzie&quot;)</div></pre></td></tr></table></figure>
<h2 id="Lambads-和-this-关键字"><a href="#Lambads-和-this-关键字" class="headerlink" title="Lambads 和 this 关键字"></a>Lambads 和 this 关键字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var people=&#123;</div><div class="line">    name:[&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;],</div><div class="line">    getName:function()&#123;</div><div class="line">        return function()&#123;</div><div class="line">            var i=Math.floor(Math.random()*4);</div><div class="line">            return &#123;</div><div class="line">                n:this.name[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var pname=people.getName();</div><div class="line">alert(&quot;名字：&quot;+pname().n);</div></pre></td></tr></table></figure>
<p>调用发现 getName 中的 this 关键字指向的是 getName, 访问不到外部的 name 属性<br>所以我们修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var people = &#123;</div><div class="line">    name: [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;],</div><div class="line">    getName: function () &#123;</div><div class="line">        return  ()=&gt; &#123;</div><div class="line">            var i = Math.floor(Math.random() * 4);</div><div class="line">            return &#123;</div><div class="line">                n: this.name[i]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var pname = people.getName();</div><div class="line">alert(&quot;名字：&quot; + pname().n);</div></pre></td></tr></table></figure>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//重载</div><div class="line">function student(name:string):string;</div><div class="line">function student(age:number):number;</div><div class="line">function student(numberorage:any):any &#123;</div><div class="line">    if (numberorage &amp;&amp; typeof (numberorage) == &quot;string&quot;)</div><div class="line">        alert(&quot;姓名&quot;);</div><div class="line">    else</div><div class="line">        alert(&quot;年龄&quot;);</div><div class="line">&#125;</div><div class="line">student(&quot;Tom&quot;);//alert(&quot;姓名&quot;)</div><div class="line">student(15);//alert(&quot;年龄&quot;)</div></pre></td></tr></table></figure>
<h1 id="6-泛型"><a href="#6-泛型" class="headerlink" title="6. 泛型"></a>6. 泛型</h1><h2 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function identity&lt;T&gt;(arg: T): T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//数组泛型</div><div class="line">function identity&lt;T&gt;(arg: T[]): T[] &#123;</div><div class="line">    console.log(arg.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="泛型类型（通用的函数类型）"><a href="#泛型类型（通用的函数类型）" class="headerlink" title="泛型类型（通用的函数类型）"></a>泛型类型（通用的函数类型）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function identity&lt;T&gt;(arg:T):T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line">var myIdentity:&lt;T&gt;(arg:T)=&gt;T = identity;//T也可使用其他字母表示</div><div class="line">//也可以这么写</div><div class="line">//var myIdentity:&#123;&lt;T&gt;(arg:T): T&#125; = identity;</div></pre></td></tr></table></figure>
<h2 id="接口泛型"><a href="#接口泛型" class="headerlink" title="接口泛型"></a>接口泛型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">interface GenericIdentityFn &#123;</div><div class="line">    &lt;T&gt;(arg:T): T;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function identity&lt;T&gt;(arg:T):T &#123;</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myIdentity:GenericIdentityFn = identity;</div></pre></td></tr></table></figure>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class GenericNumber&lt;T&gt; &#123;</div><div class="line">    zeroValue:T;</div><div class="line">    add:(x:T, y:T) =&gt; T;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myGenericNumber = new GenericNumber&lt;number&gt;();</div><div class="line">myGenericNumber.zeroValue = 0;</div><div class="line">myGenericNumber.add = function (x, y) &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">interface Lengthwise &#123;</div><div class="line">    length: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function loggingIdentity&lt;T extends Lengthwise&gt;(arg:T):T &#123;</div><div class="line">    console.log(arg.length);</div><div class="line">    return arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loggingIdentity(3);//error</div><div class="line">loggingIdentity(&#123;length: 10, value: 3&#125;);  //只要类型包含length属性即可</div></pre></td></tr></table></figure>
<h2 id="泛型类约束"><a href="#泛型类约束" class="headerlink" title="泛型类约束"></a>泛型类约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Findable&lt;T&gt;</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">function find&lt;T&gt;(n: T, s: Findable&lt;T&gt;) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-合并"><a href="#7-合并" class="headerlink" title="7. 合并"></a>7. 合并</h1><h2 id="合并接口"><a href="#合并接口" class="headerlink" title="合并接口"></a>合并接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">interface Box &#123;</div><div class="line">    height: number;</div><div class="line">    width: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface Box &#123;</div><div class="line">    scale: number;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var box: Box = &#123;height: 5, width: 6, scale: 10&#125;;</div></pre></td></tr></table></figure>
<h2 id="合并模块"><a href="#合并模块" class="headerlink" title="合并模块"></a>合并模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module Animals &#123;</div><div class="line">    exportclass Zebra &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module Animals &#123;</div><div class="line">    exportinterface Legged &#123; numberOfLegs: number; &#125;</div><div class="line">    exportclass Dog &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//相当于</div><div class="line">module Animals &#123;</div><div class="line">    exportinterface Legged &#123; numberOfLegs: number; &#125;</div><div class="line"></div><div class="line">    exportclass Zebra &#123; &#125;</div><div class="line">    exportclass Dog &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="合并模块和类"><a href="#合并模块和类" class="headerlink" title="合并模块和类"></a>合并模块和类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Album &#123;</div><div class="line">    label:Album.AlbumLabel;</div><div class="line">&#125;</div><div class="line">module Album &#123;</div><div class="line">    export class AlbumLabel &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="合并模块和函数"><a href="#合并模块和函数" class="headerlink" title="合并模块和函数"></a>合并模块和函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function buildLabel(name:string):string &#123;</div><div class="line">    return buildLabel.prefix + name + buildLabel.suffix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module buildLabel &#123;</div><div class="line">    export var suffix = &quot;&quot;;</div><div class="line">    export var prefix = &quot;Hello, &quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(buildLabel(&quot;Sam Smith&quot;));</div></pre></td></tr></table></figure>
<h2 id="合并模块与枚举"><a href="#合并模块与枚举" class="headerlink" title="合并模块与枚举"></a>合并模块与枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">enum Color &#123;</div><div class="line">    red = 1,</div><div class="line">    green = 2,</div><div class="line">    blue = 4</div><div class="line">&#125;</div><div class="line"></div><div class="line">module Color &#123;</div><div class="line">    export function mixColor(colorName:string) &#123;</div><div class="line">        if (colorName == &quot;yellow&quot;) &#123;</div><div class="line">            return Color.red + Color.green;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;white&quot;) &#123;</div><div class="line">            return Color.red + Color.green + Color.blue;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;magenta&quot;) &#123;</div><div class="line">            return Color.red + Color.blue;</div><div class="line">        &#125;</div><div class="line">        else if (colorName == &quot;cyan&quot;) &#123;</div><div class="line">            return Color.green + Color.blue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不能合并"><a href="#不能合并" class="headerlink" title="不能合并"></a>不能合并</h2><ul>
<li>类与类不能合并</li>
<li>接口与类不能合并</li>
<li>变量与类不能合并</li>
</ul>
<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><blockquote>
<p>转载请注明出处：<a href="http://www.cnblogs.com/xcong/p/4570235.html" target="_blank" rel="external">http://www.cnblogs.com/xcong/p/4570235.html</a><br>文中代码引用自 Ts 官网和极客学院<br>TS 文件下载 <a href="http://files.cnblogs.com/files/xcong/TsDemo.zip" target="_blank" rel="external">http://files.cnblogs.com/files/xcong/TsDemo.zip</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;TypeScript 是微软开发的 JavaScript 的超集，TypeScript 兼容 JavaScript，可以载入 JavaScript 代码然后运行。TypeScript 与 JavaScript 相比进步的地方 包括：加入注释，让编译器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的面向对象语言。&lt;/p&gt;
&lt;p&gt;TypeScript 微软官方网站 &lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.typescriptlang.org/&lt;/a&gt;&lt;br&gt;TypeScript 源码 &lt;a href=&quot;http://typescript.codeplex.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://typescript.codeplex.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://huyaohui.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://huyaohui.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://huyaohui.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的 STD 指的是什么</title>
    <link href="http://huyaohui.com/2019/02/14/C++-zhong-de-STD-zhi-de-shi-shi-mo/"/>
    <id>http://huyaohui.com/2019/02/14/C++-zhong-de-STD-zhi-de-shi-shi-mo/</id>
    <published>2019-02-14T08:05:54.000Z</published>
    <updated>2019-02-21T13:19:42.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="std-的由来"><a href="#std-的由来" class="headerlink" title="std 的由来"></a>std 的由来</h2><blockquote>
<p>在标准 C++ 以前，都是用 <code>#include&lt;iostream.h&gt;</code> 这样的写法的，因为要包含进来的头文件名就是 <code>iostream.h</code>。<br>标准 C++ 引入了名字空间的概念，并把 <code>iostream</code> 等标准库中的东东封装到了 <code>std</code> 名字空间中，<br>同时为了不与原来的头文件混淆，规定标准 C++ 使用一套新的头文件，这套头文件的文件名后不加. <code>h</code> 扩展名，如 <code>iostream</code>、<code>string</code> 等等，<br>并且把原来 C 标准库的头文件也重新命名，如原来的 <code>string.h</code> 就改成 <code>cstring</code>(就是把<code>.h</code> 去掉，前面加上字母 <code>c</code>)，所以头文件包含的写法也就变成了 <code>#include &lt;iostream&gt;</code>。<br>并不是写了 <code>#include&lt;iostream&gt;</code> 就必须用 <code>using namespace std</code>; 我们通常这样的写的原因是为了一下子把 std 名字空间的东东全部暴露到全局域中（就像是直接包含了 iostream.h 这种没有名字空间的头文件一样），使标准 C++ 库用起来与传统的 <code>iostream.h</code> 一样方便。<br>如果不用 <code>using namespace std</code>, 使用标准库时就得时时带上名字空间的全名，如 <code>std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl</code>;</p>
</blockquote>
<h2 id="include-quot-iostream-quot-与-include-lt-iostream-gt-的区别"><a href="#include-quot-iostream-quot-与-include-lt-iostream-gt-的区别" class="headerlink" title="#include &quot;iostream&quot; 与 #include&lt;iostream&gt; 的区别"></a><code>#include &quot;iostream&quot;</code> 与 <code>#include&lt;iostream&gt;</code> 的区别</h2><blockquote>
<p>前者先在当前目录找 <code>iostream</code> 文件，找不到再去系统头文件路径找，后者反之。<br>因此，做为一个良好的习惯，在包含系统头文件时尽量用 <code>&lt;&gt;</code>，而在包含自己的工程中的头文件时用 <code>&quot;&quot;</code>。<br>且<code>&lt;iostream&gt;</code> 和 <code>&lt;iostream.h&gt;</code> 文件是不一样(前者没有后缀)，实际上，在编译器 <code>#include</code> 文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。<br>后缀为<code>.h</code> 的头文件 C++ 标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带 <code>.h</code> 后缀的头文件里，c++ 标准为了和 C 区别开，也为了正确使用命名空间，规定头文件不使用后缀 <code>.h</code>。<br>因此，当使用 <code>&lt;iostream.h&gt;</code> 时，相当于在 C 中调用库函数，使用的是全局命名空间，也就是早期的 C++ 实现；<br>当使用 <code>&lt;iostream&gt;</code> 的时候，该头文件没有定义全局命名空间，必须使用 <code>namespace std</code>；这样才能正确使用 <code>cout</code>。</p>
</blockquote>
<a id="more"></a>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上内容均来自网上，暂未查到原始出处，知道出处的请联系我加上</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;std-的由来&quot;&gt;&lt;a href=&quot;#std-的由来&quot; class=&quot;headerlink&quot; title=&quot;std 的由来&quot;&gt;&lt;/a&gt;std 的由来&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在标准 C++ 以前，都是用 &lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 这样的写法的，因为要包含进来的头文件名就是 &lt;code&gt;iostream.h&lt;/code&gt;。&lt;br&gt;标准 C++ 引入了名字空间的概念，并把 &lt;code&gt;iostream&lt;/code&gt; 等标准库中的东东封装到了 &lt;code&gt;std&lt;/code&gt; 名字空间中，&lt;br&gt;同时为了不与原来的头文件混淆，规定标准 C++ 使用一套新的头文件，这套头文件的文件名后不加. &lt;code&gt;h&lt;/code&gt; 扩展名，如 &lt;code&gt;iostream&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt; 等等，&lt;br&gt;并且把原来 C 标准库的头文件也重新命名，如原来的 &lt;code&gt;string.h&lt;/code&gt; 就改成 &lt;code&gt;cstring&lt;/code&gt;(就是把&lt;code&gt;.h&lt;/code&gt; 去掉，前面加上字母 &lt;code&gt;c&lt;/code&gt;)，所以头文件包含的写法也就变成了 &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;。&lt;br&gt;并不是写了 &lt;code&gt;#include&amp;lt;iostream&amp;gt;&lt;/code&gt; 就必须用 &lt;code&gt;using namespace std&lt;/code&gt;; 我们通常这样的写的原因是为了一下子把 std 名字空间的东东全部暴露到全局域中（就像是直接包含了 iostream.h 这种没有名字空间的头文件一样），使标准 C++ 库用起来与传统的 &lt;code&gt;iostream.h&lt;/code&gt; 一样方便。&lt;br&gt;如果不用 &lt;code&gt;using namespace std&lt;/code&gt;, 使用标准库时就得时时带上名字空间的全名，如 &lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;quot;hello&amp;quot; &amp;lt;&amp;lt; std::endl&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;include-quot-iostream-quot-与-include-lt-iostream-gt-的区别&quot;&gt;&lt;a href=&quot;#include-quot-iostream-quot-与-include-lt-iostream-gt-的区别&quot; class=&quot;headerlink&quot; title=&quot;#include &amp;quot;iostream&amp;quot; 与 #include&amp;lt;iostream&amp;gt; 的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;#include &amp;quot;iostream&amp;quot;&lt;/code&gt; 与 &lt;code&gt;#include&amp;lt;iostream&amp;gt;&lt;/code&gt; 的区别&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前者先在当前目录找 &lt;code&gt;iostream&lt;/code&gt; 文件，找不到再去系统头文件路径找，后者反之。&lt;br&gt;因此，做为一个良好的习惯，在包含系统头文件时尽量用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，而在包含自己的工程中的头文件时用 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;br&gt;且&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 文件是不一样(前者没有后缀)，实际上，在编译器 &lt;code&gt;#include&lt;/code&gt; 文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。&lt;br&gt;后缀为&lt;code&gt;.h&lt;/code&gt; 的头文件 C++ 标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带 &lt;code&gt;.h&lt;/code&gt; 后缀的头文件里，c++ 标准为了和 C 区别开，也为了正确使用命名空间，规定头文件不使用后缀 &lt;code&gt;.h&lt;/code&gt;。&lt;br&gt;因此，当使用 &lt;code&gt;&amp;lt;iostream.h&amp;gt;&lt;/code&gt; 时，相当于在 C 中调用库函数，使用的是全局命名空间，也就是早期的 C++ 实现；&lt;br&gt;当使用 &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; 的时候，该头文件没有定义全局命名空间，必须使用 &lt;code&gt;namespace std&lt;/code&gt;；这样才能正确使用 &lt;code&gt;cout&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="std" scheme="http://huyaohui.com/tags/std/"/>
    
      <category term="STL" scheme="http://huyaohui.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Sqlite3 单表级联删除数据</title>
    <link href="http://huyaohui.com/2018/12/18/Sqlite3-dan-biao-ji-lian-shan-chu-shu-ju/"/>
    <id>http://huyaohui.com/2018/12/18/Sqlite3-dan-biao-ji-lian-shan-chu-shu-ju/</id>
    <published>2018-12-18T02:51:17.000Z</published>
    <updated>2019-01-12T05:05:29.054Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个网络相关的 iOS 库, 遇到一个需要级联删除数据的地方, 本来想用外键约束的级联删除来解决<br>后来发现, 在外键约束时 插入数据是有条件限制的, 在某些情况下插入数据会失败, 不过蛋疼之余还是给我想到解决方案了, 嘻嘻</p>
<a id="more"></a>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>这里我不会讲<code>外键约束</code>是什么, 其他地方可以找到很多资料<br>这里只关注当前需要解决的问题</p>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"test_table"</span> (</div><div class="line">  <span class="string">"id"</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span>,</div><div class="line">  <span class="string">"uuid"</span> <span class="built_in">TEXT</span>,</div><div class="line">  <span class="string">"parent_uuid"</span> <span class="built_in">TEXT</span> <span class="keyword">REFERENCES</span> test_table(<span class="keyword">uuid</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>当插入数据时, 就会看到如下错误</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (<span class="keyword">uuid</span>, parent_uuid)<span class="keyword">VALUES</span>(<span class="string">'a'</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- foreign key mismatch - "test_table" referencing "test_table", Time: 0.003000s</span></div></pre></td></tr></table></figure>
<p>根据外键约束的原理, 可以知道这就是一个先有鸡还是先有蛋的问题<br>因为 在插入数据时会检查<code>parent_uuid</code>中的值是否存在<code>uuid</code>列中, 如果不存在则插入失败</p>
<h3 id="可行的方案"><a href="#可行的方案" class="headerlink" title="可行的方案"></a>可行的方案</h3><p>如果你的<code>uuid</code>是主键的并且在插入数据时满足以下两个条件的任意一个可以插入成功</p>
<ol>
<li><code>parent_uuid</code>为<code>NULL</code></li>
<li><code>parent_uuid</code>等于<code>uuid</code></li>
</ol>
<p>而实际情况则是多变的, 这样处理的话制约性太强了, 方案并不好<br>Ps: 虽然我当前的这个项目用的是在代码中递归实现的, 但是我还是要说下下面的这个方案<br>    之后会改成这个方案😁</p>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>同样的在这里我不会叫<code>触发器</code>是什么, 资料其他地方很多</p>
<p>数据表还是上面的那个结构<br>下面是数据表中的数据(Ps: 因为是触发器实现所以不存在参入检查的问题)</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">uuid</th>
<th style="text-align:center">parent_uuid</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">c</td>
<td style="text-align:center">d</td>
</tr>
</tbody>
</table>
<h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>下面是触发器Sql: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">"tri_test_table"</span> <span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">"test_table"</span> </div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">DELETE</span> <span class="keyword">FROM</span> test_table <span class="keyword">WHERE</span> parent_uuid = old.uuid;</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure>
<p>下面是删除删除数据Sql: </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">PRAGMA</span> recursive_triggers = <span class="literal">true</span>;</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">uuid</span> = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">PRAGMA</span> recursive_triggers = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<h3 id="关于recursive-triggers"><a href="#关于recursive-triggers" class="headerlink" title="关于recursive_triggers"></a>关于recursive_triggers</h3><p>如果不开启的话, 触发器只会触发一次, 那么最终<code>id=3</code>这条记录仍然是会存在的, 这样效果级联删除的效果就没有达到了<br>但是 Sqlite3 默认是关闭 recursive_triggers 这个选项的, 需要手动开启, 具体的可以看下面参考资料的官方文档</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://sqlite.org/pragma.html#pragma_recursive_triggers" target="_blank" rel="external">https://sqlite.org/pragma.html#pragma_recursive_triggers</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一个网络相关的 iOS 库, 遇到一个需要级联删除数据的地方, 本来想用外键约束的级联删除来解决&lt;br&gt;后来发现, 在外键约束时 插入数据是有条件限制的, 在某些情况下插入数据会失败, 不过蛋疼之余还是给我想到解决方案了, 嘻嘻&lt;/p&gt;
    
    </summary>
    
      <category term="Sql" scheme="http://huyaohui.com/categories/Sql/"/>
    
    
      <category term="Sqlite3" scheme="http://huyaohui.com/tags/Sqlite3/"/>
    
      <category term="Sql" scheme="http://huyaohui.com/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>iOS Storyboard 和 UIColor 创建出来的颜色显示效果不同</title>
    <link href="http://huyaohui.com/2018/12/06/iOS-Storyboard-he-UIColor-chuang-jian-chu-lai-de-yan-se-xian-shi-xiao-guo-bu-tong/"/>
    <id>http://huyaohui.com/2018/12/06/iOS-Storyboard-he-UIColor-chuang-jian-chu-lai-de-yan-se-xian-shi-xiao-guo-bu-tong/</id>
    <published>2018-12-06T07:25:49.000Z</published>
    <updated>2019-01-12T05:05:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>路漫漫其修远兮，吾将上下而求索。<br>真是绝了，这个问题从我开始搞 iOS 开发时就一直困扰这我了，虽然那时候我也尝试这找解决方案，但是一直都没能找到怎么解决，只是大概知道是配色文件到诊的，但是要如果更改正确却无从下手了。<br>现在看来，我找不到解决方案也是理所应当的了，至于原因接着往下看。（提示：我搞 iOS 开发那会还是 iOS8 时代）。</p>
<a id="more"></a>
<p>你有没有遇到过以下问题：</p>
<ul>
<li>设计师给你的颜色值在 Interface Builder 中设置以及代码设置与真机与模拟器显示的颜色不一致，甚至肉眼完全看的出来。</li>
<li>为一个普通的控件设置 Color，设置了颜色为 XXXXXX。取色工具测的也是正常的 XXXXXX，但是模拟器 / 真机运行起来之后，颜色变色了，用取色工具测，颜色变成了 YYYYYY。</li>
<li>为什么当我用颜色吸管工具在 Photoshop 选择一个颜色的和 RGB 值，在 Xcode 中设置后得不到相同的颜色?</li>
<li>为什么真机或者模拟器截图后，用吸管取色后得到的值与 Interface Builder 中设置的颜色值不一样？</li>
<li>太恶心了，就一个颜色为什么不一样？</li>
<li>我做错了什么吗?</li>
</ul>
<p>看完这篇文章后，这些问题将会全部消失。</p>
<h2 id="color-space"><a href="#color-space" class="headerlink" title="color space"></a>color space</h2><p>色彩空间，色域。我不会在这里详细介绍, 进一步了解可以阅读: <a href="http://www.dpbestflow.org/color/color-space-and-color-profiles" target="_blank" rel="external">http://www.dpbestflow.org/color/color-space-and-color-profiles</a>  在那里, 你可以找到关于色彩模型, 色彩空间和色彩配置的定义, 以获得更深的理解。我也会稍后再博客中翻译整篇文章。</p>
<h2 id="color-profile"><a href="#color-profile" class="headerlink" title="color profile"></a>color profile</h2><p>色彩配置。我不会在这里详细介绍, 进一步了解可以阅读: <a href="http://www.dpbestflow.org/color/color-space-and-color-profiles" target="_blank" rel="external">http://www.dpbestflow.org/color/color-space-and-color-profiles</a>  在那里, 你可以找到关于色彩模型, 色彩空间和色彩配置的定义, 以获得更深的理解。我也会稍后再博客中翻译整篇文章。</p>
<h2 id="理解苹果的颜色处理"><a href="#理解苹果的颜色处理" class="headerlink" title="理解苹果的颜色处理"></a>理解苹果的颜色处理</h2><p>苹果认为相同的 RGB 值在任何地方都应该显示相同。其实应用一个 RGB 的组合在不同的设备上不会总是有着相同的颜色，这取决于你使用的是哪一个颜色配置（color profile）。</p>
<p>需要知道是，color profile 是展现一个色彩空间中颜色的数值模型 (色彩空间, 色域（color space）是展现颜色的一个方式, 例如: RGB, CMYK, HSV, 等等)，一些色彩配置（color profile）是“设备相关” 的，一些色彩配置（color profile）是 “设备无关” 的。这意味着同样的颜色在不同的设备 (“设备无关”) 上会展现相同的颜色，其中一些将会根据设备的特点改变颜色(“设备相关”)</p>
<p>同样有趣的是, 当你截图时, 不仅每个像素的 RGB 值都得到了存储, 而且还有关于被截取的设备的互补信息。这样, 苹果可以通过计算不同的 RGB 组合来使颜色在不同的设备中看起来相同, 以最佳的方式使这些颜色与设备的特性和限制相匹配。</p>
<p>说了这么多, 给定一个色彩空间（color space） (例如, RGB), 您将在其中有多个色彩配置 (一般 RGB、Adobe RGB、PAL/SECAM 等), 因此你将有多种方法使用不同的 RGB 组合来获得相同的颜色。</p>
<p>Xcode 中的 RGB 色彩配置（color profile）有 Adobe RGB、Apple RGB、Device RGB（设备 RGB）、Generic RGB（通用 RGB）、Wide Gamut RGB（广域 RGB）。要查看整个色彩配置列表, 可以从 Xcode 的 Interface Builder 的色彩选择工具中查看。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142804.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142804.png" alt=""></a></p>
<p>因此, 当您选择选择了 RGB 值组合，并更改了要使用的色彩配置时, 您将获得相同的颜色，但是会得出不同的 RGB 值，这是应用颜色时使开发人员非常恼火的主要问题。</p>
<p>例如, 通用 RGB (10、80、105) 和设备 RGB (0、99、124) 是相同的颜色，但有不同的 RGB 值。如你所见。这就是为什么最终可以有不同的颜色， 即使你使用的是你从别处取色的精确的 RGB 组合 (Photoshop 吸管, 数码测色计（Digital Color Meter）等)。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142805.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142805.png" alt=""></a></p>
<p>同样, 如果在不同的色彩配置中使用相同的 RGB 组合, 则会得到不同的颜色。 <a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142806.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-142806.png" alt=""></a></p>
<p>此外, Photoshop 处理颜色时，使用 Photoshop 的人与使用 RGB 值的人不是同一台设备不说，Adobe 使用人员 Photoshop 的色彩空间也未必与开发人员一致 (可能会是 Adobe 发明的颜色空间), 所以当你试图直接从 Photoshop 中选取它们并将其应用于 Xcode 时, 情况可能会变得更糟。</p>
<p>Photoshop 在编辑菜单的颜色设置中可以查看更改色彩配置。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-170957.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-170957.png" alt=""></a></p>
<p>所有这一切都解释了为什么当你使用数码测色计选择一个颜色, 你可能会得到不同的 RGB 值但是是相同的颜色。如果你在不同的显示器 (因为额外的设备信息可以添加到每个像素, 当你选择颜色, 取决于您使用的是与设备相关的色彩配置还是与设备无关的。</p>
<p>你可以猜到，我们要使用一个设备无关的， 如 sRGB (代表标准的 RGB), 所以无论我们将在什么地方显示，我们将得到相同的 RGB 值时。</p>
<p>iOS 中代码自定义设置 RGB 与 Interface Builder 自定义设置 RGB 颜色一致。都使用了 sRGB 色彩配置。</p>
<h3 id="在-XIB-中的色彩配置"><a href="#在-XIB-中的色彩配置" class="headerlink" title="在 XIB 中的色彩配置"></a>在 XIB 中的色彩配置</h3><p><strong>选择颜色后使用 sublime 等文本编辑器直接打开 storyboard 或者 xib 文件。即可看到如下几种结果。</strong></p>
<p>如果色彩配置采用了 sRGB ，sb/xib 的 xml 中会这样写，colorSpace=”custom” customColorSpace=”sRGB” ，一般都是使用颜色选择器自定义 RGB 后自动选择的 sRGB 色彩配置</p>
<p>如果色彩配置采用了 Display P3， sb/xib 的 xml 中会这样写，colorSpace=”custom” customColorSpace=”displayP3”，</p>
<p>如果色彩配置采用了 Generic RGB， sb/xib 的 xml 中会这样写，colorSpace=”calibratedRGB” ，一般都是使用颜色选择器自定义 RGB 后手动选择的 Generic RGB 色彩配置</p>
<p>如果色彩配置采用了 Generic Gray ， sb/xib 的 xml 中会这样写，colorSpace=”calibratedWhite”，一般都是系统默认的灰白颜色。</p>
<p>如果色彩配置采用了 Device Gray ， sb/xib 的 xml 中会这样写，colorSpace=”deviceRGB”，，一般都是使用颜色选择器自定义 RGB 后手动选择的 DeviceRGB 色彩配置</p>
<p>如果色彩配置采用了 Adobe RGB ， sb/xib 的 xml 中会这样写，colorSpace=”adobeRGB1998”，，一般都是使用颜色选择器自定义 RGB 后手动选择的 Adobe RGB 色彩配置</p>
<p>最后发现，手动选择的 Apple RGB 色彩配置，sb/xib 的 xml 中会这样写，colorSpace=”sRGB”，说明苹果默认统一成了 sRGB.</p>
<h3 id="在纯代码中的色彩配置"><a href="#在纯代码中的色彩配置" class="headerlink" title="在纯代码中的色彩配置"></a>在纯代码中的色彩配置</h3><p>最新 Xcode8 测试, 以下代码使用 sRGB 色彩配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (UIColor *)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha</div></pre></td></tr></table></figure>
<p>类似 [UIColor darkGrayColor] 使用 Generic Gray 色彩配置</p>
<p>不信我们 log 下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CGColorSpaceRef   ref = CGColorGetColorSpace([UIColor colorWithRed:104/255.0 green:104/255.0 blue:104/255.0 alpha:1].CGColor);</div><div class="line">NSLog(@&quot;%@&quot;,ref);</div><div class="line">CGColorSpaceRef   ref2 =  CGColorGetColorSpace([UIColor darkGrayColor].CGColor);</div><div class="line">NSLog(@&quot;%@&quot;,ref2);</div><div class="line"></div><div class="line">&lt;CGColorSpace 0x60000003f2a0&gt; (kCGColorSpaceICCBased; kCGColorSpaceModelRGB; sRGB IEC61966-2.1; extended range)</div><div class="line">&lt;CGColorSpace 0x60800002af20&gt; (kCGColorSpaceICCBased; kCGColorSpaceModelMonochrome; Generic Gray Gamma 2.2 Profile; extended range)</div></pre></td></tr></table></figure>
<h2 id="颜色拾取与应用"><a href="#颜色拾取与应用" class="headerlink" title="颜色拾取与应用"></a>颜色拾取与应用</h2><p>既然你明白了这件事的 ‘原因’, 让我们来谈谈技巧。</p>
<p>要选择颜色， 我们将使用苹果系统自带的 “数码测色计” 应用，你可以在系统的实用工具或者 Spotlight 找到。这个程序适用于一些色彩配置计算屏幕上的一个像素的 RGB 值。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-145700.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-145700.png" alt=""></a></p>
<p><strong>Xcode 的颜色选择器也支持拾取，但是不能设置指定色彩配置的颜色拾取。只能是 sRGB(代表标准的 RGB)。</strong></p>
<p>要应用颜色，我们将使用 Xcode 的 Interface Builder， 或者， 我们也可以以代码方式进行。</p>
<h3 id="颜色拾取"><a href="#颜色拾取" class="headerlink" title="颜色拾取"></a>颜色拾取</h3><p>打开数码测色计（Digital Color Meter），下拉中选择 “以 sRGB 显示”/ “Display in sRGB”, 使用取色吸管取色，shift+cmd+c，快捷键拷贝当前屏幕像素 RGB 的值.</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151913.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151913.png" alt=""></a></p>
<p>如果想拷贝 16 进制颜色，在菜单的显示中可以设置切换。</p>
<p><a href="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151422.png" target="_blank" rel="external"><img src="http://www.skyfox.org/wp-content/uploads/2017/08/QQ20170817-151422.png" alt=""></a></p>
<p>然后再 Xcode 的 Interface Builder，颜色选择器中选择 sRGB(默认也是 sRGB)，填入取的颜色 RGB 值。</p>
<p>或者代码设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.label.backgroundColor = [UIColor colorWithRed:39/255.0 green:45/255.0 blue:51/255.0 alpha:0];</div></pre></td></tr></table></figure>
<p><strong>所以，总结下技巧：</strong></p>
<p>使用取色软件，以 sRGB 色彩配置，取得 RGB 值。</p>
<p>设计最好也使用 sRGB 色彩配置进行设计。</p>
<p>如果设计要给开发取色要使用 sRGB 取色。</p>
<p>因为代码初始化 UIColor 是不能像 NSColor 一样指定色彩空间的。所以要以不变（sRGB）应万变。</p>
<p>使用 sRGB 在 Xcode Interface Builder(或通过代码) 中应用这些 RGB 值。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/28367811/color-in-storyboard-not-matching-uicolor" target="_blank" rel="external">https://stackoverflow.com/questions/28367811/color-in-storyboard-not-matching-uicolor</a><br><a href="http://www.skyfox.org/ios-app-color-set-and-color-profile.html" target="_blank" rel="external">http://www.skyfox.org/ios-app-color-set-and-color-profile.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路漫漫其修远兮，吾将上下而求索。&lt;br&gt;真是绝了，这个问题从我开始搞 iOS 开发时就一直困扰这我了，虽然那时候我也尝试这找解决方案，但是一直都没能找到怎么解决，只是大概知道是配色文件到诊的，但是要如果更改正确却无从下手了。&lt;br&gt;现在看来，我找不到解决方案也是理所应当的了，至于原因接着往下看。（提示：我搞 iOS 开发那会还是 iOS8 时代）。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Storyboard" scheme="http://huyaohui.com/tags/Storyboard/"/>
    
      <category term="XIB" scheme="http://huyaohui.com/tags/XIB/"/>
    
      <category term="XML" scheme="http://huyaohui.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>如何计算算法的空间复杂度</title>
    <link href="http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-kong-jian-fu-za-du/"/>
    <id>http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-kong-jian-fu-za-du/</id>
    <published>2018-12-05T11:52:26.000Z</published>
    <updated>2018-12-05T11:52:30.173Z</updated>
    
    <content type="html"><![CDATA[<p>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity)S(n) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。渐近空间复杂度也常常简称为空间复杂度。</p>
<a id="more"></a>
<ul>
<li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。</li>
</ul>
<p>我们在写代码时，完全可以用空间来换取时间，比如说，要判断某某年是不是闰年，你可能会花一点心思写了一个算法，而且由于是一个算法，也就意味着，每次给一个年份，都是要通过计算得到是否是闰年的结果。还有另一个办法就是，事先建立一个有 2 050 个元素的数组（年数略比现实多一点），然后把所有的年份按下标的数字对应，如果是闰年，此数组项的值就是 1，如果不是值为 0。这样，所谓的判断某一年是否是闰年，就变成了查找这个数组的某一项的值是多少的问题。此时，我们的运算是最小化了，但是硬盘上或者内存中需要存储这 2050 个 0 和 1。</p>
<p>算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是 “就地 “ 进行的，是节省存储的算法，如这一节介绍过的几个算法都是如此；有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如将快速排序和归并排序算法就属于这种情况。</p>
<p>通过一笔空间上的开销来换取计算时间的小技巧。到底哪一个好，其实要看你用在什么地方。</p>
<p>算法的<a href="http://www.nowamagic.net/librarys/veda/tag/空间复杂度" target="_blank" rel="external">空间复杂度</a>通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)= O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>
<p>一般情况下，一个程序在机器上执行时，除了需要存储程序本身的指令、常数、变量和输入数据外，还需要存储对数据操作的存储单元。若输入数据所占空间只取决于问题本身，和算法无关，这样只需要分析该算法在实现时所需的辅助单元即可。若算法执行时所需的辅助空间相对于输入数据量而言是个常数，则称此算法为原地工作，空间复杂度为 O(1)。</p>
<ul>
<li>关于 O(1) 的问题， O(1) 是说数据规模和临时变量数目无关，并不是说仅仅定义一个临时变量。举例：无论数据规模多大，我都定义 100 个变量，这就叫做数据规模和临时变量数目无关。就是说空间复杂度是 O(1)。</li>
<li>那就是指函数运行时处理数据的规模与空间和时间的一个变化时的比例关系，不是具体的数值。</li>
</ul>
<p>当一个算法的空间复杂度为一个常量，即不随被处理数据量 n 的大小而改变时，可表示为 O(1)；当一个算法的空间复杂度与以 2 为底的 n 的对数成正比时，可表示为 0(10g2n)；当一个算法的空 I 司复杂度与 n 成线性比例关系时，可表示为 0(n). 若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。</p>
<ul>
<li>通常，我们都使用 “时间复杂度” 来指运行时间的需求，使用 “空间复杂度” 指空间需求。当不用限定词地使用 “复杂度” 时，通常都是指时间复杂度。</li>
</ul>
<p>对于一个<a href="http://www.nowamagic.net/librarys/veda/tag/算法" target="_blank" rel="external">算法</a>，其时间复杂度和空间复杂度往往是相互影响的。当追求一个较好的时间复杂度时，可能会使空间复杂度的性能变差，即可能导致占用较多的存储空间；反之，求一个较好的空间复杂度时，可能会使时间复杂度的性能变差，即可能导致占用较长的运行时间。另外，算法的所有性能之间都存在着或多或少的相互影响。因此，当设计一个算法 (特别是大型算法) 时，要综合考虑算法的各项性能，算法的使用频率，算法处理的数据量的大小，算法描述语言的特性，算法运行的机器系统环境等各方面因素，才能够设计出比较好的算法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文地址：<a href="http://www.nowamagic.net/librarys/veda/detail/2197" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/2197</a>，欢迎访问原出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity)S(n) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。渐近空间复杂度也常常简称为空间复杂度。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://huyaohui.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://huyaohui.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>如何计算算法的时间复杂度</title>
    <link href="http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-shi-jian-fu-za-du/"/>
    <id>http://huyaohui.com/2018/12/05/ru-he-ji-suan-suan-fa-de-shi-jian-fu-za-du/</id>
    <published>2018-12-05T11:43:49.000Z</published>
    <updated>2018-12-05T11:48:58.945Z</updated>
    
    <content type="html"><![CDATA[<p>算法的时间复杂度定义为：</p>
<p>在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n}=0(f(n))。它表示随问题规模 n 的增大，算法执行时间的埔长率和 f(n) 的埔长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f( n) 是问题规横 n 的某个函数。</p>
<a id="more"></a>
<ul>
<li>这样用大写 O() 来体现算法时间复杂度的记法，我们称之为大 O 记法。一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</li>
<li>之前我们说的三个求和算法的时间复杂度分别为 0(n)，0(1)，0(n<sup>2</sup>)。我就推一下吧。</li>
</ul>
<p>计算 1 + 2 + 3 + 4 + …… + 100。代码如下，之前也有讲过：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, sum = <span class="number">0</span>, n = <span class="number">100</span>;    <span class="comment">/* 执行1次 */</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">/* 执行 n+1 次 */</span></div><div class="line">    &#123;</div><div class="line">        sum = sum + i;          <span class="comment">/* 执行n次 */</span></div><div class="line">        <span class="comment">//printf("%d \n", sum);</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);          <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码附加的注释可以看到所有代码都执行了多少次。那么这写代码语句执行次数的总和就可以理解为是该算法计算出结果所需要的时间。该算法所用的时间（算法语句执行的总次数）为： 1 + (n + 1) + n + 1 = 2n + 3</p>
<p>而当 n 不断增大，比如我们这次所要计算的不是 1 + 2 + 3 + 4 + …… + 100 = ？ 而是 1 + 2 + 3 + 4 + …… + n = ？其中 n 是一个十分大的数字，那么由此可见，上述算法的执行总次数（所需时间）会随着 n 的增大而增加，但是在 for 循环以外的语句并不受 n 的规模影响（永远都只执行一次）。所以我们可以将上述算法的执行总次数简单的记做： 2n 或者简记 n</p>
<p>这样我们就得到了我们设计的算法的<a href="http://www.nowamagic.net/librarys/veda/tag/时间复杂度" target="_blank" rel="external">时间复杂度</a>，我们把它记作： O(n)</p>
<p>再来看看高斯的算法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, n = <span class="number">100</span>;   <span class="comment">/* 执行1次 */</span></div><div class="line">    sum = (<span class="number">1</span> + n) * n/<span class="number">2</span>;    <span class="comment">/* 执行1次 */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);      <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个算法的时间复杂度： O(3)，但一般记作 O(1)。</p>
<p>从感官上我们就不难看出，从算法的效率上看，O(3) &lt; O(n) 的，所以高斯的<a href="http://www.nowamagic.net/librarys/veda/tag/算法" target="_blank" rel="external">算法</a>更快，更优秀。</p>
<p>下面再来一个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j, x = <span class="number">0</span>, sum = <span class="number">0</span>, n = <span class="number">100</span>;  <span class="comment">/* 执行1次 */</span></div><div class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    &#123;</div><div class="line">        sum = sum + i;</div><div class="line">        <span class="comment">//printf("%d \n", sum);</span></div><div class="line">        <span class="keyword">for</span>( j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">        &#123;</div><div class="line">            x++;                <span class="comment">/* 执行n*n次 */</span></div><div class="line">            sum = sum + x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);          <span class="comment">/* 执行1次 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码严格的说不能称之为一个算法，毕竟它很 “无聊而且莫名其妙”（毕竟算法是为了解决问题而设计的嘛），先不论这个“算法” 能解决什么问题，我们看一下它的 “大 O 阶” 如何推导，还是先计算一下它的执行总次数：</p>
<p>执行总次数 = 1 + (n + 1) + n<em>(n + 1) + n</em>n + (n + 1) + 1 = 2n<sup>2</sup> + 3n + 3</p>
<p>如何推导大 o 阶呢？我们给出了下面 的推导方法：</p>
<ol>
<li>用常数 1 取代运行时间中的所有加法常数。</li>
<li>在修改后的运行次数函数中，只保留最髙阶项。</li>
<li>如果最高阶项存在且不是 1, 则去除与这个项相乘的常数。</li>
</ol>
<p>按照上面推导 “大 O 阶” 的步骤我们先来第一步：“用常数 1 取代运行时间中的所有加法常数”，则上面的算式变为：执行总次数 = 2n^2 + 3n + 1</p>
<p>第二步：“在修改后的运行次数函数中，只保留最高阶项”。这里的最高阶是 n 的二次方，所以算式变为：执行总次数 = 2n^2</p>
<p>第三步：“如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数”。这里 n 的二次方不是 1 所以要去除这个项的相乘常数，算式变为：执行总次数 = n^2</p>
<p>因此最后我们得到上面那段代码的算法时间复杂度表示为： O(n^2)</p>
<ul>
<li>最后我们在把常见的算法时间复杂度以及他们在效率上的高低顺序记录在这里，是大家对算法的效率有个直观的认识。</li>
</ul>
<p>O(1) 常数阶 &lt; O(logn) 对数阶 &lt; O(n) 线性阶 &lt; O(nlogn) &lt; O(n^2) 平方阶 &lt; O(n^3) &lt; { O(2^n) &lt; O(n!) &lt; O(n^n) }</p>
<ul>
<li>最后三项用大括号把他们括起来是想要告诉大家，如果日后大家设计的算法推导出的 “大 O 阶” 是大括号中的这几位，那么趁早放弃这个算法，在去研究新的算法出来吧。因为大括号中的这几位即便是在 n 的规模比较小的情况下仍然要耗费大量的时间，算法的时间复杂度大的离谱，基本上就是“不可用状态”。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文地址：<a href="http://www.nowamagic.net/librarys/veda/detail/2195" target="_blank" rel="external">http://www.nowamagic.net/librarys/veda/detail/2195</a>，欢迎访问原出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法的时间复杂度定义为：&lt;/p&gt;
&lt;p&gt;在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n}=0(f(n))。它表示随问题规模 n 的增大，算法执行时间的埔长率和 f(n) 的埔长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f( n) 是问题规横 n 的某个函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://huyaohui.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://huyaohui.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>A dumb UI is a good UI: Using MVP in iOS with swift</title>
    <link href="http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/"/>
    <id>http://huyaohui.com/2018/03/25/A-dumb-UI-is-a-good-UI:-Using-MVP-in-iOS-with-swift/</id>
    <published>2018-03-25T11:39:06.000Z</published>
    <updated>2018-03-25T13:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.<br>主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.<br>那么话说回来为什么要写这篇博文呢?<br>自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白</p>
<a id="more"></a>
<h2 id="MVC-模式介绍"><a href="#MVC-模式介绍" class="headerlink" title="MVC 模式介绍"></a>MVC 模式介绍</h2><p>当涉及到ios应用程序的开发时, 模型视图控制器是一种常见的设计模式.<br>通常视图层由 UIKit 中的元素组成, 这些元素通过程序或 xib 文件定义, 模型层包含应用程序的业务逻辑, 控制器层（由 UIViewController 类表示）是模型和视图之间的粘合剂. </p>
<p><img src="https://user-images.githubusercontent.com/8622405/37874567-ecd45016-3063-11e8-85ee-4d1ae6df6a48.png" alt="bildschirmfoto-2016-02-01-um-22 23 46"></p>
<p>这种模式的一个很好的部分是将业务逻辑和业务规则封装在模型层中. 但是, UIViewController 仍然包含与 UI 有关的逻辑, 这意味着如下：</p>
<ul>
<li>调用业务逻辑并将结果绑定到视图</li>
<li>管理视图元素</li>
<li>将来自模型层的数据转换为友好的格式</li>
<li>导航逻辑</li>
<li>管理 UI 状态</li>
<li>更多…</li>
</ul>
<p>承担所有这些工作, UIViewController 将会变得巨大而难以维护和测试. </p>
<p>所以, 现在是时候考虑改进 MVC 来处理这些问题了.<br>我们称之为改进 模型(Model)-视图(View)-主持人(Presenter) MVP. </p>
<h2 id="MVP-模式介绍"><a href="#MVP-模式介绍" class="headerlink" title="MVP 模式介绍"></a>MVP 模式介绍</h2><p>MVP 模式在1996年由 <a href="http://www.wildcrest.com/Potel/Portfolio/mvp.pdf" target="_blank" rel="external">Mike Potel</a> 首次引入, 并且多年来进行了多次讨论.<br>在他的文章中, <a href="http://martinfowler.com/eaaDev/uiArchs.html" target="_blank" rel="external">GUI架构</a> Martin Fowler 讨论了这种模式, 并将其与其他管理 UI 代码的模式进行了比较. </p>
<p>有很多 MVP 的变体, 它们之间有很小的差异.<br>在这篇文章中, 我选择了目前应用程序开发中常用的常用一种.<br>这个变体的特征是：</p>
<ul>
<li>MVP的视图部分包括uiview和UIViewController. </li>
<li>视图(View)将用户交互委托给主持人(Presenter). </li>
<li>主持人包含处理用户交互的逻辑. </li>
<li>主持人(Presenter)与模型(Model)层进行通信, 将数据转换为UI友好格式, 并更新视图(View). </li>
<li>主持人对 UIKit 没有依赖关系. </li>
<li>视图是被动的 (dump)</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/8622405/37874568-ed6f0386-3063-11e8-830e-6a0ded0f0143.png" alt="bildschirmfoto-2016-02-01-um-22 23 57"></p>
<h2 id="MVP-操作示例"><a href="#MVP-操作示例" class="headerlink" title="MVP 操作示例"></a>MVP 操作示例</h2><p>以下示例将向您展示如何在操作中使用 MVP</p>
<p>我们的示例是一个非常简单的应用程序, 它只显示一个简单的用户列表. 您可以从这里获得完整的源代码: <a href="https://github.com/iyadagha/iOS-mvp-sample" target="_blank" rel="external">https://github.com/iyadagha/iOS-mvp-sample</a> .</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>让我们从用户的简单数据模型开始：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> lastName: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> email: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">Int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h3><p>那么我们实现一个简单的用户服务, 即异步返回用户列表：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//the service delivers mocked data with a delay</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack:<span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>)&#123;</div><div class="line">        <span class="keyword">let</span> users = [<span class="type">User</span>(firstName: <span class="string">"Iyad"</span>, lastName: <span class="string">"Agha"</span>, email: <span class="string">"iyad@test.com"</span>, age: <span class="number">36</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mila"</span>, lastName: <span class="string">"Haward"</span>, email: <span class="string">"mila@test.com"</span>, age: <span class="number">24</span>),</div><div class="line">                     <span class="type">User</span>(firstName: <span class="string">"Mark"</span>, lastName: <span class="string">"Astun"</span>, email: <span class="string">"mark@test.com"</span>, age: <span class="number">39</span>)</div><div class="line">                    ]</div><div class="line"> </div><div class="line">        <span class="keyword">let</span> delayTime = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(<span class="number">2</span> * <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>)))</div><div class="line">        dispatch_after(delayTime, dispatch_get_main_queue()) &#123;</div><div class="line">            callBack(users)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserPresenter"><a href="#UserPresenter" class="headerlink" title="UserPresenter"></a>UserPresenter</h3><p>下一步是编写userpresenter.<br>首先我们需要用户的数据模型, 可以直接在视图中使用.<br>它包含根据需要从视图中正确格式化的数据：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserViewData</span></span>&#123;   </div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> age: <span class="type">String</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UserView"><a href="#UserView" class="headerlink" title="UserView"></a>UserView</h3><p>之后, 我们需要对视图进行抽象, 这可以在 Presenter 不知道 UIViewController 的情况下使用.<br>我们通过定义一个协议 UserView 来做到这一点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UserView</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该协议将在 Presenter 中使用, 稍后将在 UIViewController 中实现. 基本上, 协议包含了在 Presenter 中控制 View 的函数调用. </p>
<p>Presenter 看起来是这样的:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userService:<span class="type">UserService</span></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">private</span> <span class="keyword">var</span> userView : <span class="type">UserView</span>?</div><div class="line">     </div><div class="line">    <span class="keyword">init</span>(userService:<span class="type">UserService</span>)&#123;</div><div class="line">        <span class="keyword">self</span>.userService = userService</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attachView</span><span class="params">(view:UserView)</span></span>&#123;</div><div class="line">        userView = view</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detachView</span><span class="params">()</span></span> &#123;</div><div class="line">        userView = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">self</span>.userView?.startLoading()</div><div class="line">        userService.getUsers&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] users <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.userView?.finishLoading()</div><div class="line">            <span class="keyword">if</span>(users.<span class="built_in">count</span> == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">self</span>?.userView?.setEmptyUsers()</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">let</span> mappedUsers = users.<span class="built_in">map</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="type">UserViewData</span>(name: <span class="string">"<span class="subst">\($<span class="number">0</span>.firstName)</span> <span class="subst">\($<span class="number">0</span>.lastName)</span>"</span>, age: <span class="string">"<span class="subst">\($<span class="number">0</span>.age)</span> years"</span>)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">self</span>?.userView?.setUsers(mappedUsers)</div><div class="line">            &#125;</div><div class="line">             </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将在后面看到 Presenter 可以通过函数<code>attachView(view:UserView)</code>和<code>attachView(view:UserView)</code>来更好地控制 UIViewContoller 的生命周期方法<br>请注意, 将<code>User</code>转换为<code>UserViewData</code>是 Presenter 的责任.<br>还要注意, <code>userView</code>必须<code>weak</code>以避免保留周期. </p>
<h3 id="UserViewController"><a href="#UserViewController" class="headerlink" title="UserViewController"></a>UserViewController</h3><p>实现的最后一部分是UserViewController:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> emptyView: <span class="type">UIView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>?</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> activityIndicator: <span class="type">UIActivityIndicatorView</span>?</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userPresenter = <span class="type">UserPresenter</span>(userService: <span class="type">UserService</span>())</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> usersToDisplay = [<span class="type">UserViewData</span>]()</div><div class="line"> </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        tableView?.dataSource = <span class="keyword">self</span></div><div class="line">        activityIndicator?.hidesWhenStopped = <span class="literal">true</span></div><div class="line"> </div><div class="line">        userPresenter.attachView(<span class="keyword">self</span>)</div><div class="line">        userPresenter.getUsers()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的 ViewController 有一个 tableView 来显示用户列表、一个 emptyView (如果没有用户时显示)和一个当应用程序正在加载用户时显示的 activityIndicator. 此外, 它还有一个 userPresenter 和一个用户列表. </p>
<p>在<code>viewDidLoad方</code>法中, UserViewController将自己连接到 Presenter.<br>这是可行的, 因为我们很快就会看到 UserViewController 实现了 UserView 协议. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UserView</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.startAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">finishLoading</span><span class="params">()</span></span> &#123;</div><div class="line">        activityIndicator?.stopAnimating()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        usersToDisplay = users</div><div class="line">        tableView?.hidden = <span class="literal">false</span></div><div class="line">        emptyView?.hidden = <span class="literal">true</span>;</div><div class="line">        tableView?.reloadData()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        tableView?.hidden = <span class="literal">true</span></div><div class="line">        emptyView?.hidden = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如我们所看到的, 这些函数不包含复杂的逻辑, 他们只是在进行纯视图管理. </p>
<h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><p>最后, UITableViewDataSource 实现非常基本, 看起来如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> usersToDisplay.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Subtitle</span>, reuseIdentifier: <span class="string">"UserCell"</span>)</div><div class="line">        <span class="keyword">let</span> userViewData = usersToDisplay[indexPath.row]</div><div class="line">        cell.textLabel?.text = userViewData.name</div><div class="line">        cell.detailTextLabel?.text = userViewData.age</div><div class="line">        cell.textLabel</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://user-images.githubusercontent.com/8622405/37874569-edd27b1e-3063-11e8-9c88-b3c914ddfed7.png" alt="mvp-ios-e1454670703144"></p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>做MVP的好处之一是能够在不测试UIViewController本身的情况下测试大部分UI逻辑.<br>如果我们对我们的 Presenter 有一个很好的单元测试覆盖范围, 我们就不需要为UIViewController编写单元测试了. </p>
<p>现在让我们看看如何测试我们的UserPresenter. 首先, 我们定义两个mock对象. 其中一个mock是UserService, 以使它提供所需的用户列表. 另一个mock是UserView, 以验证这些方法是否被正确调用. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceMock</span>: <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> users: [<span class="type">User</span>]</div><div class="line">    <span class="keyword">init</span>(users: [<span class="type">User</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.users = users</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(callBack: <span class="params">([User])</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        callBack(users)</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewMock</span> : <span class="title">NSObject</span>, <span class="title">UserView</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> setUsersCalled = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> setEmptyUsersCalled = <span class="literal">false</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setUsers</span><span class="params">(users: [UserViewData])</span></span> &#123;</div><div class="line">        setUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setEmptyUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        setEmptyUsersCalled = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在, 我们可以测试当服务提供一个非空用户列表时, Presenter 的行为是否正确. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenterTest</span>: <span class="title">XCTestCase</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> emptyUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>]())</div><div class="line"> </div><div class="line">    <span class="keyword">let</span> towUsersServiceMock = <span class="type">UserServiceMock</span>(users:[<span class="type">User</span>(firstName: <span class="string">"firstname1"</span>, lastName: <span class="string">"lastname1"</span>, email: <span class="string">"first@test.com"</span>, age: <span class="number">30</span>),</div><div class="line">                                                     <span class="type">User</span>(firstName: <span class="string">"firstname2"</span>, lastName: <span class="string">"lastname2"</span>, email: <span class="string">"second@test.com"</span>, age: <span class="number">24</span>)])</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testShouldSetUsers</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">        <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: towUsersServiceMock)</div><div class="line">        userPresenterUnderTest.attachView(userViewMock)</div><div class="line"> </div><div class="line">        <span class="comment">//when</span></div><div class="line">        userPresenterUnderTest.getUsers()</div><div class="line"> </div><div class="line">        <span class="comment">//verify</span></div><div class="line">        <span class="type">XCTAssertTrue</span>(userViewMock.setUsersCalled)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的, 如果服务返回一个空的用户列表, 我们也可以测试 Presenter 是否正确工作. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">testShouldSetEmptyIfNoUserAvailable</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">let</span> userViewMock = <span class="type">UserViewMock</span>()</div><div class="line">    <span class="keyword">let</span> userPresenterUnderTest = <span class="type">UserPresenter</span>(userService: emptyUsersServiceMock)</div><div class="line">    userPresenterUnderTest.attachView(userViewMock)</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    userPresenterUnderTest.getUsers()</div><div class="line"></div><div class="line">    <span class="comment">//verify</span></div><div class="line">    <span class="type">XCTAssertTrue</span>(userViewMock.setEmptyUsersCalled)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Where-to-go-from-there"><a href="#Where-to-go-from-there" class="headerlink" title="Where to go from there"></a>Where to go from there</h2><p>我们已经看到了MVP是MVC的演进. 我们只需要将UI逻辑放在一个名为 Presenter 的额外组件中, 并 被动的 (dump) 使我们的UIViewController. </p>
<p>MVP的特点之一是 Presenter 和 View 互相认识.<br>在这种情况下, 视图 UIViewController 具有对演示者的引用, 反之亦然.<br>尽管可以使用反应式编程来删除演示者中使用的视图的参考.<br>使用 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a> 或 <a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a> 等响应式框架, 可以构建一个体系结构, 其中只有 View 知道 Presenter, 反之亦然.<br>在这种情况下, 架构将被称为 MVVM. </p>
<p>如果你想在iOS中了解更多关于MVVM的信息, 请查看以下帖子:<br><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1" target="_blank" rel="external">MVVM Tutorial with ReactiveCocoa</a><br><a href="https://medium.com/cobe-mobile/implementing-mvvm-in-ios-with-rxswift-458a2d47c33d#.3zb8ebzqf" target="_blank" rel="external">Implementing MVVM in iOS with RxSwift</a></p>
<h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="http://iyadagha.com/using-mvp-ios-swift/" target="_blank" rel="external">http://iyadagha.com/using-mvp-ios-swift/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天面试了一家公司, 问了我一些关于 iOS 开发中的概念性问题, 比如通知和代理的区别, MVVM, MVP, MVC 这些设计模式分别是如何实现的, 虽然平常开发中经常听到这些概念, 但是完全没有刻意去记下它们之间的区别和实现.&lt;br&gt;主要是我个人认为任何设计模式都是和不能独立于业务逻辑而存在的, 适合什么用什么并不需要刻意去记下这些东西, 需要用到的时候查下资料就好了.&lt;br&gt;那么话说回来为什么要写这篇博文呢?&lt;br&gt;自问自答一下吧: 我想证明一个道理, 只要你不是一个咸鱼程序员任何概念性的问题, 只需要一小时就可以搞明白&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://huyaohui.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://huyaohui.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://huyaohui.com/tags/Swift/"/>
    
      <category term="MVP" scheme="http://huyaohui.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>一只SB的迷途的披着狼皮的羊 第一章 第一篇</title>
    <link href="http://huyaohui.com/2018/02/24/yi-zhi-SB-de-mi-tu-de-pi-zhuo-lang-pi-de-yang-di-yi-zhang-di-yi-pian/"/>
    <id>http://huyaohui.com/2018/02/24/yi-zhi-SB-de-mi-tu-de-pi-zhuo-lang-pi-de-yang-di-yi-zhang-di-yi-pian/</id>
    <published>2018-02-24T07:22:42.000Z</published>
    <updated>2018-05-26T05:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<!-- 
今天更新了一下博客 [About Me](http://huyaohui.com/about/) 的简历, 写着写着就越写越恼火, 脑海中不断的浮现出之前公司的种种, 及感慨又觉得自己当时太 SB (字面意思上的SB, 傻[shǎ]逼[bī]) 了, 明明是自己太天真了, 还要怪别人不守规矩... -->
<a id="more"></a>
<!-- 既然决定写点什么那么索性就从盘古开天, 女娲造人开始说起吧(Ps: 夸张了夸张了, 也就是从刚开始接触互联网开始). 我会按照时间线一步一步的往下写, 也就是记流水账的方式, 不过我会尽量写的有趣些, 恩, 只是尽量而已, 毕竟写这边博客的原因仅仅就是为了发泄不满和吐槽罢了...

## 第一天上班

一个非常提别的日子, 没错你一定猜到了(Ps: 猜到了才有鬼呢, 不过确实是个比较特殊的日子), `6-1`号, 儿童节, 以至于我现在不用翻以前的工作记录, 就能准确的知道是哪天入的职. 

第一天上班, 很平静的一天, 熟悉了一下工作环境, 组长(Ps: 也就是当时的上司, 不是日本黑社会的那个组长的意思)给我安排了一下工作: 工作内容: 外推(Ps: 就是网上发小广告, 广告的那个, 号称`互联网界的牛皮癣广告`), 工资: 1000/月, 没错不是美元也不是欧元澳元, 当然也不是津巴布韦币, 没错是人民币(Ps: 强行解释一波, 也算不上强行解释, 这是一个伏笔, 之后再说), 每天的工作量就是到不同的资讯平台下发出去300条垃圾广告, 就是那种标题是: 治XX病哪家医院好, 然后内容就是: 到xxx医院, 类似于到问答网站中的自问自答, 非常机械的工作(Ps: 这也是我后来成为程序员的契机).

## 突如其来的危机

记忆中应该是工作后没几天的事
正在上着班划着水(Ps: 上面也说了, 工作非常机械, 只要掌握好方法, 一天的事基本半天就解决了), 等着下班呢
突然一个坐我后面(Ps: 开放式办公室)的看上去是领导模样的人(Ps: 实际上是部门主任, 当时并不知道), 指责电脑屏幕大声这个是谁弄的
我和邻座的妹子(Ps: 没错我邻座是个妹子, 而且就比我早几天入职而已, <(￣︶￣)>)一齐回头看向电脑屏幕, 当时我就点方了, 貌似是我发的广告, 当时我就在想也没干错什么事呢, 怎么就惹着领导不高兴了呢
于是故作镇定, 来回游走, 死不承认, 但是当问到这个账号是谁的时候, 一看实在是躲不掉了(Ps: 账号是当时组长给我的, 意味着有人知道这个账号是谁的了), 心一横承认了(Ps: 尽力了), 反正也打算干完这个月就不干了的
(Ps: 当时确实是这么想的, 因为这个工作实在是没什么技术含量, 离我想象中的编程相关的工作完全不同, 这里顺带一提, 其实我是想找一份编程相关的工作的, 但是想到自己没学历又没从事过编程的工作, 只是曾经自学了几个月的Java, 所以才想找份和编程相关的工作看看情况, 但是实际上非常失望)
此时这位领导话锋一转, 把我一顿猛夸(Ps: 具体的记不得了, 总之就是说干的不错), 还号召大家向我学习, 我都彻底懵逼了
我一个新来的没几天的员工怎么就干的不错呢? 但是呢, 领导讲"大家已经研究决定了", 所以后来我就念了两首诗, 叫"苟
全性命于乱世, 不求闻达于诸侯".
当时我莫名其妙的看着我邻座的怪同学, 不对是女同事, 貌似她也是一脸懵逼(Ps: 后来我才知道是我发的广告上百度关键词搜索首页了, 因为我们的工作目标就是`上`百度关键词搜索首页)

## 小故事

开始这个小故事前先说一些当时我工作上的细节方面的东西
当时我工资是1000, 试用期最长三个月(Ps: 看表现转正), 而且试用期周末没得休息, 转正工资1500
转正条件是每天发广告的篇数最少能达到300(Ps: 这个时候上面提到的那位领导已经和我说这个月就给我转正, 这个时候我每天轻松发450篇, 正式工也就发500而已, 之所以不发的和他们一样多, 主要是因为不想锋芒太露了, 毕竟才来公司半个月不到而已)
好了, 故事开始
还记得上面说的我邻座的怪同学吗? 不对是女同事(Ps: 最后玩这个梗了, 我保证, 真的)
其实和他关系还是挺好的, 毕竟和她进公司的时间相差也不多而且还是邻座的怪..
记得是端午节, 当时是说端午节当天放一天假, 但是未转正的员工除外(Ps: 虽然领导说了给我转正, 但这时候文件还没发下来), 当时心里有点不爽了, 非正式员工周末没得休息也就算了, 端午节还没得放假, 而且也就只是放一天而已
当时心中按下决心, 当天一定翘班(Ps: 其实当时心里已经是有点飘了的, 上面也说了实在是没什么挑战的工作, 都已经打算拿了第一个月的工资就走人的)
理所当然的, 端午节当天我没有去上班, 正当我睡的香的时候, 突然一个陌生的电话打到我手机上, 我心想, 回到南昌换的新手机号, 都没几个人知道我手机号, 谁会打电话给我呢? 莫非是诈骗电话(Ps: 确实当时的诈骗电话还是没猖獗的), 此时我已经准备好了和骗子玩玩套路(Ps: 当时可能没有套路这个词, 总之就是这么个意思)了
没想到是我那怪同事, 总之就是问我为什么没去上班, 叫我去上班, 我随即就答道今天不是放假吗?(Ps: 当然我是明知故问), 下面就是她解释云云了, 不再赘述了
后来越想越奇怪: 
1: 她为什么要关心我去不去上班呢, 在我眼里, 关系也就只是比普通同事好一些而已, 毕竟邻座的怪..(哼哼...)
2: 我们并没有交换手机号, 我的手机号她哪来的
3: 即便她获取到了我的手机号, 那给我打电话的也是领导的事和她没半毛钱关系吧
4: 等等... 她获取到我手机号, 刻意为之吗? 什么手段, 目的... 可达鸭眉头一皱发现事情没那么简单
不过当时虽然我有这么多疑问, 但是并没有向她询问清楚, 只是写了一张请假条, 这件事就这么过去了...

过去了吗? 
过去了个毛, 还有后续..
经过这件事, 我觉得她是一个挺不错的人呢? 于是乎就想帮她一个忙
原因在于, 该节开头写的那些东西, 就是转正的条件, 至少每天需要发到300篇广告, 而她每天只能发到 100多, 200不到
所以我鼓起勇气和她说我帮你发吧(Ps: 毕竟这并不关我什么鸟事)
结果她非常高兴的拒绝了我, 恩, 没错拒绝了
至此之后她老是看到我就傻笑, 也不知道是为什么, 估计认为我是认为我`SB`吧(Ps: 终于点题)
至此我邻座的怪同事, 正式下线了(Ps: 虽然仍然是每天都能相见, 但是已经没有什么交集了, 所有就没她什么戏份了, 虽然她还是会时常傻笑就是了)

## 后记

没想到写着写着已经写了近3000字了, 还远没到开喷的时间点, 但是这还只是一个开始而已
到目前为止都是一些比较愉快的事情, 本来真的就只是打算喷喷更健康的
最后我想了一下干脆分成若干章节去写吧, 写作对我来说太痛苦了(Ps: 文化有限, 文笔太烂) -->
]]></content>
    
    <summary type="html">
    
      &lt;!-- 
今天更新了一下博客 [About Me](http://huyaohui.com/about/) 的简历, 写着写着就越写越恼火, 脑海中不断的浮现出之前公司的种种, 及感慨又觉得自己当时太 SB (字面意思上的SB, 傻[shǎ]逼[bī]) 了, 明明是自己太天真了, 还要怪别人不守规矩... --&gt;
    
    </summary>
    
      <category term="SB" scheme="http://huyaohui.com/categories/SB/"/>
    
    
      <category term="Think" scheme="http://huyaohui.com/tags/Think/"/>
    
      <category term="SB" scheme="http://huyaohui.com/tags/SB/"/>
    
  </entry>
  
  <entry>
    <title>打包 Qt 应用时关于动态链接库的一些注意事项</title>
    <link href="http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/"/>
    <id>http://huyaohui.com/2018/01/04/da-bao-Qt-ying-yong-shi-guan-yu-dong-tai-lian-jie-ku-de-yi-xie-zhu-yi-shi-xiang/</id>
    <published>2018-01-04T10:11:33.000Z</published>
    <updated>2018-01-04T10:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. </p>
<a id="more"></a>
<p>首先你需要安装一个干净的操作系统, 使用虚拟机就好了, 保持你的虚拟机和你开发的电脑在同一个网段内(Ps: 方便传输数据)</p>
<p>如何安装虚拟机这里就不细说了, 网上搜索一大堆资料.</p>
<ol>
<li>打包好后, 吧包传到虚拟机内</li>
<li>打开可执行程序, 如果能正常打开, 那么表示你的库连接没有问题</li>
<li>如果弹出提示框, 说你缺少什么, 那么你需要到你的开发环境里去找到这个库, 然后拷贝到可执行程序同目录下的的<code>Frameworks</code>目录里, 直到程序可运行</li>
</ol>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>不同平台之间的一些细微差别</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 平台如果出现问题, 会弹出一个崩溃框, 点击<code>报告</code>按钮, 可以看到崩溃日志, 里面会告诉你除了什么问题, 按照提示操作即可</p>
<p>当你的<code>Frameworks</code>目录下确实存在这个运行库的时候, 还是爆类似如下的错误时, 可检查是否是链接库的链接位置有问题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Termination Reason:    DYLD, [0x1] Library missing</div><div class="line"></div><div class="line">Application Specific Information:</div><div class="line">dyld: launch, loading dependent libraries</div><div class="line"></div><div class="line">Dyld Error Message:</div><div class="line">  Library not loaded: /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2k/lib/libcrypto.1.0.0.dylib</div><div class="line">  Referenced from: /Applications/MyApp/MyApp.app/Contents/Frameworks/libssl.1.0.0.dylib</div><div class="line">  Reason: image not found</div></pre></td></tr></table></figure>
<h4 id="查看链接位置"><a href="#查看链接位置" class="headerlink" title="查看链接位置"></a>查看链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> MyApp.app/Contents/Frameworks</div><div class="line">$ otool -L libssl.1.0.0.dylib</div><div class="line"></div><div class="line">libssl.1.0.0.dylib:</div><div class="line">    @executable_path/../Frameworks/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)</div><div class="line">    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.60.2)</div></pre></td></tr></table></figure>
<p>通过上面可知, 确实是链接位置有问题, 应该是一个相对路径才对</p>
<h4 id="修改链接位置"><a href="#修改链接位置" class="headerlink" title="修改链接位置"></a>修改链接位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ install_name_tool -change /usr/<span class="built_in">local</span>/Cellar/openssl/1.0.2n/lib/libcrypto.1.0.0.dylib @executable_path/../Frameworks/libcrypto.1.0.0.dylib libssl.1.0.0.dylib</div></pre></td></tr></table></figure>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux 平台需要使用终端运行可执行程序, 因为自己双击打开可执行程序, 无法查看错误日志.</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 平台和 macOS 平台太类似, 只不过 Windows 平台太会直接告诉你出了什么问题</p>
<p>需要注意的是: 如果出现了<code>api-ms-win-crt-runtime-l1-1-0.dll</code>丢失, 那么意味着客户机没有安装运行库, 安装<code>msvc2016_x64</code>或者<code>msvc2016_x32</code>即可, google 一下就可以查看到详情了, 这里不细说了</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib" target="_blank" rel="external">https://forum.qt.io/topic/81180/library-not-loaded-usr-local-cellar-openssl-1-0-2k-lib-libcrypto-1-0-0-dylib</a></p>
<p><a href="https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x" target="_blank" rel="external">https://stackoverflow.com/questions/33991581/install-name-tool-to-update-a-executable-to-search-for-dylib-in-mac-os-x</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件发布的时候经常会遇到, 动态链接库找不到的问题, 而且这种问题处理起来还非常麻烦, 因为在本机是开发环境的原因问题经常无法暴露出来, 所以这就坑了, 线面来说说如何避免这种问题的出现. &lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://huyaohui.com/categories/Build/"/>
    
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="macOS" scheme="http://huyaohui.com/tags/macOS/"/>
    
      <category term="Linux" scheme="http://huyaohui.com/tags/Linux/"/>
    
      <category term="Windows" scheme="http://huyaohui.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Fix Qt launching debugger not work</title>
    <link href="http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/"/>
    <id>http://huyaohui.com/2018/01/04/Fix-Qt-launching-debugger-not-work/</id>
    <published>2018-01-04T08:33:35.000Z</published>
    <updated>2018-01-04T08:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次手贱导致 Qt debugger 无法工作的经历<br>事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.<br>我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.</p>
<a id="more"></a>
<h2 id="错误log"><a href="#错误log" class="headerlink" title="错误log"></a>错误log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">eERROR: Lldb stderr: Traceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eERROR: Lldb stderr:   File &quot;/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Resources/Python/lldb/__init__.py&quot;, line 98, in &lt;module&gt;</div><div class="line">e    import six</div><div class="line">eImportError: No module named six</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eTraceback (most recent call last):</div><div class="line">e  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">eNameError: name &apos;run_one_line&apos; is not defined</div><div class="line">eerror: python failed attempting to evaluate &apos;print(&apos;@\nlldbstartupok@\n&apos;)&apos;</div></pre></td></tr></table></figure>
<p>google 到的解决方案是需要安装<code>pip install six</code>这个包</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="卸载-brew-安装的-python"><a href="#卸载-brew-安装的-python" class="headerlink" title="卸载 brew 安装的 python"></a>卸载 brew 安装的 python</h3><p>如果不卸载, 无法使用系统 python, <code>LLDB</code>调用的是系统的 python 而不是自己安装的<br>需要注意的是, 卸载完后需要重启一下控制台</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall --ignore-dependencies python</div></pre></td></tr></table></figure>
<h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">sudo python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="安装-six-包"><a href="#安装-six-包" class="headerlink" title="安装 six 包"></a>安装 six 包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install six</div></pre></td></tr></table></figure>
<p>ok, 打完收工, 完美如初</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要手贱, 不要手贱, 不要手贱…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次手贱导致 Qt debugger 无法工作的经历&lt;br&gt;事情是这样的, 因为电脑磁盘空间不够了, 于是我像往常一样打开 DaisyDisk 查看有哪些文件比较占空间, 于是乎故事就开始了.&lt;br&gt;我看到了 /Library/Python/2.7/site-packages 这个目录发现这是系统的 python 包路径, 因为我用的是 brew 安装的最新版 python , 就想当然的认为这个是没有用的了, 于是乎就删之, 删除之后我并没有发现有什么异样, 因为并不是需要经常用 Qt debugger 的, 于是乎某一天开启debug, 发现gg了, 起初还以为是系统更新的问题, 然后把 Qt, Xcode 都更新了一遍, 发现还是不行, google 到的信息, 也没能解决我的问题, 一直蛋疼了很久, 突然想起可以去看下 debug log, 或许能知道是什么原因, 打开 log 一看果然有问题, 知道问题了自然就好解决了, 下面就来说说我怎么解决的吧.&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Debug" scheme="http://huyaohui.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>解决Qt使用动画更改窗口大小时窗口内部件闪烁的问题</title>
    <link href="http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/"/>
    <id>http://huyaohui.com/2017/11/24/jie-jue-Qt-shi-yong-dong-hua-geng-gai-chuang-kou-da-xiao-shi-chuang-kou-nei-bu-jian-shan-shuo-de-wen-ti/</id>
    <published>2017-11-24T07:25:06.000Z</published>
    <updated>2017-12-30T13:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>生命不息, 趟坑不止. 还好都能解决, 可喜可贺.<br>先来说下这次踩的又是什么坑吧, 当你使用<code>QPropertyAnimation</code>修改<code>window</code>的<code>size</code>的时候, <code>window</code>内的<code>widget</code>会出现闪烁的现象, 当时的猜测应该是因为<code>widget</code>没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o</p>
<a id="more"></a>
<h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><p>Native Widgets vs Alien Widgets</p>
<p>Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing system. They do not have a native window handle associated with them. This feature significantly speeds up widget painting, resizing, and removes flicker.</p>
<p>Should you require the old behavior with native windows, you can choose one of the following options:</p>
<ul>
<li>Use the <code>QT_USE_NATIVE_WINDOWS</code>=1 in your environment.</li>
<li>Set the <code>Qt::AA_NativeWindows</code> attribute on your application. All widgets will be native widgets.</li>
<li>Set the <code>Qt::WA_NativeWindow</code> attribute on widgets: The widget itself and all of its ancestors will become native (unless <code>Qt::WA_DontCreateNativeAncestors</code> is set).</li>
<li>Call <code>QWidget::winId</code> to enforce a native window (this implies 3).</li>
<li>Set the <code>Qt::WA_PaintOnScreen</code> attribute to enforce a native window (this implies 3).</li>
</ul>
<p>原文地址: <a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a></p>
<p>英语渣这里就不翻译了, 大概意思就是<code>Qt 4.4</code>里面引用了一种机制可以消除闪烁的现象, 但是不知道为什么在<code>5.0</code>之后又移除了这个功能, 只做一个选项供大家使用(Ps: 这一点上文并没有提到, 但是联想到这是<code>Qt5</code>的文档应该也能想到, 但是我还是找到了有人在社区的提问, 单是没人回, 这就很微妙了<a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">-&gt;_-&gt;传送门</a>)</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>上文已经说了不过我这里还是写一下, 都是我测试过的哦..<br>上文中提到的方法, 我只试了两个, 其他的并未尝试, 故不做说明, 见谅</p>
<h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>作用于整个应用</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qApp-&gt;setAttribute(Qt::AA_NativeWindows, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="单个设置"><a href="#单个设置" class="headerlink" title="单个设置"></a>单个设置</h3><p>作用于单个<code>QWidget</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">widget-&gt;setAttribute(Qt::WA_NativeWindow, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当全局设置该属性后, 会导致<code>QTextEdit</code>和<code>QPlainTextEdit</code>无法输入中文</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://doc.qt.io/qt-5/qwidget.html" target="_blank" rel="external">http://doc.qt.io/qt-5/qwidget.html</a><br><a href="https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker" target="_blank" rel="external">https://forum.qt.io/topic/22933/qt5-resize-or-animation-of-qmainwindow-causes-flicker</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命不息, 趟坑不止. 还好都能解决, 可喜可贺.&lt;br&gt;先来说下这次踩的又是什么坑吧, 当你使用&lt;code&gt;QPropertyAnimation&lt;/code&gt;修改&lt;code&gt;window&lt;/code&gt;的&lt;code&gt;size&lt;/code&gt;的时候, &lt;code&gt;window&lt;/code&gt;内的&lt;code&gt;widget&lt;/code&gt;会出现闪烁的现象, 当时的猜测应该是因为&lt;code&gt;widget&lt;/code&gt;没有参加到渲染中去, 但是就是不知道该怎么解决, 今天还真被我证实了我的猜测是正确的, 挺高兴的呢, 下面就来说下解决方案, 其实就一行代码, 现实就往往是这么残酷, o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt图标显示模糊原因及解决方法</title>
    <link href="http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/"/>
    <id>http://huyaohui.com/2017/10/19/Qt-tu-biao-xian-shi-mo-hu-yuan-yin-ji-jie-jue-fang-fa/</id>
    <published>2017-10-19T10:25:29.000Z</published>
    <updated>2017-10-20T09:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>自使用<code>Qt</code>以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过<code>Qss</code>来设置图标就不会出现失真的情况, 还有一种方案就是使用<code>svg</code>格式的图片, 也能解决部分问题<br>但是这两种方法在设置<code>QLineEdit</code>的<code>icon</code>的时候无效了.<br>没办法继续找答案, 灵光一闪间, 想起了<code>iOS</code>开发中有<code>@2x</code>和<code>@3x</code>的图片, 用来适配不同屏幕分辨率, 于是搜索<code>qt mac  图片 两倍大小</code>, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o</p>
<a id="more"></a>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>The key to the OS X high-dpi mode is that most geometry that was previously specified in device pixels are now in device-independent points. This includes desktop geometry (which on the 15 inch retina MacBook Pro is 1440×900 and not the full 2880×1800), window geometry and event coordinates. The CoreGraphics paint engine is aware of the full resolution and will produce output at that resolution. For example, a 100×100 window occupies the same area on screen on a normal and high-dpi screen (everything else being equal). On the high-dpi screen the window’s backing store contains 200×200 pixels.</p>
<p>The main benefits of this mode is backwards compatibility and free high-dpi vector graphics. Unaware applications simply continue to work with the same geometry as before and can keep hardcoded pixel values. At the same time they get crisp vector graphics such as text for free. Raster graphics does not get an automatic improvement but is manageable. The downside is the inevitable coordinate system confusion when working with code that mixes points and pixels.</p>
<p>The scale factor between points and pixels is always 2x. This is also true when changing the screen resolution – points and pixels are scaled by the same amount. When scaling for “More Space” applications will render to a large backing store which is then scaled down to the physical screen resolution.</p>
<p>不知道怎么翻译o(╯□╰)o, 大概意思就是<code>OS X</code>采用的是<code>retina</code>屏幕, 这种屏幕在相同尺寸的情况下的一个像素点是之前屏幕的两倍, 也就是<a href="https://zh.wikipedia.org/wiki/%E6%AF%8F%E8%8B%B1%E5%AF%B8%E7%82%B9%E6%95%B0" target="_blank" rel="external">DPI</a>更高<br>而<code>Qt</code>默认并不支持这种处理方式, 所以导致实际有一个像素点对应屏幕上两个像素点, 这也就是失真的原因了</p>
<p>原文地址: <a href="http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/" target="_blank" rel="external">http://blog.qt.io/blog/2013/04/25/retina-display-support-for-mac-os-ios-and-x11/</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用<code>QPainter</code>手动设置绘制大小, 如下代码的图片绘制已经被修改成了可以在高DPI系统中返回一个更大的像素映射, 但是这种行为会破坏现有的代码结构, 代码来控制最好的情况应该是<code>Qt</code>框架来直接控制</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">QRect destinationRect = ...</div><div class="line">QIcon icon = ...</div><div class="line">painter.drawPixmap(destinationRect, icon.pixmap(destinationRect.size()));</div><div class="line">QIcon::pixmap()</div></pre></td></tr></table></figure>
<p>所以<code>Qt</code>使用<code>AA_UseHighDpiPixmaps</code>这个应用程序属性来控制渲染：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在Qt 5.1和之后的版本中这个属性默认值是关闭的, 需要手动开启</div><div class="line">qApp-&gt;setAttribute(Qt::AA_UseHighDpiPixmaps);</div></pre></td></tr></table></figure>
<h2 id="一些奇怪的地方"><a href="#一些奇怪的地方" class="headerlink" title="一些奇怪的地方"></a>一些奇怪的地方</h2><p>当没有开启搞质量<code>DPI</code>时:<br>经过尝试, 使用svg矢量图来显示icon一切正常, 单是设置<code>QPushButton</code>的<code>icon</code>时无效, 设置<code>QTreeViewItem</code>的<code>icon</code>是正常的<br>还有就是貌似使用QSS设置icon也不会出现这个bug, 但是不是绝对的, 设置<code>QLineEdit</code>的<code>icon</code>的时候还是会模糊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自使用&lt;code&gt;Qt&lt;/code&gt;以来其实一直都存在这个问题没能解决(Ps: 期间尝试N个版本), 要问为什么我能忍到现在, 主要还是找到一个临时的解决方案, 通过&lt;code&gt;Qss&lt;/code&gt;来设置图标就不会出现失真的情况, 还有一种方案就是使用&lt;code&gt;svg&lt;/code&gt;格式的图片, 也能解决部分问题&lt;br&gt;但是这两种方法在设置&lt;code&gt;QLineEdit&lt;/code&gt;的&lt;code&gt;icon&lt;/code&gt;的时候无效了.&lt;br&gt;没办法继续找答案, 灵光一闪间, 想起了&lt;code&gt;iOS&lt;/code&gt;开发中有&lt;code&gt;@2x&lt;/code&gt;和&lt;code&gt;@3x&lt;/code&gt;的图片, 用来适配不同屏幕分辨率, 于是搜索&lt;code&gt;qt mac  图片 两倍大小&lt;/code&gt;, 真就被我找到答案了, 果然之前还是没有找到正确的搜索姿势o(╯□╰)o&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QDialog 模态对话框和非模态对话框</title>
    <link href="http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/"/>
    <id>http://huyaohui.com/2017/09/26/Qt-QDialog-mo-tai-dui-hua-kuang-he-fei-mo-tai-dui-hua-kuang/</id>
    <published>2017-09-26T08:13:16.000Z</published>
    <updated>2017-10-17T07:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.<br>虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)</p>
<a id="more"></a>
<p>对话框是 GUI 程序中不可或缺的组成部分。很多不能或者不适合放入主窗口的功能组件都必须放在对话框中设置。对话框通常会是一个顶层窗口，出现在程序最上层，用于实现短期任务或者简洁的用户交互。尽管 Ribbon 界面的出现在一定程度上减少了对话框的使用几率，但是，我们依然可以在最新版本的 Office 中发现不少对话框。因此，在可预见的未来，对话框会一直存在于我们的程序之中。</p>
<p>Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。</p>
<h2 id="QDialog的模态与非模态区别"><a href="#QDialog的模态与非模态区别" class="headerlink" title="QDialog的模态与非模态区别"></a>QDialog的模态与非模态区别</h2><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><p>简介: 在关闭模式对话框之前，程序不能进行其他工作</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// exec()方法: 它总是以模态来显示对话框</span></div><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;exec();</div><div class="line"></div><div class="line"><span class="comment">// show()方法，它使得对话框既可以模态显示，也可以非模态显示，决定它是模态还是非模态的是对话框的modal属性</span></div><div class="line">Dialog *dialog2 = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog2-&gt;setModal(<span class="literal">true</span>);</div><div class="line">dialog2-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中当<code>Dialog</code>没关闭前, 无法操作<code>MainWindow</code></p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850572-81f2c330-a26b-11e7-9a8a-50cb8c56ec43.jpg" alt="qq20170926-163259 2x"></p>
<h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p>简介: 运行在应用程序中，对于任何其他窗口都是独立窗口</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// dialog2-&gt;setModal(false); // 默认是false</span></div><div class="line">dialog-&gt;show();</div></pre></td></tr></table></figure>
<p>下图中<code>Dialog</code>和<code>MainWindow</code>互不影响</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850573-8237aac2-a26b-11e7-8829-e24ecc00a3d4.jpg" alt="qq20170926-162738 2x"></p>
<h3 id="特殊的模态对话框"><a href="#特殊的模态对话框" class="headerlink" title="特殊的模态对话框"></a>特殊的模态对话框</h3><p>简介: 在关闭模式对话框之前, 程序可以修改父窗口的大小, 并且对话框会固定停留在父窗口的标题下面</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Dialog *dialog = <span class="keyword">new</span> Dialog(<span class="keyword">this</span>);</div><div class="line">dialog-&gt;open();</div></pre></td></tr></table></figure>
<p>效果如下图</p>
<p><img src="https://user-images.githubusercontent.com/8622405/30850571-81f040ba-a26b-11e7-90af-04ac3973b725.jpg" alt="qq20170926-163208 2x"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个困扰我很久的关于弹出对话框效果显示的问题, 虽然我知道应该是哪里设置下就可以了, 但是查了很久的文档也没能最终找到答案, 不过今天居然无意间被我解决了.&lt;br&gt;虽然已经实现了一个类似的效果, 但是还是用系统的好, 只需要修改一行代码就完成了(Ps: 之前写了几十行代码o(╯□╰)o)&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Dialog" scheme="http://huyaohui.com/tags/Dialog/"/>
    
  </entry>
  
  <entry>
    <title>CMake C/CPP 混合编译</title>
    <link href="http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/"/>
    <id>http://huyaohui.com/2017/09/25/CMake-C/CPP-hun-he-bian-yi/</id>
    <published>2017-09-25T06:53:25.000Z</published>
    <updated>2017-09-25T07:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实主要是要记录一下使用<code>CMake</code> <code>C/CPP</code>混编的一些细节, 要不然会被坑的很惨, 顺便把<code>C/CPP</code>混编原理和实现也说一下. </p>
<a id="more"></a>
<h2 id="C-C-混合编程是什么"><a href="#C-C-混合编程是什么" class="headerlink" title="C/C++混合编程是什么"></a>C/C++混合编程是什么</h2><p>就像问题本身所说, C/C++混合编程也就是一个工程中, 在C函数中调用C++函数的方法, 在C++的函数中能够调用C函数的方法.</p>
<h2 id="C-C-混合编程有什么用"><a href="#C-C-混合编程有什么用" class="headerlink" title="C/C++混合编程有什么用"></a>C/C++混合编程有什么用</h2><p>在我们日常开发中, 也许会遇到这么一些情况, 同事A, C非常牛逼, 但是对C++一窍不通; 同事B, C++信手拈来, 但是对C却满头雾水. 但是在工作中有这么一种需求, 同事A需要用到C++的方法, 同事B需要用到C的方法,  这怎么办? </p>
<p>没错, 最简单的就是, 同事A把C的代码写好, 然后同事B只管调用即可, 同理, 同事A只管调用同事B写好的C++代码, 各司其职, 提高工作效率.</p>
<h2 id="C-C-混合编程应该怎么实现"><a href="#C-C-混合编程应该怎么实现" class="headerlink" title="C/C++混合编程应该怎么实现"></a>C/C++混合编程应该怎么实现</h2><p>那么, 这混合编程究竟要怎么实现呢?</p>
<p>在介绍之前, 我们先简单了解下以下几个概念</p>
<h3 id="函数重载-Overloading"><a href="#函数重载-Overloading" class="headerlink" title="函数重载(Overloading)"></a>函数重载(Overloading)</h3><p>C++和Java中的函数重载的定义一致, </p>
<p>即在相同的作用域内, C++允许多个函数名称相同, 而形参列表不同: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 没有参数</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;	<span class="comment">// 有一个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;	<span class="comment">// 有一个double类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;	<span class="comment">// 有两个int类型的形参</span></div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	<span class="comment">// 报错, 函数重载体现在函数名相同形参列表不同和返回类型无关</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而大家有没有想过为什么C++支持函数重载, 而C却不支持函数重载呢? </p>
<p>这个就要涉及到C++的名字改编机制了. 请往下看~</p>
<h3 id="C-的名字改编机制"><a href="#C-的名字改编机制" class="headerlink" title="C++的名字改编机制"></a>C++的名字改编机制</h3><h4 id="在C中"><a href="#在C中" class="headerlink" title="在C中"></a>在C中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成`_test` </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps: 不提供test()函数的实现是让<code>CMake</code>链接的时候报错, 这样我们才能看清楚test()函数的真面目!</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后依然是 _test</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<h4 id="在C-中"><a href="#在C-中" class="headerlink" title="在C++中"></a>在C++中</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 该函数编译后编译器会对函数名称改写成 test()</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"test()"</span>, referenced from:</div><div class="line">      run() in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;    <span class="comment">// 该函数编译后编译器改写函数名后是 test(int)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    test(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</div><div class="line">  <span class="string">"_test"</span>, referenced from:</div><div class="line">      run in main.o</div><div class="line">ld: symbol(s) <span class="keyword">not</span> found <span class="keyword">for</span> architecture x86_64</div><div class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span> (use -v to see invocation)</div></pre></td></tr></table></figure></p>
<p>ps : 有的系统的编译器会编译成_test_int 这种格式, 名字改编机制只是一种思路, 并没有一种唯一的命名规范, 不同的编译器命名规范不同, 但是思路一致! 如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">// 编译后生成: test() 或 _test</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;   <span class="comment">// 编译后生成: test(int) 或 _test_int</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> a)</span></span>;    <span class="comment">// 编译后生成: test(double) 或 _test_double</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;    <span class="comment">// 编译后生成: test(int, int) 或 _test_int_int</span></div></pre></td></tr></table></figure>
<h4 id="extern-及-extern-“C”"><a href="#extern-及-extern-“C”" class="headerlink" title="extern 及 extern “C”"></a>extern 及 extern “C”</h4><p>extern相信大家比较熟悉, 它一般用来声明一个函数, 全局变量的作用域. extern告诉编译器, 其声明的函数和变量可以供本文件或者其他文件使用. 这里不再赘述. </p>
<p>extern “C” 中的C是什么意思呢?</p>
<p>这里的C不是指C语言这一门语言, 而是表示一种编译和链接的规约. C表示符合C语言的编译和连接规约的任何语言，如Fortran(公式翻译)、assembler(汇编语言)等。</p>
<p>ps: extern “C” 只是指定编译和链接的规约, 并不会影响语义, 所以在C++文件中该怎么写还得怎么写, 必须遵循C++的语法规范. </p>
<blockquote>
<p>在C++源文件的语句前加上 extern “C” 的作用就是告诉编译器, 这一段代码按照类C的编译和链接规约来编译和链接(对, 也就是按照类C的函数命名规范编译)</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>通过上面几个例子, 相信大家很容易就能知道为什么C++支持重载而C不支持重载了.<br>因为C++有名字改编机制而C没有!<br>所以在C中, 只要函数名相同, 不管你的形参列表如何南辕北辙, 编译器均会将其编译为同一函数名, 这样在程序执行过程中就会造成函数调用的二义性(也就是对于相同函数名的函数, 程序并不知道应该调用哪一个函数), 这是不允许的, 所以会报错.<br>然而对于C++而言, 尽管他们的函数名相同, 但是因为他们的形参列表不同, 编译器编译后实际上会为他们改名为不同名字的函数, 所以程序执行调用函数的时候并不会产生二义性, 因此C++允许函数重载.<br>这里扯一句题外话, C++的重载被认为不是多态, 因为多态是动态运行时对方法的绑定, 而C++的函数重载最多算是编译时的”多态”. (这句话不一定正确, 请大家纠正)</p>
</blockquote>
<h2 id="CPP调用C代码"><a href="#CPP调用C代码" class="headerlink" title="CPP调用C代码"></a>CPP调用C代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种方法</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cpp.h"</span></span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"c.h"</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 第二种方法</span></div><div class="line"><span class="comment">// c.h 文件定义规则</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// Do something...</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里有一点需要注意当<code>CMake</code>的<code>project(projectname LANGUAGES CXX)</code>方法指定了语言时, <code>CMake</code>只会编译指定的语言的代码, 而导致<code>C</code>语言代码不被编译, 这里需要特别注意</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>当需要使用到C/CPP混编时需要用到<code>extern &quot;C&quot;</code></li>
<li>当<code>CMake</code>指定了语言时, 只有指定的语言才会参与编译</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code" target="_blank" rel="external">https://stackoverflow.com/questions/4598308/how-do-i-compile-and-link-c-code-with-compiled-c-code</a><br><a href="http://guangming008.blog.163.com/blog/static/1203968201011634426908/" target="_blank" rel="external">http://guangming008.blog.163.com/blog/static/1203968201011634426908/</a><br><a href="http://www.jianshu.com/p/8d3eb96e142a" target="_blank" rel="external">http://www.jianshu.com/p/8d3eb96e142a</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实主要是要记录一下使用&lt;code&gt;CMake&lt;/code&gt; &lt;code&gt;C/CPP&lt;/code&gt;混编的一些细节, 要不然会被坑的很惨, 顺便把&lt;code&gt;C/CPP&lt;/code&gt;混编原理和实现也说一下. &lt;/p&gt;
    
    </summary>
    
      <category term="C/CPP" scheme="http://huyaohui.com/categories/C-CPP/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Build" scheme="http://huyaohui.com/tags/Build/"/>
    
  </entry>
  
  <entry>
    <title>Qt StyleSheet 作用范围</title>
    <link href="http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/"/>
    <id>http://huyaohui.com/2017/08/10/Qt-StyleSheet-zuo-yong-fan-wei/</id>
    <published>2017-08-10T12:14:26.000Z</published>
    <updated>2017-08-10T13:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到<code>Qss</code>和<code>css</code>是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~</p>
<a id="more"></a>
<h2 id="事情的起因"><a href="#事情的起因" class="headerlink" title="事情的起因"></a>事情的起因</h2><p>在开发界面的过程中, 莫名其面的<code>QTableWidget</code>的滚动条变成方块了, 然后我单独开启一个项目测试又是正常的, 感觉非常奇怪<br>后来我惊讶的发现只要把<code>QTableWidget</code>的父节点<code>QWidget</code>改成删除就好了, 我想当然的以为是<code>QWidget</code>的bug, 我就把父节点<code>QWidget</code>换成<code>QFrame</code>, 居然可以了, 这让我更加确信是<code>QWidget</code>的bug了, 也让我走进了万劫不复的深渊<br>然后我继续忙, 突然间<code>QTableWidget</code>的滚动条又变成方块了, 遂陷入沉思, 最后决定放弃, 先把滚动条关闭再说, 不想再折腾这个东西了(已经折腾两天了/(ㄒoㄒ)/~~)<br>在写<code>Qss</code>的时候不小心写错了个单词, 然后发现控制台出现了, 好几个相同的报错, 遂想到是不是当前节点的子节点也修改了这个属性呢? 当时还没想到是这个原因导致的滚动条bug(前面说了我已经放弃了)<br>再后来我不甘心继续找滚动条bug的原因, 我还怀疑是<code>Qt</code>版本的问题, 于是就用一个旧版本去重新实现该功能, 发现一切正常, 我又相当然的以为真是<code>Qt</code>的bug, 然后我大喜欢把项目迁移的旧版<code>Qt</code>上, 又发现直接用旧版本<code>Qt</code>打开<code>.ui</code>文件滚动条bug还在, 于是乎我就用旧版本<code>Qt</code>重新吧界面画了一遍, 一开始的时候还没问题, 但是当我改完细节后, 立马就不行了, 滚动条bug又出现了<br>于是乎我慢慢的撤销代码, 一步一步测试, 最后发现是设置了<code>Qss</code>才导致的滚动条bug, 突然灵光一闪记起来了之前的写出单词导致控制台出现相同的报错, 一切的线索都链接起来了<br>终于知道为什么连google都找不答案, 原来是直接太傻逼了, 最后搜索 <code>qt stylesheet</code>搜索框下面直接出现了<code>qt stylesheet 仅限当前</code>, 我想我肯定找到答案了</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th style="text-align:left">选择器</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">通用选择器</td>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配所有的widget</td>
</tr>
<tr>
<td style="text-align:left">类型选择器</td>
<td style="text-align:left">QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例和继承于它的子类</td>
</tr>
<tr>
<td style="text-align:left">属性选择器</td>
<td style="text-align:left">QPushButton[flat=”false”]</td>
<td style="text-align:left">匹配所有非flat的QPushButton(通常情况下，使用Q_PROPERTY宏来声明你的属性，比如此例中的flat),并且要注意，你的属性类型要受 QVariant::toString()支持(查看toString()方法的帮助文档以获取更详细的解释). <br>这个选择器类型也可以用来判断动态属性，要了解更多使用自定义动态属性的细节，请参考使用自定义动态属性 。<br>除了使用=，你还可以使用~=来判断一个QStringList中是否包含给定的QString。<br>警告：如果在设置了样式表后，相应的属性值发生了改变(如：flat变成了”true”)，则有必要重新加载样式表，一个有效的方法是，取消样式表，再重新设置一次,下面的代码是其中一种方式：<br>style()-&gt;unpolish(this);<br>style()-&gt;polish(this);// force a stylesheet recomputation</td>
</tr>
<tr>
<td style="text-align:left">类选择器</td>
<td style="text-align:left">.QPushButton</td>
<td style="text-align:left">匹配所有的QPushButton实例，但不包括它的子类，与*[class~=”QPushButton”]是等价的。</td>
</tr>
<tr>
<td style="text-align:left">ID选择器</td>
<td style="text-align:left">QPushButton#okButton</td>
<td style="text-align:left">匹配所有object name为”okButton”的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">后裔选择器</td>
<td style="text-align:left">QDialog QPushButton</td>
<td style="text-align:left">匹配所有继承于QDialog(包括其所有子孙)的QPushButton实例。</td>
</tr>
<tr>
<td style="text-align:left">子选择器</td>
<td style="text-align:left">QDialog &gt; QPushButton</td>
<td style="text-align:left">匹配所有直接继承与QDialog的QPushButton实例。</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/qq_24571549/article/details/64131396" target="_blank" rel="external">http://blog.csdn.net/qq_24571549/article/details/64131396</a><br><a href="http://blog.csdn.net/vonger/article/details/7899101" target="_blank" rel="external">http://blog.csdn.net/vonger/article/details/7899101</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多么痛的领悟 你曾是我的全部… 哼哼哼… 差点唱起来了. 自己太傻逼了, 早就应该想到&lt;code&gt;Qss&lt;/code&gt;和&lt;code&gt;css&lt;/code&gt;是一样的, 父节点属性默认会被子节点继承. 不过我遇到的问题比较奇葩就是了, 以至于我一时懵逼了, 下面我就来讲讲我的遭遇/(ㄒoㄒ)/~~&lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="Qss" scheme="http://huyaohui.com/tags/Qss/"/>
    
  </entry>
  
  <entry>
    <title>Qt Creator 编译第三方扩展库</title>
    <link href="http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/"/>
    <id>http://huyaohui.com/2017/07/30/Qt-Creator-bian-yi-di-san-fang-kuo-zhan-ku/</id>
    <published>2017-07-30T04:25:45.000Z</published>
    <updated>2017-07-30T08:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇关于Qt编译的文章以来<a href="http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/">CMake 编译 Qt 安装第三方 libqgit2 扩展</a>, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.<br>其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). </p>
<a id="more"></a>
<h2 id="之前失败的原因"><a href="#之前失败的原因" class="headerlink" title="之前失败的原因"></a>之前失败的原因</h2><p>主要原因是选择错了编译环境, 应该直接使用<code>Qt Creator</code>进行编译, 而我使用的是<code>Cmake GUI</code>进行的编译, 导致最后编译出来的库在<code>Qt</code>中部分功能无法正常使用.</p>
<h2 id="此次编译过程"><a href="#此次编译过程" class="headerlink" title="此次编译过程"></a>此次编译过程</h2><h3 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750561-b7233e3a-7521-11e7-8330-190bd28733a4.jpg" alt="qq20170730-121113 2x"></p>
<p>这一步非常重要, 之前我也试过直接使用<code>Qt Creator</code>导入第三方库, 会导入失败, 原因就在这没有选择<code>C编译器</code>(<code>libgit2</code>是<code>C语言库</code>)</p>
<h3 id="导入libgit2库"><a href="#导入libgit2库" class="headerlink" title="导入libgit2库"></a>导入libgit2库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750562-b75f4038-7521-11e7-8d7d-804f6273885b.jpg" alt="qq20170730-121325 2x"></p>
<p>直接选择<code>CMakeLists.txt</code>打开</p>
<h3 id="选择构建工具包"><a href="#选择构建工具包" class="headerlink" title="选择构建工具包"></a>选择构建工具包</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750564-b78d10c6-7521-11e7-8552-45fb7b1ac3d4.jpg" alt="qq20170730-121622 2x"></p>
<p>选择上面配置好<code>C编译器</code>的构建工具包</p>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750566-b797b1e8-7521-11e7-8089-88036c9f119b.jpg" alt="qq20170730-121658 2x"></p>
<p>最后构建出来的项目如上图所示, 如果没有配置<code>C编译器</code>的话就只能看到一个<code>CMakeLists.txt</code>文件, 然后点击运行</p>
<h3 id="最后生成的链接库"><a href="#最后生成的链接库" class="headerlink" title="最后生成的链接库"></a>最后生成的链接库</h3><p><img src="https://user-images.githubusercontent.com/8622405/28750565-b7975900-7521-11e7-9310-6684f3dce175.jpg" alt="qq20170730-121835 2x"></p>
<p>运行完成后, 不出意外的话会在项目同级目录下生成一个<code>build</code>目录, 里面有我们要的编译后生成的二进制文件, 至此编译完成.(在windows平台如法炮制就好, linux平台暂未测试)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇关于Qt编译的文章以来&lt;a href=&quot;http://huyaohui.com/2016/11/11/CMake-%E7%BC%96%E8%AF%91-Qt-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9-libqgit2-%E6%89%A9%E5%B1%95/&quot;&gt;CMake 编译 Qt 安装第三方 libqgit2 扩展&lt;/a&gt;, 已经过了大半年了. 经过这大半年来的学习, 终于搞清楚了为什么我之前总是编译失败的原因了.&lt;br&gt;其实就是一个很简单的问题, 导致自己兜兜转转的尝试了将近一年的时间, 不过也挺佩服自己的毅力的(只能这样安慰自己了┑(￣Д ￣)┍). &lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://huyaohui.com/categories/Qt/"/>
    
    
      <category term="C/CPP" scheme="http://huyaohui.com/tags/C-CPP/"/>
    
      <category term="CMake" scheme="http://huyaohui.com/tags/CMake/"/>
    
      <category term="Qt" scheme="http://huyaohui.com/tags/Qt/"/>
    
      <category term="libgit2" scheme="http://huyaohui.com/tags/libgit2/"/>
    
  </entry>
  
  <entry>
    <title>cocos2dx Texture、SpriteFrame、Sprite的区别</title>
    <link href="http://huyaohui.com/2017/07/28/cocos2dx-Texture%E3%80%81SpriteFrame%E3%80%81Sprite-de-qu-bie/"/>
    <id>http://huyaohui.com/2017/07/28/cocos2dx-Texture、SpriteFrame、Sprite-de-qu-bie/</id>
    <published>2017-07-28T13:24:10.000Z</published>
    <updated>2017-07-28T13:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.<br>前段时间查了下<code>Texture、SpriteFrame、Sprite的区别</code>(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.</p>
<a id="more"></a>
<h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><p>Texture是保存在GPU缓冲中的一张纹理。是由一张图片创建获得的</p>
<h2 id="SpriteFrame"><a href="#SpriteFrame" class="headerlink" title="SpriteFrame"></a>SpriteFrame</h2><p><code>SpriteFrame</code> = <code>Texture</code> + <code>Rect</code><br>也就是说<code>SpriteFrame</code>是根据一张纹理材质来剪切而获得的</p>
<h2 id="Sprite"><a href="#Sprite" class="headerlink" title="Sprite"></a>Sprite</h2><p>简单的说<code>Sprite</code>就是一个<code>SpriteFrame</code>的控制器, 可以控制<code>SpriteFrame</code>以何种形式进行渲染</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html" target="_blank" rel="external">http://www.voidcn.com/blog/hanbingfengying/article/p-1255620.html</a><br><a href="http://blog.csdn.net/huaweitman/article/details/11477493" target="_blank" rel="external">http://blog.csdn.net/huaweitman/article/details/11477493</a><br><a href="http://dwz.cn/6kkzf2" target="_blank" rel="external">精灵 (计算机图形学)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然搞游戏开发已经有半年了, 但是始终都没有去深入了解引擎中的各种控件的具体含义, 仅仅就是知道怎么使用而已, 想必有很多程序员都和我有过一样的困惑.&lt;br&gt;前段时间查了下&lt;code&gt;Texture、SpriteFrame、Sprite的区别&lt;/code&gt;(一直都不知道他们之间有什么其别, 也是囧), 这里索性就把它记录下来了.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/categories/Cocos2dx/"/>
    
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/tags/Cocos2dx/"/>
    
      <category term="Texture" scheme="http://huyaohui.com/tags/Texture/"/>
    
      <category term="SpriteFrame" scheme="http://huyaohui.com/tags/SpriteFrame/"/>
    
      <category term="Sprite" scheme="http://huyaohui.com/tags/Sprite/"/>
    
  </entry>
  
  <entry>
    <title>Python的Flask框架中使用Flask-Migrate扩展迁移数据库</title>
    <link href="http://huyaohui.com/2017/06/05/Python-de-Flask-kuang-jia-zhong-shi-yong-Flask-Migrate-kuo-zhan-qian-yi-shu-ju-ku/"/>
    <id>http://huyaohui.com/2017/06/05/Python-de-Flask-kuang-jia-zhong-shi-yong-Flask-Migrate-kuo-zhan-qian-yi-shu-ju-ku/</id>
    <published>2017-06-05T09:51:25.000Z</published>
    <updated>2017-06-09T09:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flask-Migrate可以帮助Flask应用程序通过预设的Python脚本完成数据库迁移操作,这里我们就来看一下Python的Flask框架中使用Flask-Migrate扩展迁移数据库的教程,需要的朋友可以参考下</p>
<p>我们在升级系统的时候，经常碰到需要更新服务器端数据结构等操作，之前的方式是通过手工编写alter sql脚本处理，经常会发现遗漏，导致程序发布到服务器上后无法正常使用。</p>
<p>现在我们可以使用Flask-Migrate插件来解决之，Flask-Migrate插件是基于Alembic，Alembic是由大名鼎鼎的SQLAlchemy作者开发数据迁移工具。</p>
<a id="more"></a>
<h2 id="安装Flask-Migrate插件"><a href="#安装Flask-Migrate插件" class="headerlink" title="安装Flask-Migrate插件"></a>安装Flask-Migrate插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install Flask-Migrate</div></pre></td></tr></table></figure>
<h2 id="修改Flask-App部分的代码，以增加Migrate相关的Command"><a href="#修改Flask-App部分的代码，以增加Migrate相关的Command" class="headerlink" title="修改Flask App部分的代码，以增加Migrate相关的Command"></a>修改Flask App部分的代码，以增加Migrate相关的Command</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db = SQLAlchemy(app)</div><div class="line">migrate = Migrate(app, db)</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python app.py db init</div></pre></td></tr></table></figure>
<p>使用Flask-Migrate迁移数据库<br>随着开发进度不断向前，你会发现你的数据库模型需要更改，而当这种情况发生时需要更新数据库。<br>Flask-SQLAlchemy只有当数据库表不存在了才从模型创建它们，所以更新表的唯一途径就是销毁旧的表，当然这将导致所有数据库中的数据丢失。</p>
<p>有个更好的解决方案就是使用数据库迁移框架。和源码版本控制工具跟踪更改源码文件一样，数据库迁移框架跟踪更改数据库模型，然后将增量变化应用到数据库中。</p>
<p>SQLAlchemy的主要开发人员写了一个Alembic迁移框架，但我们不直接使用Alembic，Flask应用可以使用Flask-Migrate扩展，一个集成了Flask-Script来提供所有操作命令的轻量级Alembic包。</p>
<h2 id="创建迁移仓库"><a href="#创建迁移仓库" class="headerlink" title="创建迁移仓库"></a>创建迁移仓库</h2><p>下面展示扩展如何初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask.ext.migrate import Migrate, MigrateCommand </div><div class="line"></div><div class="line"># 其他配置略过...</div><div class="line"></div><div class="line">migrate = Migrate(app, db)</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div></pre></td></tr></table></figure>
<p>为了可以使用数据库迁移命令，Flask-Migrate提供MigrateCommand类来连接Flask-Script的manager对象。在这个示例中使用db来连接到命令。</p>
<p>在数据库迁移可以维护之前，必须通过init子命令来创建一个迁移库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db init</div><div class="line"> Creating directory /home/flask/flasky/migrations...done</div><div class="line"> Creating directory /home/flask/flasky/migrations/versions...done</div><div class="line"> Generating /home/flask/flasky/migrations/alembic.ini...done</div><div class="line"> Generating /home/flask/flasky/migrations/env.py...done</div><div class="line"> Generating /home/flask/flasky/migrations/env.pyc...done</div><div class="line"> Generating /home/flask/flasky/migrations/README...done</div><div class="line"> Generating /home/flask/flasky/migrations/script.py.mako...done</div><div class="line"> Please edit configuration/connection/logging settings in</div><div class="line"> &apos;/home/flask/flasky/migrations/alembic.ini&apos; before proceeding.</div></pre></td></tr></table></figure>
<p>这个命令创建一个migrations文件夹，里面存放了所有迁移脚本。</p>
<h2 id="创建迁移脚本"><a href="#创建迁移脚本" class="headerlink" title="创建迁移脚本"></a>创建迁移脚本</h2><p>在Alembic，数据库迁移工作由迁移脚本完成。这个脚本有两个函数，分别叫做upgrade()和downgrade()。upgrade()函数实施数据库更改，是迁移的一部分，downgrade()函数则删除它们。通过添加和删除数据库变化的能力，Alembic可以重新配置数据库从历史记录中的任何时间点。</p>
<p>Alembic迁移可以分别使用revision和migrate命令手动或自动创建。手动迁移通过由开发人员使用Alembic的Operations对象指令实现的空upgrade()和downgrade()函数创建迁移框架脚本。另一方面，自动迁移通过寻找模型定义和数据库当前状态间的不同为upgrade()和downgrade()生成代码。</p>
<p>警告：自动迁移并不总是准确的，可以忽略一些细节。所以应该经常审查一下自动生成的迁移脚本。<br>migrate子命令创建自动迁移脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db migrate -m &quot;initial migration&quot;</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl.</div><div class="line">INFO [alembic.migration] Will assume non-transactional DDL.</div><div class="line">INFO [alembic.autogenerate] Detected added table &apos;roles&apos;</div><div class="line">INFO [alembic.autogenerate] Detected added table &apos;users&apos;</div><div class="line">INFO [alembic.autogenerate.compare] Detected added index</div><div class="line">&apos;ix_users_username&apos; on &apos;[&apos;username&apos;]&apos;</div><div class="line"> Generating /home/flask/flasky/migrations/versions/1bc</div><div class="line"> 594146bb5_initial_migration.py...done</div></pre></td></tr></table></figure>
<h2 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h2><p>一旦迁移脚本被审查且接受，就可以使用db upgrade命令更新到数据库中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db upgrade</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl.</div><div class="line">INFO [alembic.migration] Will assume non-transactional DDL.</div><div class="line">INFO [alembic.migration] Running upgrade None -&gt; 1bc594146bb5, initial migration</div></pre></td></tr></table></figure>
<p>第一次迁移实际上相当于调用db.create_all()，但在后续迁移中，upgrade命令对表实施更新操作但不影响表中的内容。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python hello.py db init       # 初始化</div><div class="line">                                # 仅在第一次时使用</div><div class="line">$ python hello.py db migrate -m &quot;initial migration&quot;     # 创建迁移脚本</div><div class="line">                                                        # 每次有修改后都需要重新生成迁移脚本</div><div class="line">$ python hello.py db upgrade    # 迁移数据, 也可升级数据库</div><div class="line">$ python hello.py db downgrade  # 降级数据库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask-Migrate可以帮助Flask应用程序通过预设的Python脚本完成数据库迁移操作,这里我们就来看一下Python的Flask框架中使用Flask-Migrate扩展迁移数据库的教程,需要的朋友可以参考下&lt;/p&gt;
&lt;p&gt;我们在升级系统的时候，经常碰到需要更新服务器端数据结构等操作，之前的方式是通过手工编写alter sql脚本处理，经常会发现遗漏，导致程序发布到服务器上后无法正常使用。&lt;/p&gt;
&lt;p&gt;现在我们可以使用Flask-Migrate插件来解决之，Flask-Migrate插件是基于Alembic，Alembic是由大名鼎鼎的SQLAlchemy作者开发数据迁移工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://huyaohui.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://huyaohui.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://huyaohui.com/tags/Flask/"/>
    
      <category term="Flask-Migrate" scheme="http://huyaohui.com/tags/Flask-Migrate/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket 浅析</title>
    <link href="http://huyaohui.com/2017/03/06/WebSocket-qian-xi/"/>
    <id>http://huyaohui.com/2017/03/06/WebSocket-qian-xi/</id>
    <published>2017-03-06T09:33:56.000Z</published>
    <updated>2017-03-06T10:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近应用中正好使用到<code>WebSocket</code>, <code>腾讯Bugly</code>就发表了这篇文章, 虽然也不是非常全面但是把<code>WebSocket</code>的基本概念和使用都说到了, 还是相当受用, 故转载过来.<br>随后我会把把一些我遇到的转载文章中没有提及的问题补充到本文末尾. <a href="http://t.cn/RiCKZ0R" target="_blank" rel="external">原文地址-&gt;</a></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在WebSocket API尚未被众多浏览器实现和发布的时期，开发者在开发需要接收来自服务器的实时通知应用程序时，不得不求助于一些“hacks”来模拟实时连接以实现实时通信，最流行的一种方式是长轮询 。 长轮询主要是发出一个HTTP请求到服务器，然后保持连接打开以允许服务器在稍后的时间响应（由服务器确定）。为了这个连接有效地工作，许多技术需要被用于确保消息不错过，如需要在服务器端缓存和记录多个的连接信息（每个客户）。虽然长轮询是可以解决这一问题的，但它会耗费更多的资源，如CPU、内存和带宽等，要想很好的解决实时通信问题就需要设计和发布一种新的协议。</p>
<p>在WebSocket API尚未被众多浏览器实现和发布的时期，开发者在开发需要接收来自服务器的实时通知应用程序时，不得不求助于一些“hacks”来模拟实时连接以实现实时通信，最流行的一种方式是长轮询 。 长轮询主要是发出一个HTTP请求到服务器，然后保持连接打开以允许服务器在稍后的时间响应（由服务器确定）。为了这个连接有效地工作，许多技术需要被用于确保消息不错过，如需要在服务器端缓存和记录多个的连接信息（每个客户）。虽然长轮询是可以解决这一问题的，但它会耗费更多的资源，如CPU、内存和带宽等，要想很好的解决实时通信问题就需要设计和发布一种新的协议。</p>
<p>WebSocket 是伴随HTML5发布的一种新协议。它实现了浏览器与服务器全双工通信(full-duplex)，可以传输基于消息的文本和二进制数据。WebSocket 是浏览器中最靠近套接字的API，除最初建立连接时需要借助于现有的HTTP协议，其他时候直接基于TCP完成通信。它是浏览器中最通用、最灵活的一个传输机制，其极简的API 可以让我们在客户端和服务器之间以数据流的形式实现各种应用数据交换（包括JSON 及自定义的二进制消息格式），而且两端都可以随时向另一端发送数据。在这个简单的API 之后隐藏了很多的复杂性，而且还提供了更多服务，如：</p>
<p>连接协商和同源策略；<br>与既有 HTTP 基础设施的互操作；<br>基于消息的通信和高效消息分帧；<br>子协议协商及可扩展能力。<br>所幸，浏览器替我们完成了上述工作，我们只需要简单的调用即可。任何事物都不是完美的，设计限制和性能权衡始终会有，利用WebSocket 也不例外，在提供自定义数据交换协议同时，也不再享有在一些本由浏览器提供的服务和优化，如状态管理、压缩、缓存等。</p>
<p>随着HTML5的发布，越来越多的浏览器开始支持WebSocket，如果你的应用还在使用长轮询，那就可以考虑切换了。下面的图表显示了在一种常见的使用案例下，WebSocket和长轮询之间的带宽消耗差异：</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1134915854/TB2G6hAgMRkpuFjy1zeXXc.6FXa_!!1134915854.gif" alt=""></p>
<h3 id="WebSocket-API"><a href="#WebSocket-API" class="headerlink" title="WebSocket API"></a>WebSocket API</h3><p>WebSocket 对象提供了一组 API，用于创建和管理 WebSocket 连接，以及通过连接发送和接收数据。浏览器提供的WebSocket API很简洁，调用示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>); </div><div class="line"><span class="comment">// 创建安全WebSocket 连接（wss）</span></div><div class="line">ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; ... &#125; </div><div class="line"><span class="comment">// 错误处理</span></div><div class="line">ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125; </div><div class="line"><span class="comment">// 关闭时调用</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="comment">// 连接建立时调用</span></div><div class="line">    ws.send(<span class="string">"Connection established. Hello server!"</span>); </div><div class="line">    <span class="comment">// 向服务端发送消息</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123; </div><div class="line">    <span class="comment">// 接收服务端发送的消息</span></div><div class="line">    <span class="keyword">if</span>(msg.data <span class="keyword">instanceof</span> Blob) &#123; </div><div class="line">        <span class="comment">// 处理二进制信息</span></div><div class="line">        processBlob(msg.data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        processText(msg.data); </div><div class="line">        <span class="comment">// 处理文本信息</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接收和发送数据"><a href="#接收和发送数据" class="headerlink" title="接收和发送数据"></a>接收和发送数据</h4><p>WebSocket提供了极简的API，开发者可以轻松的调用，浏览器会为我们完成缓冲、解析、重建接收到的数据等工作。应用只需监听onmessage事件，用回调处理返回数据即可。 WebSocket支持文本和二进制数据传输，浏览器如果接收到文本数据，会将其转换为DOMString 对象，如果是二进制数据或Blob 对象，可直接将其转交给应用或将其转化为ArrayBuffer，由应用对其进行进一步处理。从内部看，协议只关注消息的两个信息：净荷长度和类型（前者是一个可变长度字段），据以区别UTF-8 数据和二进制数据。示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>);</div><div class="line">ws.binaryType = <span class="string">"arraybuffer"</span>; </div><div class="line"></div><div class="line"><span class="comment">// 接收数据</span></div><div class="line">wss.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(msg.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</div><div class="line">    processArrayBuffer(msg.data);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    processText(msg.data);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// 发送数据</span></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  socket.send(<span class="string">"Hello server!"</span>); </div><div class="line">  socket.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="string">'msg'</span>: <span class="string">'payload'</span>&#125;));</div><div class="line"></div><div class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">128</span>);</div><div class="line">  socket.send(buffer);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> intview = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</div><div class="line">  socket.send(intview);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer]);</div><div class="line">  socket.send(blob); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Blob 对象是包含有只读原始数据的类文件对象，可存储二进制数据，它会被写入磁盘；ArrayBuffer （缓冲数组）是一种用于呈现通用、固定长度的二进制数据的类型，作为内存区域可以存放多种类型的数据。</p>
<p>对于将要传输的二进制数据，开发者可以决定以何种方式处理，可以更好的处理数据流，Blob 对象一般用来表示一个不可变文件对象或原始数据，如果你不需要修改它或者不需要把它切分成更小的块，那这种格式是理想的；如果你还需要再处理接收到的二进制数据，那么选择ArrayBuffer 应该更合适。</p>
</blockquote>
<p>WebSocket 提供的信道是全双工的，在同一个TCP 连接上，可以双向传输文本信息和二进制数据，通过数据帧中的一位（bit）来区分二进制或者文本。WebSocket 只提供了最基础的文本和二进制数据传输功能，如果需要传输其他类型的数据，就需要通过额外的机制进行协商。WebSocket 中的send( ) 方法是异步的：提供的数据会在客户端排队，而函数则立即返回。在传输大文件时，不要因为回调已经执行，就错误地以为数据已经发送出去了，数据很可能还在排队。要监控在浏览器中排队的数据量，可以查询套接字的bufferedAmount 属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>);</div><div class="line"></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    subscribeToApplicationUpdates(<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </div><div class="line">        <span class="keyword">if</span> (ws.bufferedAmount == <span class="number">0</span>) </div><div class="line">            ws.send(evt.data); </div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>前面的例子是向服务器发送应用数据，所有WebSocket 消息都会按照它们在客户端排队的次序逐个发送。因此，大量排队的消息，甚至一个大消息，都可能导致排在它后面的消息延迟——队首阻塞！为解决这个问题，应用可以将大消息切分成小块，通过监控bufferedAmount 的值来避免队首阻塞。甚至还可以实现自己的优先队列，而不是盲目都把它们送到套接字上排队。要实现最优化传输，应用必须关心任意时刻在套接字上排队的是什么消息！</p>
<h4 id="子协议协商"><a href="#子协议协商" class="headerlink" title="子协议协商"></a>子协议协商</h4><p>在以往使用HTTP 或XHR 协议来传输数据时，它们可以通过每次请求和响应的HTTP 首部来沟通元数据，以进一步确定传输的数据格式，而WebSocket 并没有提供等价的机制。上文已经提到WebSocket只提供最基础的文本和二进制数据传输，对消息的具体内容格式是未知的。因此，如果WebSocket需要沟通关于消息的元数据，客户端和服务器必须达成沟通这一数据的子协议，进而间接地实现其他格式数据的传输。下面是一些可能策略的介绍：</p>
<ul>
<li>客户端和服务器可以提前确定一种固定的消息格式，比如所有通信都通过 JSON编码的消息或者某种自定义的二进制格式进行，而必要的元数据作为这种数据结构的一个部分；</li>
<li>如果客户端和服务器要发送不同的数据类型，那它们可以确定一个双方都知道的消息首部，利用它来沟通说明信息或有关净荷的其他解码信息；</li>
<li>混合使用文本和二进制消息可以沟通净荷和元数据，比如用文本消息实现 HTTP首部的功能，后跟包含应用净荷的二进制消息。</li>
</ul>
<p>上面介绍了一些可能的策略来实现其他格式数据的传输，确定了消息的串行格式化，但怎么确保客户端和服务端是按照约定发送和处理数据，这个约定客户端和服务端是如何协商的呢？这就需要WebSocket 提供一个机制来协商，这时WebSocket构造器方法的第二个可选参数就派上用场了，通过这个参数客户端和服务端就可以根据约定好的方式处理发送及接收到的数据。</p>
<p>WebSocket构造器方法如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WebSocket WebSocket(</div><div class="line"><span class="keyword">in</span> DOMString url, </div><div class="line"><span class="comment">// 表示要连接的URL。这个URL应该为响应WebSocket的地址。</span></div><div class="line"><span class="keyword">in</span> optional DOMString protocols </div><div class="line">    <span class="comment">// 可以是一个单个的协议名字字符串或者包含多个协议名字字符串的数组。默认设为一个空字符串。</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>通过上述WebSocket构造器方法的第二个参数，客户端可以在初次连接握手时，可以告知服务器自己支持哪种协议。如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'wss://example.com/socket'</span>,[<span class="string">'appProtocol'</span>, <span class="string">'appProtocol-v2'</span>]);</div><div class="line"></div><div class="line">ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="keyword">if</span> (ws.protocol == <span class="string">'appProtocol-v2'</span>) &#123; </div><div class="line">    ...</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，WebSocket 构造函数接受了一个可选的子协议名字的数组，通过这个数组，客户端可以向服务器通告自己能够理解或希望服务器接受的协议。当服务器接收到该请求后，会根据自身的支持情况，返回相应信息。</p>
<ul>
<li>有支持的协议，则子协议协商成功，触发客户端的onopen回调，应用可以查询WebSocket 对象上的protocol 属性，从而得知服务器选定的协议；</li>
<li>没有支持的协议，则协商失败，触发onerror 回调，连接断开。</li>
</ul>
<h4 id="WS与WSS"><a href="#WS与WSS" class="headerlink" title="WS与WSS"></a>WS与WSS</h4><p>WebSocket 资源URI采用了自定义模式：ws 表示纯文本通信（ 如ws://example.com/socket），wss 表示使用加密信道通信（TCP+TLS）。为什么不使用http而要自定义呢？</p>
<p>WebSocket 的主要目的，是在浏览器中的应用与服务器之间提供优化的、双向通信机制。可是，WebSocket 的连接协议也可以用于浏览器之外的场景，可以通过非HTTP协商机制交换数据。考虑到这一点，HyBi Working Group 就选择采用了自定义的URI模式：</p>
<ul>
<li>ws协议：普通请求，占用与http相同的80端口；</li>
<li>wss协议：基于SSL的安全传输，占用与tls相同的443端口。</li>
</ul>
<p>各自的URI如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ws-URI = <span class="string">"ws:"</span> <span class="string">"//"</span> host [ <span class="string">":"</span> port ] path [ <span class="string">"?"</span> query ]</div><div class="line">wss-URI = <span class="string">"wss:"</span> <span class="string">"//"</span> host [ <span class="string">":"</span> port ] path [ <span class="string">"?"</span> query ]</div></pre></td></tr></table></figure>
<p>很多现有的HTTP 中间设备可能不理解新的WebSocket 协议，而这可能导致各种问题：盲目的连接升级、意外缓冲WebSocket 帧、不明就里地修改内容、把WebSocket 流量误当作不完整的HTTP 通信，等等。这时WSS就提供了一种不错的解决方案，它建立一条端到端的安全通道，这个端到端的加密隧道对中间设备模糊了数据，因此中间设备就不能再感知到数据内容，也就无法再对请求做特殊处理。</p>
<h3 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h3><p>HyBi Working Group 制定的WebSocket 通信协议（RFC 6455）包含两个高层组件：开放性HTTP 握手用于协商连接参数，二进制消息分帧机制用于支持低开销的基于消息的文本和二进制数据传输。WebSocket 协议尝试在既有HTTP 基础设施中实现双向HTTP 通信，因此也使用HTTP 的80 和443 端口。不过，这个设计不限于通过HTTP 实现WebSocket 通信，未来的实现可以在某个专用端口上使用更简单的握手，而不必重新定义一个协议。WebSocket 协议是一个独立完善的协议，可以在浏览器之外实现。不过，它的主要应用目标还是实现浏览器应用的双向通信。</p>
<h4 id="数据成帧"><a href="#数据成帧" class="headerlink" title="数据成帧"></a>数据成帧</h4><p>WebSocket 使用了自定义的二进制分帧格式，把每个应用消息切分成一或多个帧，发送到目的地之后再组装起来，等到接收到完整的消息后再通知接收端。基本的成帧协议定义了帧类型有操作码、有效载荷的长度，指定位置的Extension data和Application data，统称为Payload data，保留了一些特殊位和操作码供后期扩展。在打开握手完成后，终端发送一个关闭帧之前的任何时间里，数据帧可能由客户端或服务器的任何一方发送。具体的帧格式如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> 0                   1                   2                   3</div><div class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</div><div class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</div><div class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</div><div class="line">|N|V|V|V|       |S|             |   (if payload len==126/127)   |</div><div class="line">| |1|2|3|       |K|             |                               |</div><div class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</div><div class="line">|     Extended payload length continued, if payload len == 127  |</div><div class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</div><div class="line">|                               |Masking-key, if MASK set to 1  |</div><div class="line">+-------------------------------+-------------------------------+</div><div class="line">| Masking-key (continued)       |          Payload Data         |</div><div class="line">+-------------------------------- - - - - - - - - - - - - - - - +</div><div class="line">:                     Payload Data continued ...                :</div><div class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</div><div class="line">|                     Payload Data continued ...                |</div><div class="line">+---------------------------------------------------------------+</div></pre></td></tr></table></figure>
<ul>
<li>FIN： 1 bit 。表示此帧是否是消息的最后帧，第一帧也可能是最后帧。</li>
<li>RSV1，RSV2，RSV3： 各1 bit 。必须是0，除非协商了扩展定义了非0的意义。</li>
<li>opcode：4 bit。表示被传输帧的类型：x0 表示一个后续帧；x1 表示一个文本帧；x2 表示一个二进制帧；x3-7 为以后的非控制帧保留；x8 表示一个连接关闭；x9 表示一个ping；xA 表示一个pong；xB-F 为以后的控制帧保留。</li>
<li>Mask： 1 bit。表示净荷是否有掩码（只适用于客户端发送给服务器的消息）。</li>
<li>Payload length： 7 bit, 7 + 16 bit, 7 + 64 bit。 净荷长度由可变长度字段表示： 如果是 0~125，就是净荷长度；如果是 126，则接下来 2 字节表示的 16 位无符号整数才是这一帧的长度； 如果是 127，则接下来 8 字节表示的 64 位无符号整数才是这一帧的长度。</li>
<li>Masking-key：0或4 Byte。 用于给净荷加掩护，客户端到服务器标记。</li>
<li>Extension data： x Byte。默认为0 Byte，除非协商了扩展。</li>
<li>Application data： y Byte。 在”Extension data”之后，占据了帧的剩余部分。</li>
<li>Payload data： (x + y) Byte。”extension data” 后接 “application data”。</li>
</ul>
<blockquote>
<p>帧：最小的通信单位，包含可变长度的帧首部和净荷部分，净荷可能包含完整或部分应用消息。<br>消息：一系列帧，与应用消息对等。</p>
</blockquote>
<p>是否把消息分帧由客户端和服务器实现决定，应用并不需要关注WebSocket帧和如何分帧，因为客户端（如浏览器）和服务端为完成该工作。那么客户端和服务端是按照什么规则进行分帧的呢？RFC 6455规定的分帧规则如下：</p>
<ol>
<li>一个未分帧的消息包含单个帧，FIN设置为1，opcode非0。</li>
<li>一个分帧了的消息包含：开始于：单个帧，FIN设为0，opcode非0；后接 ：0个或多个帧，FIN设为0，opcode设为0；终结于：单个帧，FIN设为1，opcode设为0。一个分帧了消息在概念上等价于一个未分帧的大消息，它的有效载荷长度等于所有帧的有效载荷长度的累加；然而，有扩展时，这可能不成立，因为扩展定义了出现的Extension data的解释。例如，Extension data可能只出现在第一帧，并用于后续的所有帧，或者Extension data出现于所有帧，且只应用于特定的那个帧。在缺少Extension data时，下面的示例示范了分帧如何工作。举例：如一个文本消息作为三个帧发送，第一帧的opcode是0x1，FIN是0，第二帧的opcode是0x0，FIN是0，第三帧的opcode是0x0，FIN是1。 　</li>
<li>控制帧可能被插入到分帧了消息中，控制帧必须不能被分帧。如果控制帧不能插入，例如，如果是在一个大消息后面，ping的延迟将会很长。因此要求处理消息帧中间的控制帧。</li>
<li>消息的帧必须以发送者发送的顺序传递给接受者。</li>
<li>一个消息的帧必须不能交叉在其他帧的消息中，除非有扩展能够解释交叉。</li>
<li>一个终端必须能够处理消息帧中间的控制帧。</li>
<li>一个发送者可能对任意大小的非控制消息分帧。</li>
<li>客户端和服务器必须支持接收分帧和未分帧的消息。</li>
<li>由于控制帧不能分帧，中间设施必须不尝试改变控制帧。</li>
<li>中间设施必须不修改消息的帧，如果保留位的值已经被使用，且中间设施不明白这些值的含义。</li>
</ol>
<p>在遵循了上述分帧规则之后，一个消息的所有帧属于同样的类型，由第一个帧的opcdoe指定。由于控制帧不能分帧，消息的所有帧的类型要么是文本、二进制数据或保留的操作码中的一个。</p>
<p>虽然客户端和服务端都遵循同样的分帧规则，但也是有些差异的。在客户端往服务端发送数据时，为防止客户端中运行的恶意脚本对不支持WebSocket 的中间设备进行缓存投毒攻击（cache poisoning attack），发送帧的净荷都要使用帧首部中指定的值加掩码。被标记的帧必须设置MASK域为1，Masking-key必须完整包含在帧里，它用于标记Payload data。Masking-key是由客户端随机选择的32位值，标记键应该是不可预测的，给定帧的Masking-key必须不能简单到服务器或代理可以预测Masking-key是用于一序列帧的，不可预测的Masking-key是阻止恶意应用的作者从wire上获取数据的关键。由于客户端发送到服务端的信息需要进行掩码处理，所以客户端发送数据的分帧开销要大于服务端发送数据的开销，服务端的分帧开销是2~10 Byte，客户端是则是6~14 Byte。</p>
<h5 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h5><p>控制帧由操作码标识，操作码的最高位是1。当前为控制帧定义的操作码有0x8（关闭）、0x9（Ping）和0xA（Pong），操作码0xB-0xF是保留的，未定义。控制帧用来交流WebSocket的状态，能够插入到消息的多个帧的中间。所有的控制帧必须有一个小于等于125字节的有效载荷长度，必须不能被分帧。</p>
<ul>
<li>关闭：操作码为0x8。关闭帧可能包含一个主体（帧的应用数据部分）指明关闭的原因，如终端关闭，终端接收到的帧太大，或终端接收到的帧不符合终端的预期格式。从客户端发送到服务器的关闭帧必须标记，在发送关闭帧后，应用程序必须不再发送任何数据。如果终端接收到一个关闭帧，且先前没有发送关闭帧，终端必须发送一个关闭帧作为响应。终端可能延迟发送关闭帧，直到它的当前消息发送完成。在发送和接收到关闭消息后，终端认为WebSocket连接已关闭，必须关闭底层的TCP连接。服务器必须立即关闭底层的TCP连接；客户端应该等待服务器关闭连接，但并非必须等到接收关闭消息后才关闭，如果它在合理的时间间隔内没有收到反馈，也可以将TCP关闭。如果客户端和服务器同时发送关闭消息，两端都已发送和接收到关闭消息，应该认为WebSocket连接已关闭，并关闭底层TCP连接。</li>
<li>Ping：操作码为0x9。一个Ping帧可能包含应用程序数据。当接收到Ping帧，终端必须发送一个Pong帧响应，除非它已经接收到一个关闭帧。它应该尽快返回Pong帧作为响应。终端可能在连接建立后、关闭前的任意时间内发送Ping帧。注意：Ping帧可作为keepalive或作为验证远程终端是否可响应的手段。</li>
<li>Pong：操作码为0xA。Pong 帧必须包含与被响应Ping帧的应用程序数据完全相同的数据。如果终端接收到一个Ping 帧，且还没有对之前的Ping帧发送Pong 响应，终端可能选择发送一个Pong 帧给最近处理的Ping帧。一个Pong 帧可能被主动发送，这作为单向心跳。对主动发送的Pong 帧的响应是不希望的。</li>
</ul>
<h5 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h5><p>数据帧携带需要发送的目标数据，由操作码标识，操作码的最高位是0。当前为数据帧定义的（文本），0x2（二进制），操作码0x3-0x7为以后的非控制帧保留，未定义。</p>
<p>操作码决定了数据的解释：</p>
<ul>
<li>文本：操作码为0x1。有效载荷数据是UTF-8编码的文本数据。特定的文本帧可能包含部分的UTF-8 序列，然而，整个消息必须包含有效的UTF-8，当终端以UTF-8解释字节流时发现字节流不是一个合法的UTF-8流，那么终端将关闭连接。</li>
<li>二进制：操作码为0x2。有效载荷数据是任意的二进制数据，它的解释由应用程序层唯一决定。</li>
</ul>
<h4 id="协议扩展"><a href="#协议扩展" class="headerlink" title="协议扩展"></a>协议扩展</h4><p>从上述的数据分帧格式可以知道，有很多扩展位预留，WebSocket 规范允许对协议进行扩展，可以使用这些预留位在基本的WebSocket 分帧层之上实现更多的功能。</p>
<p>下面是负责制定WebSocket 规范的HyBi Working Group进行的两项扩展：</p>
<ul>
<li><p>多路复用扩展（A Multiplexing Extension for WebSockets）：这个扩展可以将WebSocket 的逻辑连接独立出来，实现共享底层的TCP 连接。每个WebSocket 连接都需要一个专门的TCP 连接，这样效率很低。多路复用扩展解决了这个问题。它使用“信道ID”扩展每个WebSocket 帧，从而实现多个虚拟的WebSocket 信道共享一个TCP 连接。</p>
</li>
<li><p>压缩扩展（Compression Extensions for WebSocket）：给WebSocket 协议增加了压缩功能。基本的WebSocket 规范没有压缩数据的机制或建议，每个帧中的净荷就是应用提供的净荷。虽然这对优化的二进制数据结构不是问题，但除非应用实现自己的压缩和解压缩逻辑，否则很多情况下都会造成传输载荷过大的问题。实际上，压缩扩展就相当于HTTP 的传输编码协商。</p>
</li>
</ul>
<p>要使用扩展，客户端必须在第一次的Upgrade 握手中通知服务器，服务器必须选择并确认要在商定连接中使用的扩展。下面就是对升级协商的介绍。</p>
<h4 id="升级协商"><a href="#升级协商" class="headerlink" title="升级协商"></a>升级协商</h4><p>从上面的介绍可知，WebSocket具有很大的灵活性，提供了很多强大的特性：基于消息的通信、自定义的二进制分帧层、子协议协商、可选的协议扩展等等。上面也讲到，客户端和服务端需先通过HTTP方式协商适当的参数后才可建立连接，完成协商之后，所有信息的发送和接收不再和HTTP相关，全由WebSocket自身的机制处理。当然，完成最初的连接参数协商并非必须使用HTTP协议，它只是一种实现方案，可以有其他选择。但使用HTTP协议完成最初的协商，有以下好处：让WebSockets 与现有HTTP 基础设施兼容：WebSocket 服务器可以运行在80 和443 端口上，这通常是对客户端唯一开放的端口；可以重用并扩展HTTP 的Upgrade 流，为其添加自定义的WebSocket 首部，以完成协商。</p>
<p>在协商过程中，用到的一些头域如下：</p>
<ul>
<li>Sec-WebSocket-Version：客户端发送，表示它想使用的WebSocket 协议版本（13表示RFC 6455）。如果服务器不支持这个版本，必须回应自己支持的版本。</li>
<li>Sec-WebSocket-Key：客户端发送，自动生成的一个键，作为一个对服务器的“挑战”，以验证服务器支持请求的协议版本；</li>
<li>Sec-WebSocket-Accept：服务器响应，包含Sec-WebSocket-Key 的签名值，证明它支持请求的协议版本；</li>
<li>Sec-WebSocket-Protocol：用于协商应用子协议：客户端发送支持的协议列表，服务器必须只回应一个协议名；</li>
<li>Sec-WebSocket-Extensions：用于协商本次连接要使用的WebSocket 扩展：客户端发送支持的扩展，服务器通过返回相同的首部确认自己支持一或多个扩展。</li>
</ul>
<p>在进行HTTP Upgrade之前，客户端会根据给定的URI、子协议、扩展和在浏览器情况下的origin，先打开一个TCP连接，随后再发起升级协商。升级协商具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">GET /socket HTTP/<span class="number">1.1</span> </div><div class="line"><span class="comment">// 请求的方法必须是GET，HTTP版本必须至少是1.1</span></div><div class="line"></div><div class="line">Host: thirdparty.comOrigin: http:<span class="comment">//example.com</span></div><div class="line"></div><div class="line">Connection: Upgrade </div><div class="line">Upgrade: websocket </div><div class="line"><span class="comment">// 请求升级到WebSocket 协议</span></div><div class="line"></div><div class="line">Sec-WebSocket-Version: <span class="number">13</span> </div><div class="line"><span class="comment">// 客户端使用的WebSocket 协议版本</span></div><div class="line"></div><div class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== </div><div class="line"><span class="comment">// 自动生成的键，以验证服务器对协议的支持，其值必须是nonce组成的随机选择的16字节的被base64编码后的值</span></div><div class="line"></div><div class="line">Sec-WebSocket-Protocol: appProtocol, appProtocol-v2 </div><div class="line"><span class="comment">// 可选的应用指定的子协议列表</span></div><div class="line"></div><div class="line">Sec-WebSocket-Extensions: x-webkit-deflate-message, x-custom-extension </div><div class="line"><span class="comment">// 可选的客户端支持的协议扩展列表，指示了客户端希望使用的协议级别的扩展</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在安全工程中，Nonce是一个在加密通信只能使用一次的数字。在认证协议中，它往往是一个随机或伪随机数，以避免重放攻击。Nonce也用于流密码以确保安全。如果需要使用相同的密钥加密一个以上的消息，就需要Nonce来确保不同的消息与该密钥加密的密钥流不同。</p>
</blockquote>
<p>与浏览器中客户端发起的任何连接一样，WebSocket 请求也必须遵守同源策略：浏览器会自动在升级握手请求中追加Origin 首部，远程服务器可能使用CORS 判断接受或拒绝跨源请求。要完成握手，服务器必须返回一个成功的“Switching Protocols”（切换协议）响应，具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">101</span> Switching Protocols </div><div class="line"><span class="comment">// 101 响应码确认升级到WebSocket 协议</span></div><div class="line"></div><div class="line">Upgrade: websocket</div><div class="line">Connection: UpgradeAccess-Control-Allow-Origin: http:<span class="comment">//example.com </span></div><div class="line"><span class="comment">// CORS 首部表示选择同意跨源连接</span></div><div class="line"></div><div class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= </div><div class="line"><span class="comment">// 签名的键值验证协议支持</span></div><div class="line"></div><div class="line">Sec-WebSocket-Protocol: appProtocol-v2 </div><div class="line"><span class="comment">// 服务器选择的应用子协议</span></div><div class="line"></div><div class="line">Sec-WebSocket-Extensions: x-custom-extension </div><div class="line"><span class="comment">// 服务器选择的WebSocket 扩展</span></div></pre></td></tr></table></figure>
<blockquote>
<p>所有兼容RFC 6455 的WebSocket 服务器都使用相同的算法计算客户端挑战的答案：将Sec-WebSocket-Key 的内容与标准定义的唯一GUID 字符串拼接起来，计算出SHA1 散列值，结果是一个base-64 编码的字符串，把这个字符串发给客户端即可。Sec-WebSocket-Accept 这个头域的 ABNF [RFC2616]定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sec-WebSocket-Accept = base64-value-non-empty</div><div class="line">base64-value-non-empty = (1*base64-data [ base64-padding ]) |</div><div class="line">base64-padding</div><div class="line">base64-data = 4base64-character</div><div class="line">base64-padding = (2base64-character &quot;==&quot;) | </div><div class="line">(3base64-character &quot;=&quot;)</div><div class="line">base64-character = ALPHA | DIGIT | &quot;+&quot; | &quot;/&quot;</div></pre></td></tr></table></figure></p>
<p>如果客户端发送的key值为：”dGhlIHNhbXBsZSBub25jZQ==”，服务端将把”258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 这个唯一的GUID与它拼接起来，就是”dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CAC5AB0DC85B11”，然后对其进行SHA-1哈希，结果为”0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea”，再进行base64-encoded即可得”s3pPLMBiTxaQ9kYGzzhZRbK+xOo=”。</p>
</blockquote>
<p>成功的WebSocket 握手必须是客户端发送协议版本和自动生成的挑战值，服务器返回101 HTTP 响应码（Switching Protocols）和散列形式的挑战答案，确认选择的协议版本。</p>
<p>一旦客户端打开握手发送出去，在发送任何数据之前，客户端必须等待服务器的响应。客户端必须按如下步骤验证响应：</p>
<ol>
<li>如果从服务器接收到的状态码不是101，按HTTP【RFC2616】程序处理响应。在特殊情况下，如果客户端接收到401状态码，可能执行认证；服务器可能用3xx状态码重定向客户端（但不要求客户端遵循他们）。否则按下面处理。</li>
<li>如果响应缺失Upgrade头域或Upgrade头域的值没有包含大小写不敏感的ASCII 值”websocket”，客户端必须使WebSocket连接失败。</li>
<li>如果响应缺失Connection头域或其值不包含大小写不敏感的ASCII值”Upgrade”，客户端必须使WebSocket连接失败。</li>
<li>如果响应缺失Sec-WebSocket-Accept头域或其值不包含 [Sec-WebSocket-Key] （作为字符串，非base64解码的）+ “258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 的base64编码 SHA-1值，客户端必须使WebSocket连接失败。</li>
<li>如果响应包含Sec-WebSocket-Extensions头域，且其值指示使用的扩展不出现在客户端发送的握手（服务器指示的扩展不是客户端要求的），客户端必须使WebSocket连接失败。</li>
<li>如果响应包含Sec-WebSocket-Protocol头域，且这个头域指示使用的子协议不包含在客户端的握手（服务器指示的子协议不是客户端要求的），客户端必须使WebSocket连接失败。</li>
</ol>
<p>如果客户端完成了对服务端响应的升级协商验证，该连接就可以用作双向通信信道交换WebSocket 消息。从此以后，客户端与服务器之间不会再发生HTTP 通信，一切由WebSocket 协议接管。</p>
<h3 id="使用场景及性能"><a href="#使用场景及性能" class="headerlink" title="使用场景及性能"></a>使用场景及性能</h3><p>Websocket协议具有极简的API，开发者可以很简便的调用，而且提供了二进制分帧、可扩展性以及子协议协商等强大特性，使得WebSocket 成为在浏览器中采用自定义应用协议的最佳选择。但，在计算机世界里，任何技术和理论一般都是为解决特定问题而生的，并不是普世化的解决方案，WebSocket亦是如此。WebSocket 不能取代XHR 或SSE，何时以及如何使用，毋庸置疑会对性能产生巨大影响，要获得最佳性能，我们必须善于利用它的长处！下面将对现有的一些协议与WebSocket 对比进行一个大致介绍。</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1134915854/TB21QdsgKJ8puFjy1XbXXagqVXa_!!1134915854.png" alt=""></p>
<h4 id="请求和响应流"><a href="#请求和响应流" class="headerlink" title="请求和响应流"></a>请求和响应流</h4><p>XHR 是专门为“事务型”请求/ 响应通信而优化的：客户端向服务器发送完整的、格式良好的HTTP 请求，服务器返回完整的响应。这里不支持请求流，在Streams API 可用之前，没有可靠的跨浏览器响应流API。 SSE 可以实现服务器到客户端的高效、低延迟的文本数据流：客户端发起 SSE 连接，服务器使用事件源协议将更新流式发送给客户端。客户端在初次握手后，不能向服务器发送任何数据。 WebSocket 是唯一一个能通过同一个TCP 连接实现双向通信的机制，客户端和服务器随时可以交换数据。因此，WebSocket 在两个方向上都能保证文本和二进制应用数据的低延迟交付。</p>
<p>客户端到服务端传递消息的总时延由以下四个部分构成：</p>
<ul>
<li>传播延迟：消息从发送端到接收端需要的时间，是信号传播距离和速度的函数，传播时间取决于距离和信号通过的媒介，播速度通常不超过光速；</li>
<li>传输延迟：把消息中的所有比特转移到链路中需要的时间，是消息长度和链路速率的函数，由传输链路的速率决</li>
<li>定，与客户端到服务器的距离无关；</li>
<li>处理延迟：处理分组首部、检查位错误及确定分组目标所需的时间，常由硬件完成，因此相应的延迟一般非常短；</li>
<li>排队延迟：如果分组到达的速度超过了路由器的处理能力，那么分组就要在入站缓冲区排队，到来的分组排队等待处理的时间就是排队延迟。</li>
</ul>
<p>无论是什么样的传输机制，都不会减少客户端与服务器间的往返次数，数据包的传播延迟都一样。但，采用不同的传输机制可以有不同的排队延迟。对XHR 轮询而言，排队延迟就是客户端轮询间隔：服务器上的消息可用之后，必须等到下一次客户端XHR 请求才能发送。相对来说，SSE 和WebSocket 使用持久连接，这样服务器（和客户端——如果是WebSocket）就可以在消息可用时立即发送它，消除了消息的排队延迟，也就使得总的传输延迟更小。</p>
<h4 id="消息开销"><a href="#消息开销" class="headerlink" title="消息开销"></a>消息开销</h4><p>在完成最初的升级协商之后，客户端和服务器即可通过WebSocket 协议双向交换数据，消息分帧之后每帧会添加2~14 字节的开销；SSE 会给每个 消息添加 5 字节，但仅限于 UTF-8 内容(SSE 不是为传输二进制载荷而设计的！如果有必要，可以把二进制对象编码为base64 形式，然后再使用SSE)； HTTP 1.x 请求(XHR 及其他常规请求)会携带 500~800 字节的 HTTP 元数据，加上cookie； HTTP 2.0 压缩 HTTP 元数据，可以显著减少开销，如果请求都不修改首部，那么开销可以低至8 字节。WebSocket专门为双向通信而设计，开销很小，在实时通知应用开发中是不错的选择。</p>
<blockquote>
<p>上述开销不包括IP、TCP 和TLS 分帧的开销，后者一共会给每个消息增加60~100 字节，无论使用的是什么应用协议。</p>
</blockquote>
<h4 id="效率及压缩"><a href="#效率及压缩" class="headerlink" title="效率及压缩"></a>效率及压缩</h4><p>在使用HTTP协议传输数据时，每个请求都可以协商最优的传输编码格式（如对文本数据采用gzip 压缩）；SSE 只能传输UTF-8 格式数据，事件流数据可以在整个会话期间使用gzip 压缩；WebSocket 可以传输文本和二进制数据，压缩整个会话行不通，二进制的净荷也可能已经压缩过了！</p>
<p>鉴于WebSocket的特殊性，它需要实现自己的压缩机制，并针对每个消息选择应用。HyBi 工作组正在为WebSocket 协议制定以消息为单位的压缩扩展，但这个扩展尚未得到任何浏览器支持。目前来说，除非应用通过细致优化自己的二进制净荷实现自己的压缩逻辑，同时也针对文本消息实现自己的压缩逻辑，否则传输数据过程中一定会产生很大的字节开销！</p>
<h4 id="自定义应用协议"><a href="#自定义应用协议" class="headerlink" title="自定义应用协议"></a>自定义应用协议</h4><p>HTTP已经诞生了数十年，具有广泛的应用，各种优化专门的优化机制也已经被浏览器及服务器等设备实施，XHR 请求自然而然就继承了所有这些功能。然而，对于只使用HTTP协议完成升级协商的WebSocket来说，流式数据处理可以让我们在客户端和服务器间自定义协议，但也会错过浏览器提供的很多服务，应用可能必须实现自已的逻辑来填充某些功能空白，比如缓存、状态管理、元数据交付等等。</p>
<h4 id="部署WebSocket"><a href="#部署WebSocket" class="headerlink" title="部署WebSocket"></a>部署WebSocket</h4><p>HTTP 是专为短时突发性传输设计的，很多服务器、代理和其他中间设备的HTTP 连接空闲超时设置都很激进。这就与WebSocket的长时连接、实时双向通信相悖，部署时需要关注下面的三个方面：</p>
<ul>
<li>位于各自网络中的路由器、负载均衡器和代理；</li>
<li>外部网络中透明、确定的代理服务器（如 ISP 和运营商的代理）；</li>
<li>客户网络中的路由器、防火墙和代理。</li>
</ul>
<p>鉴于用户所处的网络环境是各不相同的，不受开发者所控制。某些网络甚至会完全屏蔽WebSocket通信，有些设备也不支持WebSocket协议，这时就需要采用备用机制，使用其他技术来实现类似与WebSocket的通信(如socket.io等)。虽然，我们无法处理网络中的中间设备，但对于处在我们自己掌控下的基础设施还是可以做一些工作的，可以对通信路径上的每一台负载均衡器、路由器和Web 服务器针对长时连接进行调优。然而，长时连接和空闲会话会占用所有中间设备及服务器的内存和套接字资源，开销很大，部署WebSocket、SSE及HTTP 2.0等赖于长时会话的协议都会对运维提出新的挑战。在使用WebSocket的过程中，也需要做到优化二进制净荷和压缩 UTF-8 内容以最小化传输数据、监控客户端缓冲数据的量、切分应用消息避免队首阻塞、合用的情况下利用其他传输机制等。</p>
<p>###总结</p>
<p>WebSocket 协议为实时双向通信而设计，提供高效、灵活的文本和二进制数据传输，同时也错过了浏览器为HTTP提供的一些服务，在使用时需要应用自己实现。在进行应用数据传输时，需要根据不同的场景选择恰当的协议，WebSocket 并不能取代HTTP、XHR 或SSE，关键还是要利用这些机制的长处以求得最佳性能。</p>
<p>Socket.IO</p>
<p>鉴于现在不同的平台及浏览器版本对WebSocket支持的不同，有开发者做了一个叫做socket.io 的为实时应用提供跨平台实时通信的库，我们可以使用它完成向WebSocket的切换。socket.io 旨在使实时应用在每个浏览器和移动设备上成为可能，模糊不同的传输机制之间的差异。socket.io 的名字源于它使用了浏览器支持并采用的 HTML5 WebSocket 标准，因为并不是所有的浏览器都支持 WebSocket ，所以该库支持一系列降级功能：</p>
<ul>
<li>Websocket</li>
<li>Adobe:registered: Flash:registered: Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
<p>在大部分情境下，你都能通过这些功能选择与浏览器保持类似长连接的功能。具体细节请看<a href="http://socket.io/docs/。" target="_blank" rel="external">http://socket.io/docs/。</a></p>
<p>参考资料</p>
<p><a href="http://chimera.labs.oreilly.com/books/1230000000545/ch17.html" target="_blank" rel="external">WEB性能权威指南-WebSocket</a><br><a href="https://tools.ietf.org/html/rfc6455#page-14" target="_blank" rel="external">RFC6455</a><br><a href="http://www.fzb.me/2015-3-24-websocket-protocol-abstract.html" target="_blank" rel="external">Websocket摘要</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="external">MDN-Websocket API</a><br><a href="http://www.ietf.org/rfc/rfc5234.txt" target="_blank" rel="external">ABNF语法规范</a><br><a href="https://www.qcloud.com/community/article/111" target="_blank" rel="external">HTTP1.1 学习笔记</a><br><a href="https://www.qcloud.com/community/article/82" target="_blank" rel="external">HTTP 2.0 简明笔记</a></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="WebSocket-数据类型"><a href="#WebSocket-数据类型" class="headerlink" title="WebSocket 数据类型"></a>WebSocket 数据类型</h3><ul>
<li>Blob</li>
<li>ArrayBuffer</li>
</ul>
<p>如果传输的是文件数据建议使用<code>Blob</code>类型<br>如果传输的数据需要进行字节操作建议使用<code>ArrayBuffer</code>类型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近应用中正好使用到&lt;code&gt;WebSocket&lt;/code&gt;, &lt;code&gt;腾讯Bugly&lt;/code&gt;就发表了这篇文章, 虽然也不是非常全面但是把&lt;code&gt;WebSocket&lt;/code&gt;的基本概念和使用都说到了, 还是相当受用, 故转载过来.&lt;br&gt;随后我会把把一些我遇到的转载文章中没有提及的问题补充到本文末尾. &lt;a href=&quot;http://t.cn/RiCKZ0R&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址-&amp;gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://huyaohui.com/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://huyaohui.com/tags/HTML5/"/>
    
      <category term="WebSocket" scheme="http://huyaohui.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator hot update</title>
    <link href="http://huyaohui.com/2017/02/25/Cocos-Creator-hot-update/"/>
    <id>http://huyaohui.com/2017/02/25/Cocos-Creator-hot-update/</id>
    <published>2017-02-25T08:05:35.000Z</published>
    <updated>2017-02-25T09:07:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为官方文档中有一些说的不是很明白的地方, 所以特写这篇文章对官方的热更新方案作一个补充.<br>同时也避免自己以后再次掉到坑里去.</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本篇文档基于 Cocos Creator v0.8 完成</strong></p>
<p>之所以这篇文档的标题为教程，是因为目前 Cocos Creator 资源热更新的工作流还没有彻底集成到编辑器中，不过引擎本身对于热更新的支持是完备的，所以借助一些外围脚本和一些额外的工作就可以达成。</p>
<p>本篇文档的范例工程可以从 <a href="https://github.com/cocos-creator/tutorial-hot-update" target="_blank" rel="external">Github 仓库</a>获取。</p>
<h2 id="使用场景和设计思路"><a href="#使用场景和设计思路" class="headerlink" title="使用场景和设计思路"></a>使用场景和设计思路</h2><p>资源热更新的使用场景相信游戏开发者都非常熟悉，对于已发布的游戏，在游戏内通过从服务器动态下载新的游戏内容，来时刻保持玩家对游戏的新鲜感，是保持一款游戏长盛不衰非常重要的手段。当然热更新还有一些其他的用途，不过在此不再深入讨论，我们下面将主要讨论 Cocos Creator 对热更新支持的原理和手段。</p>
<p>Cocos Creator 中的热更新主要源于 Cocos 引擎中的 AssetsManager 模块对热更新的支持。它有个非常重要的特点：</p>
<p><strong>服务端和本地均保存完整版本的游戏资源</strong>，热更新过程中通过比较服务端和本地版本的差异来决定更新哪些内容。这样即可天然支持跨版本更新，比如本地版本为 A，远程版本是 C，则直接更新 A 和 C 之间的差异，并不需要生成 A 到 B 和 B 到 C 的更新包，依次更新。所以，在这种设计思路下，新版本的文件以离散的方式保存在服务端，更新时以文件为单位下载。</p>
<p>除此之外，由于 WEB 版本可以通过服务器直接进行版本更新，所以资源热更新只适用于原生发布版本。AssetsManager 类也只在 jsb 命名空间下，在使用的时候需要注意判断运行环境。</p>
<h2 id="Manifest-文件"><a href="#Manifest-文件" class="headerlink" title="Manifest 文件"></a>Manifest 文件</h2><p>对于不同版本的文件级差异，AssetsManager 中使用 Manifest 文件来进行版本比对。本地和远端的 Manifest 文件分别标示了本地和远端的当前版本包含的文件列表和文件版本，这样就可以通过比对每个文件的版本来确定需要更新的文件列表。</p>
<p>Manifest 文件中包含以下几个重要信息：</p>
<ol>
<li>远程资源包的根路径</li>
<li>远程 Manifest 文件地址</li>
<li>远程 Version 文件地址（非必需）</li>
<li>主版本号</li>
<li>文件列表：以文件路径来索引，包含文件版本信息，一般推荐用文件的 md5 校验码来作为版本号</li>
<li>搜索路径列表</li>
</ol>
<p>其中 Version 文件内容是 Manifest 文件内容的一部分，不包含文件列表。由于 Manifest 文件可能比较大，每次检查更新的时候都完整下载的话可能影响体验，所以开发者可以额外提供一个非常小的 Version 文件。AssetsManager 会首先检查 Version 文件提供的主版本号来判断是否需要继续下载 Manifest 文件并更新。</p>
<h2 id="在-Cocos-Creator-项目中支持热更新"><a href="#在-Cocos-Creator-项目中支持热更新" class="headerlink" title="在 Cocos Creator 项目中支持热更新"></a>在 Cocos Creator 项目中支持热更新</h2><p>在这篇教程中，将提出一种针对 Cocos Creator 项目可行的热更新方案，不过我们将在 Cocos2d-x 的未来版本中开放 Downloader 的 JavaScript 接口，届时用户可以自由开发自己的热更新方案。</p>
<p>在开始详细讲解之前，开发者可以看一下 Cocos Creator 发布原生版本后的目录结构，这个目录结构和 Cocos2d-x JS 项目的目录是完全一致的。以前没有接触过 Cocos2d-x 的用户可以参考<a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/cocos2d-js/4-essential-concepts/4-1-cocos2d-js-project/zh.md" target="_blank" rel="external">项目结构文档</a>。对于 Cocos Creator 来说，所有 JS 脚本将会打包到 src 目录中，其他 Assets 资源将会被导出到 res 目录。</p>
<blockquote>
<p>Ps: 这里的 src 和 res 目录指的是在默认构建的情况下 build/jsb-default 目录下的 src 和 res 目录</p>
</blockquote>
<p>基于这样的项目结构，本篇教程中的热更新思路很简单：</p>
<ol>
<li>基于原生打包目录中的 res 和 src 目录生成本地 Manifest 文件。</li>
<li>创建一个热更新组件来负责热更新逻辑。</li>
<li>游戏发布后，若需要更新版本，则生成一套远程版本资源，包含 res 目录、src 目录和 Manifest 文件，将远程版本部署到服务端。</li>
<li>当热更新组件检测到服务端 Manifest 版本不一致时，就会开始热更新</li>
</ol>
<p>教程所使用的范例工程是基于 21 点范例修改而来的，为了展示热更新的过程，将工程中的 table 场景（牌桌场景）删除，设为 1.0.0 版本。并在 <code>remote-assets</code> 目录中保存带有 table 场景的完整版本，设为 1.1.0 版本。游戏开始时会检查远程是否有版本更新，如果发现远程版本则提示用户更新，更新完成后，用户重新进入游戏即可进入牌桌场景。</p>
<p><strong>注意</strong>，项目中包含的 <code>remove-assets</code> 为 debug 模式，开发者在测试的时候必须使用 debug 模式构建项目才有效，否则 release 模式的 jsc 文件优先级会高于 <code>remove-assets</code> 中的资源而导致脚本失效。</p>
<h3 id="使用-Version-Generator-来生成-Manifest-文件"><a href="#使用-Version-Generator-来生成-Manifest-文件" class="headerlink" title="使用 Version Generator 来生成 Manifest 文件"></a>使用 Version Generator 来生成 Manifest 文件</h3><p>在范例工程中，我们提供了一个 <a href="https://github.com/cocos-creator/tutorial-hot-update/blob/master/version_generator.js" target="_blank" rel="external">version_generator.js 文件</a>，这是一个用于生成 Manfiest 文件的 NodeJS 脚本。使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; node version_generator.js -v 1.0.0 -u http://your-server-address/tutorial-hot-update/remote-assets/ -s native/package/ -d assets/</div></pre></td></tr></table></figure>
<p>下面是参数说明：</p>
<ul>
<li><code>-v</code> 指定 Manifest 文件的主版本号。</li>
<li><code>-u</code> 指定服务器远程包的地址，这个地址需要和最初发布版本中 Manifest 文件的远程包地址一致，否则无法检测到更新。</li>
<li><code>-s</code> 本地原生打包版本的目录相对路径。</li>
<li><code>-d</code> 保存 Manifest 文件的地址。</li>
</ul>
<blockquote>
<p>Ps:<br>-s 默认情况下是: build/jsb-default/ 目录</p>
<p>构建过程:</p>
<ol>
<li>先构建点击构建项目</li>
<li>替换命令参数并执行命令</li>
</ol>
<p>需要注意的是, 以上操作最好在你项目准备上线是, 重新执行一次, 原因是需要更新manifest文件, 如果不更新, 虽然不会出现什么问题, 但是当你下次热更新时, 会把不需要热更新的文件也更新下来, 导致不必要的开销</p>
</blockquote>
<h3 id="热更新组件"><a href="#热更新组件" class="headerlink" title="热更新组件"></a>热更新组件</h3><p>在范例工程中，热更新组件的实现位于 <a href="https://github.com/cocos-creator/tutorial-hot-update/blob/master/assets/scripts/module/HotUpdate.js" target="_blank" rel="external"><code>assets/scripts/module/HotUpdate.js</code></a> 中，开发者可以参考这种实现，也可以自由得按自己的需求修改。</p>
<p>除此之外，范例工程中还搭配了一个 <code>Canvas/update</code> 节点用于提示更新和显示更新进度供参考。</p>
<h3 id="部署远程服务器"><a href="#部署远程服务器" class="headerlink" title="部署远程服务器"></a>部署远程服务器</h3><p>为了让游戏可以检测到远程版本，可以在本机上模拟一个远程服务器，搭建服务器的方案多种多样（比如 Python <a href="https://docs.python.org/2/library/simplehttpserver.html" target="_blank" rel="external">SimpleHTTPServer</a>），这里不做讨论，开发者可以使用自己习惯的方式。搭建成功后，访问远程包和 Manifest 文件的地址与范例工程中不同，所以需要修改以下几个地方来让游戏可以成功找到远程包：</p>
<ol>
<li><code>assets/project.manifest</code>：游戏的本地 Manifest 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
<li><code>remote-assets/project.manifest</code>：远程包的 Manifest 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
<li><code>remote-assets/version.manifest</code>：远程包的 Version 文件中的 <code>packageUrl</code>、<code>remoteManifestUrl</code> 和 <code>remoteVersionUrl</code></li>
</ol>
<blockquote>
<p>Ps: 服务器随便用什么都行, 只要能对外访问就好</p>
</blockquote>
<h3 id="打包原生版本"><a href="#打包原生版本" class="headerlink" title="打包原生版本"></a>打包原生版本</h3><p>下载完成范例工程后，可以用 Cocos Creator 直接打开这个工程。打开<code>构建发布</code>面板，构建原生版本，建议使用 Windows / Mac 来测试。</p>
<p>构建成功原生版本之后，打开原生发布包的地址，给 <code>main.js</code> 附加上搜索路径设置的逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 main.js 的开头添加如下代码</span></div><div class="line"><span class="keyword">if</span> (cc.sys.isNative) &#123;</div><div class="line">    <span class="keyword">var</span> hotUpdateSearchPaths = cc.sys.localStorage.getItem(<span class="string">'HotUpdateSearchPaths'</span>);</div><div class="line">    <span class="keyword">if</span> (hotUpdateSearchPaths) &#123;</div><div class="line">        jsb.fileUtils.setSearchPaths(<span class="built_in">JSON</span>.parse(hotUpdateSearchPaths));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者直接使用项目仓库根目录下的 <code>main.js</code> 覆盖原生打包文件夹内的 <code>main.js</code>。注意，每次使用 Cocos Creator 构建后，都需要重新修改 <code>main.js</code>。</p>
<p>这一步是必须要做的原因是，热更新的本质是用远程下载的文件取代原始游戏包中的文件。Cocos2d-x 的搜索路径恰好满足这个需求，它可以用来指定远程包的下载地址作为默认的搜索路径，这样游戏运行过程中就会使用下载好的远程版本。另外，这里搜索路径是在上一次更新的过程中使用 <code>cc.sys.localStorage</code>（它符合 WEB 标准的 <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" target="_blank" rel="external">Local Storage API</a>）固化保存在用户机器上，<code>HotUpdateSearchPaths</code> 这个键值是在 <code>HotUpdate.js</code> 中指定的，保存和读取过程使用的名字必须匹配。</p>
<p>此外，打开工程过程中如果遇到这个警告可以忽略：<code>loader for [.manifest] not exists!</code>。</p>
<blockquote>
<p>Ps: 这里已经有热更新插件可以解决了, 不需要手动修改, 可无视这段</p>
</blockquote>
<h3 id="运行范例工程"><a href="#运行范例工程" class="headerlink" title="运行范例工程"></a>运行范例工程</h3><p>如果一切正常，此时运行原生版本的范例工程，就会发现检测到新版本，提示更新，更新之后会自动重启游戏，此时可进入 table 场景。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上介绍的是目前一种可能的热更新方案，Cocos Creator 在未来版本中提供更成熟的热更新方案，直接集成到编辑器中。当然，也会提供底层 Downloader API 来允许用户自由实现自己的热更新方案，并通过插件机制在编辑器中搭建完整可视化的工作流。这篇教程和范例工程提供给大家参考，并不是官方方案，也鼓励开发者针对自己的工作流进行定制。如果有问题和交流也欢迎反馈到<a href="http://www.cocoachina.com/bbs/thread.php?fid-71.html" target="_blank" rel="external">论坛</a>中。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&amp;url=/doc/cocos-docs-master/manual/framework/html5/v3/assets-manager/zh.md" target="_blank" rel="external">资源管理器 Assets Manager 文档</a></li>
</ol>
<blockquote>
<p>Ps: 我非要吐槽一下这个文档链接不看, Cocos官方文档中很多像这样的链接都是打不开的, 要么就是打开后没东西, 囧..</p>
</blockquote>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><blockquote>
<ol>
<li>除首次发布项目需要吧<code>project.manifest</code> <code>-d</code> 参数设置为 <code>assets/</code>, 之后的热更新, 都不需要再设置这个参数了, 默认会生成到<code>remote-assets</code>目录下, 原因是当你修改了重新构建后他仍然会被热更新到客户端, 但是这个文件实际上不会再被用到</li>
<li>执行完<code>node</code>命令后需要把<code>build/jsb-default</code>目录下的<code>src</code>和<code>res</code>目录拷贝出来, 连同生成的<code>project.manifest</code>和<code>version.manifest</code>文件一起放到web服务器下</li>
</ol>
</blockquote>
<h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><blockquote>
<ol>
<li>当重复点击检查更新是, 会出现无法检查的问题, 但是第一次是没有问题的</li>
<li>在<code>XCode</code>上调试时,  如果你重新编译, 会变成没有热更新的状态, 但是你点击更新有会提示已经是最新版本了<br> 这个问题, 不知道是什么原因, 但是目前已知的信息来看, 提示更新是因为本地数据仍然存在, 但是重新编译导致热更新失败比知道是什么原因<br> 不过这并不是什么问题, 一般用户也不可能冲洗编译的, 如果删除了应用重新安装, 那么本地的数据也会被删除掉, 这样也是没问题的</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为官方文档中有一些说的不是很明白的地方, 所以特写这篇文章对官方的热更新方案作一个补充.&lt;br&gt;同时也避免自己以后再次掉到坑里去.&lt;/p&gt;
    
    </summary>
    
      <category term="CocosCreator" scheme="http://huyaohui.com/categories/CocosCreator/"/>
    
    
      <category term="Game" scheme="http://huyaohui.com/tags/Game/"/>
    
      <category term="Cocos2dx" scheme="http://huyaohui.com/tags/Cocos2dx/"/>
    
      <category term="CocosCreator" scheme="http://huyaohui.com/tags/CocosCreator/"/>
    
  </entry>
  
</feed>
